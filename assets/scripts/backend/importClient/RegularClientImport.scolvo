 import {
   /backend/repository/HistoryRepository,
   /backend/repository/CallLogRepository,
   /backend/repository/ContactRepository,
   /backend/repository/MeetingMemoRepository,
   /backend/repository/OfferRepository,
   /backend/repository/AttachmentRepository,
   /backend/importClient/ClientExposureImport,
   /backend/importClient/ImportMetadata,
   /common/CsvExtension,
   /common/ExceptionHandling,
   /backend/Broadcast
 }

 var reportEmailAddress;

 function importRegularClientsData(corporateType) {
   var filePath;
   if (corporateType == "OTP") {
     filePath = "/import/OTP_regular_client_data.txt";
     reportEmailAddress = "otpvb-support@scolvo.com"; //TODO: temporary mail address for OTP branch
   } else if (corporateType == "Voban") {
     filePath = "/import/Voban_regular_client_data.txt";
     var envType = getEnv("ENV");
     if(envType == "test" || envType == "prod") {
       reportEmailAddress = "Djordje.begojev@voban.rs, otpvb-support@scolvo.com, dejan.cupac@voban.rs";
     }
     else {
       reportEmailAddress = "otpvb-support@scolvo.com";
     }
   } else {
     throw UknownCorporateTypeException;
   }
   var importCompaniesHeaders = ["Date_on", "ClientID", "Company_Name",
     "City", "MB", "Company_Size", "Established",
     "Business_activity", "Address", "Telephone", "Email", "Contact_person",
     "Business_Unit", "Branch", "Relationship_Manager", "Total_exposure",
     "Internal_rating", "Overdue", "Days_in_delay", "Turnover_RSD_Yearly",
     "Turnover_FX_Yearly", "Income_from_payment",
     "Number_of_employees_on_payroll", "Tariff_for_payment", "Blockade",
     "Date_of_last_corporate_balance", "Revenues", "Net_income",
     "Leverage_ratio", "Liquidity_ratio", "Equity_ratio", "E_bank",
     "Business_card", "POS_terminals"
   ];
   var importClientExposureHeaders = ["Date_on", "ClientID", "Account", "Stage",
     "Product_Type", "Amount", "Currency", "Interest_Rate", "Due_Date"
   ];
   var errorRecords = [];
   var parsedCompanies;
   try {
     parsedCompanies = readCsvFile(filePath, importCompaniesHeaders, getReadCsvFormat());
   }
   catch(com.scolvo.core.interpreter.exception.InterpreterException exception) {
     if(findException(exception, "FileNotFoundException") != null) {
       sendEmail(
         getEnv("EMAIL_USERNAME"),
         reportEmailAddress,
         "",
         "Regular client import issues",
         "Regular client import file was not found in import directory!",
         null);
       return null;
     }
     else {
       throw ImportException;
     }
   }
   //var companiesToDelete = getCompaniesByType("regular");
   //var regularCompaniesToDelete = getRegularCompanies();
   var importMetadataRegularClientDateOn = null;
   parsedCompanies.each(function(parsedCompany) {
     var rowImported = false;
     var rmCode = parsedCompany.Relationship_Manager;
     var companyId = parsedCompany.ClientID;
     if (rmCode == null || rmCode.isEmpty() || rmCode.length() > 50) {
       warn("Skip client, because it does not contain a valid RM code. " + parsedCompany.toString());
       clearParsedRegularClient(parsedCompany);
       parsedCompany.put("Relationship_Manager", "RM code is empty or longer than 50 characters");
       errorRecords.add(buildRegularClientImportErrorReport(parsedCompany));
     }
     else if (companyId == null || companyId.isEmpty() || companyId.length() > 20) {
       warn("Skip client, because is does not contain valid COMPANY ID. " + parsedCompany.toString());
       clearParsedRegularClient(parsedCompany);
       parsedCompany.put("ClientID", "Company ID is empty or longer than 20 characters");
       errorRecords.add(buildRegularClientImportErrorReport(parsedCompany));
     }
     else {
       try {
         var rmUserDao = getUserByRMCode(rmCode);
         var originalCompany = getCompanyByCompanyId(companyId);
         var companyDao = buildRegularCompanyDao(parsedCompany, rmUserDao.id);
         var regularClientDao = buildRegularClientDao(parsedCompany, errorRecords, companyDao == null);
         var clientDg = {};
         if (regularClientDao != null && companyDao != null) {
           if (originalCompany == null) {
             companyDao.put("id", uuid());
             clientDg.put("company", companyDao.deepClone());
             clientDg.put("changeType", "INSERT");
             companyDao.put("changeType", "INSERT");

             companyDao.put("createdBy", "importJob");
             companyDao.put("createdAt", nowInMillis());
             insertExecution("company", companyDao);
             rowImported = true;
           } else if (isCompanyUpdateNecessary(originalCompany, companyDao)) {
             insertHistoryExecution("company", originalCompany);
             companyDao.put("id", originalCompany.id);
             clientDg.put("company", companyDao.deepClone());
             clientDg.put("changeType", "UPDATE");
             companyDao.put("changeType", "UPDATE");

             companyDao.put("updatedBy", "importJob");
             companyDao.put("updatedAt", nowInMillis());
             updateExecution("company", companyDao.id, companyDao);
             rowImported = true;
           } else {
             warn("Skip company, no new field values " + parsedCompany.toString());
           }
           var originalRegularClient = getRegularClientByClientId(companyId);
           if (originalRegularClient == null) {
             regularClientDao.put("id", uuid());
             clientDg.put("companyRegular", regularClientDao.deepClone());
             clientDg.put("changeType", "INSERT");
             regularClientDao.put("changeType", "INSERT");

             regularClientDao.put("createdBy", "importJob");
             regularClientDao.put("createdAt", nowInMillis());
             insertExecution("companyRegular", regularClientDao);
           } else if (isRegularClientUpdateNecessary(originalRegularClient, regularClientDao)) {
             insertHistoryExecution("companyRegular", originalRegularClient);
             regularClientDao.put("id", originalRegularClient.id);
             clientDg.put("companyRegular", regularClientDao.deepClone());
             clientDg.put("changeType", "UPDATE");
             regularClientDao.put("changeType", "UPDATE");

             regularClientDao.put("updatedBy", "importJob");
             regularClientDao.put("updatedAt", nowInMillis());
             updateExecution("companyRegular", regularClientDao.id, regularClientDao);
           } else {
             warn("Skip regularCompany, no new field values " + parsedCompany.toString());
           }
           if(clientDg.containsKey("company") || clientDg.containsKey("companyRegular")) {
             publishBroadcast("regularClient", [clientDg]);
           }
           /*
           companiesToDelete = companiesToDelete.filter(function(companyItem) {
             return companyItem.companyId != companyId;
           });
           regularCompaniesToDelete = regularCompaniesToDelete.filter(function(regularCompanyItem) {
             return regularCompanyItem.companyId != companyId;
           });
           */
         }
       } catch (UserNotFoundException e) {
         warn("Skip client, because no user is found for the referenced RM code. " + parsedCompany.toString());
         clearParsedRegularClient(parsedCompany);
         parsedCompany.put("Relationship_Manager", "No user was found for the referenced RM code (" + rmCode + ")");
         errorRecords.add(buildRegularClientImportErrorReport(parsedCompany));
       }
     }
     if (importMetadataRegularClientDateOn == null && rowImported) {
       importMetadataRegularClientDateOn = parsedCompany.Date_on;
     }
   });

   if (importMetadataRegularClientDateOn != null) {
     info("Save import metadata for regular client import ...");
     var dateOnConverted = parseStringToDate(importMetadataRegularClientDateOn, "dd.MM.yyyy.");
     saveImportMetadata("regular", dateOnConverted.getTime());
   }
   /* DELETE companies which are not part of the import file - currently disabled
   deleteCompanies(companiesToDelete);
   deleteRegularClientsAndRelatedData(regularCompaniesToDelete);

   companiesToDelete.each(function(companyToDelete) {
     companiesDg.add({
       "id": companyToDelete.id,
       "changeType": "DELETE"
     });
   });
   */

   var clientExposureErrorRecords;
   try {
     clientExposureErrorRecords = importClientExposureData(corporateType, importClientExposureHeaders);
   }
   catch(ClientExposureImportException exception) {
     throw ImportException;
   }

   var regularClientErrorReportDownloadUrl = "";
   var clientExposureErrorReportDownloadUrl = "";
   if (!errorRecords.isEmpty()) {
     var regularClientReportName = corporateType + "_regularClientImportErrors_" + dateToString(nowInMillis(), "yyyy-MM-dd") + ".csv";
     var regularClientImportAwsRelativePath = "importRegularClientErrorLogs/" + nowInMillis() + "/" + regularClientReportName;
     regularClientErrorReportDownloadUrl = uploadCsvFileToAws(regularClientReportName, regularClientImportAwsRelativePath, importCompaniesHeaders, errorRecords);
   }
   if (!clientExposureErrorRecords.isEmpty()) {
     var clientExposureReportName = corporateType + "_clientExposureImportErrors_" + dateToString(nowInMillis(), "yyyy-MM-dd") + ".csv";
     var clientExposureAwsRelativePath = "importClientExposureErrorLogs/" + nowInMillis() + "/" + clientExposureReportName;
     clientExposureErrorReportDownloadUrl = uploadCsvFileToAws(clientExposureReportName, clientExposureAwsRelativePath, importClientExposureHeaders, clientExposureErrorRecords);
   }

   if (!regularClientErrorReportDownloadUrl.isEmpty() || !clientExposureErrorReportDownloadUrl.isEmpty()) {
     var emailText = "There were some problems during data import, see the linked report(s) for more details:

     " + regularClientErrorReportDownloadUrl + "

     " + clientExposureErrorReportDownloadUrl;
     sendEmail(
       getEnv("EMAIL_USERNAME"),
       reportEmailAddress,
       "",
       "Regular client import issues",
       emailText,
       null);
   }
 }

function deleteRegularClientsAndRelatedData(regularClientDaos) {
  var companyRegularsDg = [];
  regularClientDaos.each(function (regularClientDao) {
    companyRegularsDg.add({
      "id": regularClientDao.id,
      "changeType": "DELETE"
    });
    deleteRegularCompany(regularClientDao);
    deleteAttachments(regularClientDao.companyId);
    deleteRegularMeetingMemos(regularClientDao.companyId);
    deleteContacts(regularClientDao.companyId);
    deleteCallLogs(regularClientDao.companyId);
    deleteOffers(regularClientDao.companyId);
  });
  publishBroadcast("companyRegular", companyRegularsDg);
}

 function buildRegularClientDao(parsedCompany, errorRecords, companyContainsError) {
   var clientContainsErrors = false;
   var regularClientDao = {
     "companyId": parsedCompany.ClientID
   };
   var parsedCompanyCopy = parsedCompany.deepClone();

   if (parsedCompany.Blockade != null && !parsedCompany.Blockade.isEmpty()) {
     if (parsedCompany.Blockade != "0" && parsedCompany.Blockade != "1") {
       warn("Error in client " + parsedCompany.getOrDefault("ClientID", "") + " field: Blockade = " + parsedCompany.Blockade);
       clientContainsErrors = true;
       parsedCompany.put("Blockade", "Blockade must be 0 or 1" + " (" + parsedCompanyCopy.Blockade + ")");
     }
     else {
       parsedCompany.put("Blockade", "");
     }
   }

   if (parsedCompany.MB != null && !parsedCompany.MB.isEmpty()) {
     if(parsedCompany.MB.length() <= 50) {
       regularClientDao.put("mb", parsedCompany.MB);
       parsedCompany.put("MB", "");
     }
     else {
       warn("Error in client " + parsedCompany.getOrDefault("ClientID", "") + " field: MB = " + parsedCompany.MB);
       clientContainsErrors = true;
       parsedCompany.put("MB", "MB is invalid or longer than 50 characters" + " (" + parsedCompanyCopy.MB + ")");
     }
   }
   if (parsedCompany.Email != null && !parsedCompany.Email.isEmpty()) {
     if(parsedCompany.Email.length() <= 50) {
       regularClientDao.put("email", parsedCompany.Email);
       parsedCompany.put("Email", "");
     }
     else {
       warn("Error in client " + parsedCompany.getOrDefault("ClientID", "") + " field: Email = " + parsedCompany.Email);
       clientContainsErrors = true;
       parsedCompany.put("Email", "Email is invalid or longer than 50 characters" + " (" + parsedCompanyCopy.Email + ")");
     }
   }
   if (parsedCompany.Established != null && !parsedCompany.Established.isEmpty()) {
     try {
       regularClientDao.put("established", parseStringToDate(parsedCompany.Established, "dd.MM.yyyy.").getTime());
       parsedCompany.put("Established", "");
     } catch (com.scolvo.core.interpreter.exception.InterpreterException e) {
       warn("Error in client " + parsedCompany.getOrDefault("ClientID", "") + " field: Established = " + parsedCompany.Established);
       clientContainsErrors = true;
       parsedCompany.put("Established", "Established is not a valid date format" + " (" + parsedCompanyCopy.Established + ")");
     }
   }
   if (parsedCompany.Branch != null && !parsedCompany.Branch.isEmpty()) {
     if(parsedCompany.Branch.length() <= 100) {
       regularClientDao.put("branch", parsedCompany.Branch);
       parsedCompany.put("Branch", "");
     }
     else {
       warn("Error in client " + parsedCompany.getOrDefault("ClientID", "") + " field: Branch = " + parsedCompany.Branch);
       clientContainsErrors = true;
       parsedCompany.put("Branch", "Branch is invalid or longer than 100 characters" + " (" + parsedCompanyCopy.Branch + ")");
     }
   }
   if (parsedCompany.Internal_rating != null && !parsedCompany.Internal_rating.isEmpty()) {
     if(parsedCompany.Internal_rating.length() <= 20) {
       regularClientDao.put("internalRating", parsedCompany.Internal_rating);
       parsedCompany.put("Internal_rating", "");
     }
     else {
       warn("Error in client " + parsedCompany.getOrDefault("ClientID", "") + " field: Internal_rating = " + parsedCompany.Internal_rating);
       clientContainsErrors = true;
       parsedCompany.put("Internal_rating", "Internal rating is invalid or longer than 20 characters" + " (" + parsedCompanyCopy.Internal_rating + ")");
     }
   }
   if (parsedCompany.Tariff_for_payment != null && !parsedCompany.Tariff_for_payment.isEmpty()) {
     if(parsedCompany.Tariff_for_payment.length() <= 100) {
       regularClientDao.put("tariffForPayment", parsedCompany.Tariff_for_payment);
       parsedCompany.put("Tariff_for_payment", "");
     }
     else {
       warn("Error in client " + parsedCompany.getOrDefault("ClientID", "") + " field: Tariff_for_payment = " + parsedCompany.Tariff_for_payment);
       clientContainsErrors = true;
       parsedCompany.put("Tariff_for_payment", "Tariff for payment is invalid or longer than 100 characters" + " (" + parsedCompanyCopy.Tariff_for_payment + ")");
     }
   }
   if (parsedCompany.Date_of_last_corporate_balance != null && !parsedCompany.Date_of_last_corporate_balance.isEmpty()) {
     try {
       regularClientDao.put("lastCorporateBalanceDate", parseStringToDate(parsedCompany.Date_of_last_corporate_balance, "dd.MM.yyyy.").getTime());
       parsedCompany.put("Date_of_last_corporate_balance", "");
     } catch (com.scolvo.core.interpreter.exception.InterpreterException e) {
       warn("Error in client " + parsedCompany.getOrDefault("ClientID", "") + " field: Date_of_last_corporate_balance = " + parsedCompany.Date_of_last_corporate_balance);
       clientContainsErrors = true;
       parsedCompany.put("Date_of_last_corporate_balance", "Date of last corporate balance is not a valid date format" + " (" + parsedCompanyCopy.Date_of_last_corporate_balance + ")");
     }
   }

   if (parsedCompany.Total_exposure != null && !parsedCompany.Total_exposure.isEmpty()) {
     if (isNumber(parsedCompany.getOrDefault("Total_exposure", ""))) {
       regularClientDao.put("totalExposure", parseNumber(parsedCompany.Total_exposure, ",", " "));
       parsedCompany.put("Total_exposure", "");
     } else {
       warn("Error in client " + parsedCompany.getOrDefault("ClientID", "") + " field: Total_exposure = " + parsedCompany.Total_exposure);
       clientContainsErrors = true;
       parsedCompany.put("Total_exposure", "Total exposure is not a number" + " (" + parsedCompanyCopy.Total_exposure + ")");
     }
   }
   if (parsedCompany.Overdue != null && !parsedCompany.Overdue.isEmpty()) {
     if (parsedCompany.Overdue == "0" || parsedCompany.Overdue == "1") {
       regularClientDao.put("overdue", parseNumber(parsedCompany.Overdue) == 1);
       parsedCompany.put("Overdue", "");
     } else {
       warn("Error in client " + parsedCompany.getOrDefault("ClientID", "") + " field: Overdue = " + parsedCompany.Overdue);
       clientContainsErrors = true;
       parsedCompany.put("Overdue", "Overdue must be 0 or 1" + " (" + parsedCompanyCopy.Overdue + ")");
     }
   }
   if (parsedCompany.Days_in_delay != null && !parsedCompany.Days_in_delay.isEmpty()) {
     if (isNumber(parsedCompany.getOrDefault("Days_in_delay", ""))) {
       regularClientDao.put("daysInDelay", parseNumber(parsedCompany.Days_in_delay));
       parsedCompany.put("Days_in_delay", "");
     } else {
       warn("Error in client " + parsedCompany.getOrDefault("ClientID", "") + " field: Days_in_delay = " + parsedCompany.Days_in_delay);
       clientContainsErrors = true;
       parsedCompany.put("Days_in_delay", "Days in delay is not a number" + " (" + parsedCompanyCopy.Days_in_delay + ")");
     }
   }
   if (parsedCompany.Turnover_RSD_Yearly != null && !parsedCompany.Turnover_RSD_Yearly.isEmpty()) {
     if (isNumber(parsedCompany.getOrDefault("Turnover_RSD_Yearly", ""))) {
       regularClientDao.put("turnoverRsdYearly", parseNumber(parsedCompany.Turnover_RSD_Yearly, ",", " "));
       parsedCompany.put("Turnover_RSD_Yearly", "");
     } else {
       warn("Error in client " + parsedCompany.getOrDefault("ClientID", "") + " field: Turnover_RSD_Yearly = " + parsedCompany.Turnover_RSD_Yearly);
       clientContainsErrors = true;
       parsedCompany.put("Turnover_RSD_Yearly", "Turnover RSD yearly is not a number" + " (" + parsedCompanyCopy.Turnover_RSD_Yearly + ")");
     }
   }
   if (parsedCompany.Turnover_FX_Yearly != null && !parsedCompany.Turnover_FX_Yearly.isEmpty()) {
     if (isNumber(parsedCompany.getOrDefault("Turnover_FX_Yearly", ""))) {
       regularClientDao.put("turnoverFxYearly", parseNumber(parsedCompany.Turnover_FX_Yearly, ",", " "));
       parsedCompany.put("Turnover_FX_Yearly", "");
     } else {
       warn("Error in client " + parsedCompany.getOrDefault("ClientID", "") + " field: Turnover_FX_Yearly = " + parsedCompany.Turnover_FX_Yearly);
       clientContainsErrors = true;
       parsedCompany.put("Turnover_FX_Yearly", "Turnover FX yearly is not a number" + " (" + parsedCompanyCopy.Turnover_FX_Yearly + ")");
     }
   }
   if (parsedCompany.Income_from_payment != null && !parsedCompany.Income_from_payment.isEmpty()) {
     if (isNumber(parsedCompany.getOrDefault("Income_from_payment", ""))) {
       regularClientDao.put("incomeFromPayment", parseNumber(parsedCompany.Income_from_payment, ",", " "));
       parsedCompany.put("Income_from_payment", "");
     } else {
       warn("Error in client " + parsedCompany.getOrDefault("ClientID", "") + " field: Income_from_payment = " + parsedCompany.Income_from_payment);
       clientContainsErrors = true;
       parsedCompany.put("Income_from_payment", "Income from payment is not a number" + " (" + parsedCompanyCopy.Income_from_payment + ")");
     }
   }
   if (parsedCompany.Number_of_employees_on_payroll != null && !parsedCompany.Number_of_employees_on_payroll.isEmpty()) {
     if (isNumber(parsedCompany.getOrDefault("Number_of_employees_on_payroll", ""))) {
       regularClientDao.put("employeesOnPayroll", parseNumber(parsedCompany.Number_of_employees_on_payroll));
       parsedCompany.put("Number_of_employees_on_payroll", "");
     } else {
       warn("Error in client " + parsedCompany.getOrDefault("ClientID", "") + " field: Number_of_employees_on_payroll = " + parsedCompany.Number_of_employees_on_payroll);
       clientContainsErrors = true;
       parsedCompany.put("Number_of_employees_on_payroll", "Number of employees on payroll is not a number" + " (" + parsedCompanyCopy.Number_of_employees_on_payroll + ")");
     }
   }
   if (parsedCompany.Revenues != null && !parsedCompany.Revenues.isEmpty()) {
     if (isNumber(parsedCompany.getOrDefault("Revenues", ""))) {
       regularClientDao.put("revenue", parseNumber(parsedCompany.Revenues, ",", " "));
       parsedCompany.put("Revenues", "");
     } else {
       warn("Error in client " + parsedCompany.getOrDefault("ClientID", "") + " field: Revenues = " + parsedCompany.Revenues);
       clientContainsErrors = true;
       parsedCompany.put("Revenues", "Revenues is not a number" + " (" + parsedCompanyCopy.Revenues + ")");
     }
   }
   if (parsedCompany.Net_income != null && !parsedCompany.Net_income.isEmpty()) {
     if (isNumber(parsedCompany.getOrDefault("Net_income", ""))) {
       regularClientDao.put("netIncome", parseNumber(parsedCompany.Net_income, ",", " "));
       parsedCompany.put("Net_income", "");
     } else {
       warn("Error in client " + parsedCompany.getOrDefault("ClientID", "") + " field: Net_income = " + parsedCompany.Net_income);
       clientContainsErrors = true;
       parsedCompany.put("Net_income", "Net income is not a number" + " (" + parsedCompanyCopy.Net_income + ")");
     }
   }
   if (parsedCompany.Leverage_ratio != null && !parsedCompany.Leverage_ratio.isEmpty()) {
     if (isNumber(parsedCompany.getOrDefault("Leverage_ratio", ""))) {
       regularClientDao.put("leverageRatio", parseNumber(parsedCompany.Leverage_ratio, ",", " "));
       parsedCompany.put("Leverage_ratio", "");
     } else {
       warn("Error in client " + parsedCompany.getOrDefault("ClientID", "") + " field: Leverage_ratio = " + parsedCompany.Leverage_ratio);
       clientContainsErrors = true;
       parsedCompany.put("Leverage_ratio", "Leverage ratio is not a number" + " (" + parsedCompanyCopy.Leverage_ratio + ")");
     }
   }
   if (parsedCompany.Liquidity_ratio != null && !parsedCompany.Liquidity_ratio.isEmpty()) {
     if (isNumber(parsedCompany.getOrDefault("Liquidity_ratio", ""))) {
       regularClientDao.put("liquidityRatio", parseNumber(parsedCompany.Liquidity_ratio, ",", " "));
       parsedCompany.put("Liquidity_ratio", "");
     } else {
       warn("Error in client " + parsedCompany.getOrDefault("ClientID", "") + " field: Liquidity_ratio = " + parsedCompany.Liquidity_ratio);
       clientContainsErrors = true;
       parsedCompany.put("Liquidity_ratio", "Liquidity ratio is not a number" + " (" + parsedCompanyCopy.Liquidity_ratio + ")");
     }
   }
   if (parsedCompany.Equity_ratio != null && !parsedCompany.Equity_ratio.isEmpty()) {
     if (isNumber(parsedCompany.getOrDefault("Equity_ratio", ""))) {
       regularClientDao.put("equityRatio", parseNumber(parsedCompany.Equity_ratio, ",", " "));
       parsedCompany.put("Equity_ratio", "");
     } else {
       warn("Error in client " + parsedCompany.getOrDefault("ClientID", "") + " field: Equity_ratio = " + parsedCompany.Equity_ratio);
       clientContainsErrors = true;
       parsedCompany.put("Equity_ratio", "Equity ratio is not a number" + " (" + parsedCompanyCopy.Equity_ratio + ")");
     }
   }
   if (parsedCompany.E_bank != null && !parsedCompany.E_bank.isEmpty()) {
     if (parsedCompany.E_bank == "0" || parsedCompany.E_bank == "1") {
       regularClientDao.put("eBank", parseNumber(parsedCompany.E_bank) == 1);
       parsedCompany.put("E_bank", "");
     } else {
       warn("Error in client " + parsedCompany.getOrDefault("ClientID", "") + " field: E_bank = " + parsedCompany.E_bank);
       clientContainsErrors = true;
       parsedCompany.put("E_bank", "Ebank must be 0 or 1" + " (" + parsedCompanyCopy.E_bank + ")");
     }
   }
   if (parsedCompany.Business_card != null && !parsedCompany.Business_card.isEmpty()) {
     if (parsedCompany.Business_card == "0" || parsedCompany.Business_card == "1") {
       regularClientDao.put("businessCard", parseNumber(parsedCompany.Business_card) == 1);
       parsedCompany.put("Business_card", "");
     } else {
       warn("Error in client " + parsedCompany.getOrDefault("ClientID", "") + " field: Business_card = " + parsedCompany.Business_card);
       clientContainsErrors = true;
       parsedCompany.put("Business_card", "Business card must be 0 or 1" + " (" + parsedCompanyCopy.Business_card + ")");
     }
   }
   if (parsedCompany.POS_terminals != null && !parsedCompany.POS_terminals.isEmpty()) {
     if (parsedCompany.POS_terminals == "0" || parsedCompany.POS_terminals == "1") {
       regularClientDao.put("posTerminal", parseNumber(parsedCompany.POS_terminals) == 1);
       parsedCompany.put("POS_terminals", "");
     } else {
       warn("Error in client " + parsedCompany.getOrDefault("ClientID", "") + " field: POS_terminals = " + parsedCompany.POS_terminals);
       clientContainsErrors = true;
       parsedCompany.put("POS_terminals", "POS terminals must be 0 or 1" + " (" + parsedCompanyCopy.POS_terminals + ")");
     }
   }

   if (clientContainsErrors || companyContainsError) {
     warn("Skipping regular client " + parsedCompany.ClientID + " because data contains errors");
     parsedCompany.put("Date_on", "");
     parsedCompany.put("Business_Unit", "");
     parsedCompany.put("Relationship_Manager", "");
     errorRecords.add(buildRegularClientImportErrorReport(parsedCompany));
     return null;
   }

   return regularClientDao;
 }

 function isRegularClientUpdateNecessary(originalRegularClient, newRegularClient) {
   if (originalRegularClient.mb != newRegularClient.mb) {
     return true;
   }
   if (originalRegularClient.email != newRegularClient.email) {
     return true;
   }
   if (originalRegularClient.branch != newRegularClient.branch) {
     return true;
   }
   if (originalRegularClient.totalExposure != newRegularClient.totalExposure) {
     return true;
   }
   if (originalRegularClient.internalRating != newRegularClient.internalRating) {
     return true;
   }
   if (originalRegularClient.overdue != newRegularClient.overdue) {
     return true;
   }
   if (originalRegularClient.daysInDelay != newRegularClient.daysInDelay) {
     return true;
   }
   if (originalRegularClient.turnoverRsdYearly != newRegularClient.turnoverRsdYearly) {
     return true;
   }
   if (originalRegularClient.turnoverFxYearly != newRegularClient.turnoverFxYearly) {
     return true;
   }
   if (originalRegularClient.incomeFromPayment != newRegularClient.incomeFromPayment) {
     return true;
   }
   if (originalRegularClient.employeesOnPayroll != newRegularClient.employeesOnPayroll) {
     return true;
   }
   if (originalRegularClient.tariffForPayment != newRegularClient.tariffForPayment) {
     return true;
   }
   if (originalRegularClient.revenue != newRegularClient.revenue) {
     return true;
   }
   if (originalRegularClient.netIncome != newRegularClient.netIncome) {
     return true;
   }
   if (originalRegularClient.leverageRatio != newRegularClient.leverageRatio) {
     return true;
   }
   if (originalRegularClient.liquidityRatio != newRegularClient.liquidityRatio) {
     return true;
   }
   if (originalRegularClient.equityRatio != newRegularClient.equityRatio) {
     return true;
   }
   if (originalRegularClient.eBank != newRegularClient.eBank) {
     return true;
   }
   if (originalRegularClient.businessCard != newRegularClient.businessCard) {
     return true;
   }
   if (originalRegularClient.posTerminal != newRegularClient.posTerminal) {
     return true;
   }
   if (!dateSame(originalRegularClient.getOrDefault("established", 0), newRegularClient.getOrDefault("established", 0), "day")) {
     return true;
   }
   if (!dateSame(originalRegularClient.getOrDefault("lastCorporateBalanceDate", 0), newRegularClient.getOrDefault("lastCorporateBalanceDate", 0), "day")) {
     return true;
   }
   return false;
 }
