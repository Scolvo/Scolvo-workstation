import {
  /common/CsvExtension,
  /backend/importClient/ImportMetadata,
  /backend/Broadcast
}

function importClientExposureData(corporateType, importClientExposureHeaders) {
  var exposuresDg = [];
  var filePath;
  if(corporateType == "OTP") {
    filePath = "/import/OTP_regular_client_exposure_data.txt";
  }
  else if(corporateType == "Voban") {
    filePath = "/import/Voban_regular_client_exposure_data.txt";
  }
  else {
    throw UknownCorporateTypeException;
  }
  var errorRecords = [];
  var parsedClientExposures;
  try {
    parsedClientExposures = readCsvFile(filePath, importClientExposureHeaders, getReadCsvFormat());
  }
  catch(com.scolvo.core.interpreter.exception.InterpreterException exception) {
    if(findException(exception, "FileNotFoundException") != null) {
      sendEmail(
        getEnv("EMAIL_USERNAME"),
        reportEmailAddress,
        "",
        "Client exposure import issues",
        "Client exposure import file was not found in import directory!",
        null);
    }
    throw ClientExposureImportException;
  }

  var importMetadataExposureDateOn = null;
  deleteAllClientExposures();

  parsedClientExposures.each(function(parsedClientExposure) {
    var rowImported = false;
    var companyId = parsedClientExposure.ClientID;
    if (companyId == null || companyId.isEmpty() || companyId.length() > 20) {
      warn("Skip exposure data, because it does not contain a valid COMPANY ID. " + parsedClientExposure.toString());
      clearParsedClientExposure(parsedClientExposure);
      parsedClientExposure.put("ClientID", "No valid client id");
      parsedClientExposure.put("Account", parsedClientExposure.getOrDefault("Account", ""));
      errorRecords.add(buildClientExposureImportErrorReport(parsedClientExposure));
    }
    else if(getCompanyByCompanyId(companyId) == null) {
      warn("Skip exposure data because no corresponding company exists " + parsedClientExposure.toString());
      clearParsedClientExposure(parsedClientExposure);
      parsedClientExposure.put("ClientID", "No corresponding company exists");
      parsedClientExposure.put("Account", parsedClientExposure.getOrDefault("Account", ""));
      errorRecords.add(buildClientExposureImportErrorReport(parsedClientExposure));
    }
    else if(parsedClientExposure.Account == null || parsedClientExposure.Account.isEmpty() || parsedClientExposure.Account.length() > 50) {
      warn("Skip exposure data because account data is invalid " + parsedClientExposure.toString());
      clearParsedClientExposure(parsedClientExposure);
      parsedClientExposure.put("ClientID", companyId);
      parsedClientExposure.put("Account", "No valid account or longer than 50 characters");
      errorRecords.add(buildClientExposureImportErrorReport(parsedClientExposure));
    }
    else {
      var clientExposureDao = buildClientExposureDao(parsedClientExposure, errorRecords);
      if(clientExposureDao != null) {
        clientExposureDao.put("id", uuid());
        clientExposureDao.put("changeType", "INSERT");
        exposuresDg.add(clientExposureDao.deepClone());

        clientExposureDao.put("createdBy", "importJob");
        clientExposureDao.put("createdAt", nowInMillis());
        insertExecution("exposure", clientExposureDao);
        rowImported = true;
      }
      else {
        warn("Exposure data contains error, skipping record: " + parsedClientExposure.toString());
      }
    }

    if (importMetadataExposureDateOn == null && rowImported) {
      importMetadataExposureDateOn = parsedClientExposure.Date_on;
    }
  });

  if (importMetadataExposureDateOn != null) {
    info("Save import metadata for exposure import ...");
    var dateOnConverted = parseStringToDate(importMetadataExposureDateOn, "dd.MM.yyyy.");
    saveImportMetadata("exposure", dateOnConverted.getTime());
  }

  publishBroadcast("exposure", exposuresDg);

  return errorRecords;
}

function clearParsedClientExposure(parsedClientExposure) {
  parsedClientExposure.put("Date_on", "");
  parsedClientExposure.put("ClientID", "");
  parsedClientExposure.put("Account", "");
  parsedClientExposure.put("Stage", "");
  parsedClientExposure.put("Product_Type", "");
  parsedClientExposure.put("Amount", "");
  parsedClientExposure.put("Currency", "");
  parsedClientExposure.put("Interest_Rate", "");
  parsedClientExposure.put("Due_Date", "");
}

function buildClientExposureImportErrorReport(parsedClientExposure) {
  return [parsedClientExposure.Date_on, parsedClientExposure.ClientID,
    parsedClientExposure.Account, parsedClientExposure.Stage,
    parsedClientExposure.Product_Type, parsedClientExposure.Amount,
    parsedClientExposure.Currency, parsedClientExposure.Interest_Rate,
    parsedClientExposure.Due_Date];
}

function buildClientExposureDao(parsedClientExposure, errorRecords) {
  var exposureContainsErrors = false;
  var clientExposureDao = {
    "companyRegularId": parsedClientExposure.ClientID,
    "account": parsedClientExposure.Account
  };
  var parsedClientExposureCopy = parsedClientExposure.deepClone();

  if(parsedClientExposure.Stage != null && !parsedClientExposure.Stage.isEmpty()) {
    if(parsedClientExposure.Stage.length() <= 10) {
      clientExposureDao.put("stage", parsedClientExposure.Stage);
      parsedClientExposure.put("Stage", "");
    }
    else {
      warn("Error in client exposure " + parsedClientExposure.getOrDefault("Account", "") + " field: Stage = " + parsedClientExposure.Stage);
      exposureContainsErrors = true;
      parsedClientExposure.put("Stage", "Stage is invalid or longer than 10 characters" + " (" + parsedClientExposureCopy.Stage + ")");
    }
  }
  if(parsedClientExposure.Product_Type != null && !parsedClientExposure.Product_Type.isEmpty()) {
    if(parsedClientExposure.Product_Type.length() <= 100) {
      clientExposureDao.put("productType", parsedClientExposure.Product_Type);
      parsedClientExposure.put("Product_Type", "");
    }
    else {
      warn("Error in client exposure" + parsedClientExposure.getOrDefault("Account", "") + " field: Product_Type = " + parsedClientExposure.Product_Type);
      exposureContainsErrors = true;
      parsedClientExposure.put("Product_Type", "Product type is invalid or longer than 100 characters" + " (" + parsedClientExposureCopy.Product_Type + ")");
    }
  }
  if(parsedClientExposure.Currency != null && !parsedClientExposure.Currency.isEmpty()) {
    if(parsedClientExposure.Currency.length() <= 3) {
      clientExposureDao.put("currency", parsedClientExposure.Currency);
      parsedClientExposure.put("Currency", "");
    }
    else {
      warn("Error in client exposure" + parsedClientExposure.getOrDefault("Account", "") + " field: Currency = " + parsedClientExposure.Currency);
      exposureContainsErrors = true;
      parsedClientExposure.put("Currency", "Currency is invalid or longer than 3 characters" + " (" + parsedClientExposureCopy.Currency + ")");
    }
  }
  if(parsedClientExposure.Due_Date != null && !parsedClientExposure.Due_Date.isEmpty()) {
    try {
      clientExposureDao.put("dueDate", parseStringToDate(parsedClientExposure.Due_Date, "dd.MM.yyyy.").getTime());
      parsedClientExposure.put("Due_Date", "");
    } catch (com.scolvo.core.interpreter.exception.InterpreterException e) {
      warn("Error in client exposure" + parsedClientExposure.getOrDefault("Account", "") + " field: Due_Date = " + parsedClientExposure.Due_Date);
      exposureContainsErrors = true;
      parsedClientExposure.put("Due_Date", "Due date is not a valid date format" + " (" + parsedClientExposureCopy.Due_Date + ")");
    }
  }
  if(parsedClientExposure.Amount != null && !parsedClientExposure.Amount.isEmpty()) {
    if(isNumber(parsedClientExposure.getOrDefault("Amount", ""))) {
      clientExposureDao.put("amount", parseNumber(parsedClientExposure.Amount, ",", " "));
      parsedClientExposure.put("Amount", "");
    }
    else {
      warn("Error in client exposure" + parsedClientExposure.getOrDefault("Account", "") + " field: Amount = " + parsedClientExposure.Amount);
      exposureContainsErrors = true;
      parsedClientExposure.put("Amount", "Amount is not a number" + " (" + parsedClientExposureCopy.Amount + ")");
    }
  }

  if(parsedClientExposure.Interest_Rate != null && !parsedClientExposure.Interest_Rate.isEmpty()) {
    if(isNumber(parsedClientExposure.getOrDefault("Interest_Rate", ""))) {
      clientExposureDao.put("interestRate", parseNumber(parsedClientExposure.Interest_Rate, ",", " "));
      parsedClientExposure.put("Interest_Rate", "");
    }
    else {
      warn("Error in client exposure" + parsedClientExposure.getOrDefault("Account", "") + " field: Interest_Rate = " + parsedClientExposure.Interest_Rate);
      exposureContainsErrors = true;
      parsedClientExposure.put("Interest_Rate", "Interest rate is not a number" + " (" + parsedClientExposureCopy.Interest_Rate + ")");
    }
  }

  if(exposureContainsErrors) {
    parsedClientExposure.put("Date_on", "");
    errorRecords.add(buildClientExposureImportErrorReport(parsedClientExposure));
    return null;
  }

  return clientExposureDao;
}

function isExposureUpdateNecessary(originalExposure, newExposure) {
  if(newExposure.companyRegularId != originalExposure.companyRegularId) {
    info("isExposureUpdateNecessary companyRegularId " + originalExposure.toString() + " / " + newExposure.toString());
    return true;
  }
  if(newExposure.stage != originalExposure.stage) {
    info("isExposureUpdateNecessary stage " + originalExposure.toString() + " / " + newExposure.toString());
    return true;
  }
  if(newExposure.productType != originalExposure.productType) {
    info("isExposureUpdateNecessary productType " + originalExposure.toString() + " / " + newExposure.toString());
    return true;
  }
  if(newExposure.amount != originalExposure.amount) {
    info("isExposureUpdateNecessary amount " + originalExposure.toString() + " / " + newExposure.toString());
    return true;
  }
  if(newExposure.currency != originalExposure.currency) {
    info("isExposureUpdateNecessary currency " + originalExposure.toString() + " / " + newExposure.toString());
    return true;
  }
  if(newExposure.interestRate != originalExposure.interestRate) {
    info("isExposureUpdateNecessary interestRate " + originalExposure.toString() + " / " + newExposure.toString());
    return true;
  }
  if(!dateSame(newExposure.getOrDefault("dueDate", 0), originalExposure.getOrDefault("dueDate", 0), "day")) {
    info("isExposureUpdateNecessary dueDate " + originalExposure.toString() + " / " + newExposure.toString());
    return true;
  }
  return false;
}
