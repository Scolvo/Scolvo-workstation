import {
  /backend/repository/HistoryRepository,
  /backend/repository/CallLogRepository,
  /backend/repository/ContactRepository,
  /backend/repository/MeetingMemoRepository,
  /backend/repository/OfferRepository,
  /backend/repository/AttachmentRepository,
  /backend/importClient/ImportMetadata,
  /common/CsvExtension,
  /backend/Broadcast
}

function importProspectClientsData(relativePath, userId) {
  info("Importing prospect client data ....");
  var filePath = documentDownload(relativePath, uuid());
  var importCompaniesHeaders = ["Company_name", "Company_ID", "Company_size",
    "Business_activity_ID", "Business_activity", "Address", "City", "Owner",
    "Representator", "Phone", "RM", "Regional_center", "NBS", "Financial_rating",
    "Group_of_related_parties", "Acc_in_Voban", "Blockades", "Total_income",
    "Net_profit", "Debt_ebitda", "Exporter"
  ];

  var importMetadataProspectDateOn = null;
  var errorRecords = [];
  var parsedCompanies = readCsvFile(filePath, importCompaniesHeaders, getReadCsvFormat());
  //var companiesToDelete = getCompaniesByType("prospect");
  //var prospectCompaniesToDelete = getProspectCompanies();
  parsedCompanies.each(function(parsedCompany) {
    var rmCode = parsedCompany.RM;
    var companyId = parsedCompany.Company_ID;
    if (rmCode == null || rmCode.isEmpty() || rmCode.length() > 50) {
      warn("Skip client, because it does not contain a valid RM code: " + parsedCompany.toString());
      clearParsedProspectClient(parsedCompany);
      parsedCompany.put("RM", "RM code is empty or longer than 50 characters");
      errorRecords.add(buildProspectClientImportErrorReport(parsedCompany));
    } else if (companyId == null || companyId.isEmpty() || companyId.length() > 20) {
      warn("Skip client, because is does not contain valid COMPANY ID: " + parsedCompany.toString());
      clearParsedProspectClient(parsedCompany);
      parsedCompany.put("Company_ID", "Company id is empty or longer than 20 characters");
      errorRecords.add(buildProspectClientImportErrorReport(parsedCompany));
    }
    else {
      try {
        var rowImported = false;
        var rmUserDao = getUserByRMCode(rmCode);
        var originalCompany = getCompanyByCompanyId(companyId);
        var companyDao = buildProspectCompanyDao(parsedCompany, rmUserDao.id);
        var clientDg = {};
        var prospectClientDao = buildProspectClientDao(parsedCompany, errorRecords, companyDao == null);
        if (prospectClientDao != null && companyDao != null) {
          if (originalCompany == null) {
            companyDao.put("id", uuid());
            clientDg.put("company", companyDao.deepClone());
            clientDg.put("changeType", "INSERT");
            companyDao.put("changeType", "INSERT");

            companyDao.put("createdBy", "importJob");
            companyDao.put("createdAt", nowInMillis());
            insertExecution("company", companyDao);
            rowImported = true;
          } else if (isCompanyUpdateNecessary(originalCompany, companyDao)) {
            insertHistoryExecution("company", originalCompany);
            companyDao.put("id", originalCompany.id);
            clientDg.put("company", companyDao.deepClone());
            clientDg.put("changeType", "UPDATE");
            companyDao.put("changeType", "UPDATE");

            companyDao.put("updatedBy", "importJob");
            companyDao.put("updatedAt", nowInMillis());
            updateExecution("company", companyDao.id, companyDao);
            rowImported = true;
          } else {
            warn("Skip company, no new field values " + parsedCompany.toString());
          }
          var originalProspectClient = getProspectClientByClientId(companyId);
          if (originalProspectClient == null) {
            prospectClientDao.put("id", uuid());
            clientDg.put("companyProspect", prospectClientDao.deepClone());
            clientDg.put("changeType", "INSERT");
            prospectClientDao.put("changeType", "INSERT");

            prospectClientDao.put("createdBy", "importJob");
            prospectClientDao.put("createdAt", nowInMillis());
            insertExecution("companyProspect", prospectClientDao);
          } else if (isProspectClientUpdateNecessary(originalProspectClient, prospectClientDao)) {
            insertHistoryExecution("companyProspect", originalProspectClient);
            prospectClientDao.put("id", originalProspectClient.id);
            clientDg.put("companyProspect", prospectClientDao.deepClone());
            clientDg.put("changeType", "UPDATE");
            prospectClientDao.put("changeType", "UPDATE");

            prospectClientDao.put("updatedBy", "importJob");
            prospectClientDao.put("updatedAt", nowInMillis());
            updateExecution("companyProspect", prospectClientDao.id, prospectClientDao);
          } else {
            warn("Skip regularCompany, no new field values " + parsedCompany.toString());
          }
          if(clientDg.containsKey("company") || clientDg.containsKey("companyProspect")) {
            publishBroadcast("prospectClient", [clientDg]);
          }
          if (importMetadataProspectDateOn == null && rowImported) {
            importMetadataProspectDateOn = nowInMillis();
          }
          /*
          companiesToDelete = companiesToDelete.filter(function(companyItem) {
            return companyItem.companyId != companyId;
          });
          prospectCompaniesToDelete = prospectCompaniesToDelete.filter(function(prospectCompanyItem) {
            return prospectCompanyItem.companyId != companyId;
          });
          */
        }
      } catch (UserNotFoundException e) {
        warn("Skip client, because no user is found for the referenced RM code. " + parsedCompany.toString());
        clearParsedProspectClient(parsedCompany);
        parsedCompany.put("RM", "No user was found for the referenced RM code (" + rmCode + ")");
        errorRecords.add(buildProspectClientImportErrorReport(parsedCompany));
      }
    }
  });

  if (importMetadataProspectDateOn != null) {
    info("Prospect client info has been saved, so saving import  Metadata ...");
    saveImportMetadata("prospect", importMetadataProspectDateOn);
  }
  /* DELETE companies which are not part of the import file - currently disabled
  deleteCompanies(companiesToDelete);
  deleteProspectClientsAndRelatedData(prospectCompaniesToDelete);

  companiesToDelete.each(function(companyToDelete) {
    companiesDg.add({
      "id": companyToDelete.id,
      "changeType": "DELETE"
    });
  });
  */

  var importDao = {
    "userId": requestData.userId,
  };

  if (!errorRecords.isEmpty()) {
    var reportName = "prospectClientImportErrors_" + dateToString(nowInMillis(), "yyyy-MM-dd") + ".csv";
    var awsRelativePath = "importProspectClientErrorLogs/" + nowInMillis() + "/" + reportName;
    var downloadUrl = uploadCsvFileToAws(reportName, awsRelativePath, importCompaniesHeaders, errorRecords);
    importDao.put("errors", true);
    importDao.put("reportUrl", downloadUrl);
  } else {
    importDao.put("errors", false);
  }
  publishBroadcast("prospectClientImport", [importDao]);
}

function deleteProspectClientsAndRelatedData(prospectClientDaos) {
  var companyProspectsDg = [];
  prospectClientDaos.each(function (prospectClientDao) {
    companyProspectsDg.add({
      "id": prospectClientDao.id,
      "changeType": "DELETE"
    });
    deleteProspectCompany(prospectClientDao);
    deleteAttachments(prospectClientDao.companyId);
    deleteProspectMeetingMemos(prospectClientDao.companyId);
    deleteContacts(prospectClientDao.companyId);
    deleteCallLogs(prospectClientDao.companyId);
    deleteOffers(prospectClientDao.companyId);
  });
  publishBroadcast("companyProspect", companyProspectsDg);
}

function buildProspectClientDao(parsedCompany, errorRecords, companyContainsError) {
  var clientContainsErrors = false;
  var prospectClientDao = {
    "companyId": parsedCompany.Company_ID
  };
  var parsedCompanyCopy = parsedCompany.deepClone();

  if (parsedCompany.Blockades != null && !parsedCompany.Blockades.isEmpty()) {
    if(parsedCompany.Blockades != "0" && parsedCompany.Blockades != "1") {
      warn("Error in client " + parsedCompany.getOrDefault("Company_ID", "") + " field: Blockades = " + parsedCompany.Blockades);
      clientContainsErrors = true;
      parsedCompany.put("Blockades", "Blockades must be 0 or 1" + " (" + parsedCompanyCopy.Blockades + ")");
    }
    else {
      parsedCompany.put("Blockades", "");
    }
  }

  if (parsedCompany.Owner != null && !parsedCompany.Owner.isEmpty()) {
    if(parsedCompany.Owner.length() <= 50) {
      prospectClientDao.put("ownerName", parsedCompany.Owner);
      parsedCompany.put("Owner", "");
    }
    else {
      warn("Error in client " + parsedCompany.getOrDefault("Company_ID", "") + " field: Owner = " + parsedCompany.Owner);
      clientContainsErrors = true;
      parsedCompany.put("Owner", "Owner is invalid or longer than 50 characters" + " (" + parsedCompanyCopy.Owner + ")");
    }
  }
  if (parsedCompany.NBS != null && !parsedCompany.NBS.isEmpty()) {
    if(parsedCompany.NBS.length() <= 10) {
      prospectClientDao.put("nbsClassification", parsedCompany.NBS);
      parsedCompany.put("NBS", "");
    }
    else {
      warn("Error in client " + parsedCompany.getOrDefault("Company_ID", "") + " field: NBS = " + parsedCompany.NBS);
      clientContainsErrors = true;
      parsedCompany.put("NBS", "Nbs is invalid or longer than 10 characters" + " (" + parsedCompanyCopy.NBS + ")");
    }
  }
  if (parsedCompany.Financial_rating != null && !parsedCompany.Financial_rating.isEmpty()) {
    if(parsedCompany.Financial_rating.length() <= 10) {
      prospectClientDao.put("financialRating", parsedCompany.Financial_rating);
      parsedCompany.put("Financial_rating", "");
    }
    else {
      warn("Error in client " + parsedCompany.getOrDefault("Company_ID", "") + " field: Financial_rating = " + parsedCompany.Financial_rating);
      clientContainsErrors = true;
      parsedCompany.put("Financial_rating", "Company financial rating is invalid or longer than 10 characters" + " (" + parsedCompanyCopy.Financial_rating + ")");
    }
  }
  if (parsedCompany.Group_of_related_parties != null && !parsedCompany.Group_of_related_parties.isEmpty()) {
    if(parsedCompany.Group_of_related_parties.length() <= 50) {
      prospectClientDao.put("groupOfRelatedParties", parsedCompany.Group_of_related_parties);
      parsedCompany.put("Group_of_related_parties", "");
    }
    else {
      warn("Error in client " + parsedCompany.getOrDefault("Company_ID", "") + " field: Group_of_related_parties = " + parsedCompany.Group_of_related_parties);
      clientContainsErrors = true;
      parsedCompany.put("Group_of_related_parties", "Group of related parties is invalid or longer than 50 characters" + " (" + parsedCompanyCopy.Group_of_related_parties + ")");
    }
  }
  if (parsedCompany.Acc_in_Voban != null && !parsedCompany.Acc_in_Voban.isEmpty()) {
    if(parsedCompany.Acc_in_Voban == "0" || parsedCompany.Acc_in_Voban == "1") {
      prospectClientDao.put("accountInVoban", parseNumber(parsedCompany.Acc_in_Voban) == 1);
      parsedCompany.put("Acc_in_Voban", "");
    }
    else {
      warn("Error in client " + parsedCompany.getOrDefault("Company_ID", "") + " field: Acc_in_Voban = " + parsedCompany.Acc_in_Voban);
      clientContainsErrors = true;
      parsedCompany.put("Acc_in_Voban", "Account in Voban must be 0 or 1" + " (" + parsedCompanyCopy.Acc_in_Voban + ")");
    }
  }
  if (parsedCompany.Total_income != null && !parsedCompany.Total_income.isEmpty()) {
    if(isNumber(parsedCompany.getOrDefault("Total_income", ""))) {
      prospectClientDao.put("totalIncome", parseNumber(parsedCompany.Total_income, ",", " "));
      parsedCompany.put("Total_income", "");
    }
    else {
      warn("Error in client " + parsedCompany.getOrDefault("Company_ID", "") + " field: Total_income = " + parsedCompany.Total_income);
      clientContainsErrors = true;
      parsedCompany.put("Total_income", "Total income is not a number" + " (" + parsedCompanyCopy.Total_income + ")");
    }
  }
  if (parsedCompany.Net_profit != null && !parsedCompany.Net_profit.isEmpty()) {
    if(isNumber(parsedCompany.getOrDefault("Net_profit", ""))) {
      prospectClientDao.put("netProfit", parseNumber(parsedCompany.Net_profit, ",", " "));
      parsedCompany.put("Net_profit", "");
    }
    else {
      warn("Error in client " + parsedCompany.getOrDefault("Company_ID", "") + " field: Net_profit = " + parsedCompany.Net_profit);
      clientContainsErrors = true;
      parsedCompany.put("Net_profit", "Net profit is not a number" + " (" + parsedCompanyCopy.Net_profit + ")");
    }
  }
  if (parsedCompany.Debt_ebitda != null && !parsedCompany.Debt_ebitda.isEmpty()) {
    if(isNumber(parsedCompany.getOrDefault("Debt_ebitda", ""))) {
      prospectClientDao.put("debtEbitda", parseNumber(parsedCompany.Debt_ebitda, ",", " "));
      parsedCompany.put("Debt_ebitda", "");
    }
    else {
      warn("Error in client " + parsedCompany.getOrDefault("Company_ID", "") + " field: Debt_ebitda = " + parsedCompany.Debt_ebitda);
      clientContainsErrors = true;
      parsedCompany.put("Debt_ebitda", "Debt ebitda is not a number" + " (" + parsedCompanyCopy.Debt_ebitda + ")");
    }
  }
  if (parsedCompany.Exporter != null && !parsedCompany.Exporter.isEmpty()) {
    if(parsedCompany.Exporter == "0" || parsedCompany.Exporter == "1") {
      prospectClientDao.put("exporter", parseNumber(parsedCompany.Exporter) == 1);
      parsedCompany.put("Exporter", "");
    }
    else {
      warn("Error in client " + parsedCompany.getOrDefault("Company_ID", "") + " field: Exporter = " + parsedCompany.Exporter);
      clientContainsErrors = true;
      parsedCompany.put("Exporter", "Exporter must be 0 or 1" + " (" + parsedCompanyCopy.Exporter + ")");
    }
  }
  if (clientContainsErrors || companyContainsError) {
    warn("Skipping prospect client " + parsedCompany.Company_ID + " because data contains errors");
    parsedCompany.put("Regional_center", "");
    parsedCompany.put("RM", "");
    errorRecords.add(buildProspectClientImportErrorReport(parsedCompany));
    return null;
  }
  return prospectClientDao;
}

function isProspectClientUpdateNecessary(originalProspectClient, newProspectClient) {
  if (originalProspectClient.mb != newProspectClient.mb) {
    return true;
  }
  if (originalProspectClient.ownerName != newProspectClient.ownerName) {
    return true;
  }
  if (originalProspectClient.nbsClassification != newProspectClient.nbsClassification) {
    return true;
  }
  if (originalProspectClient.financialRating != newProspectClient.financialRating) {
    return true;
  }
  if (originalProspectClient.groupOfRelatedParties != newProspectClient.groupOfRelatedParties) {
    return true;
  }
  if (originalProspectClient.accountInVoban != newProspectClient.accountInVoban) {
    return true;
  }
  if (originalProspectClient.totalIncome != newProspectClient.totalIncome) {
    return true;
  }
  if (originalProspectClient.netProfit != newProspectClient.netProfit) {
    return true;
  }
  if (originalProspectClient.debtEbitda != newProspectClient.debtEbitda) {
    return true;
  }
  return false;
}
