import {
  /backend/importClient/RegularClientImport,
  /backend/repository/UserRepository,
  /backend/repository/CompanyRepository
}

function clearParsedRegularClient(parsedCompany) {
  parsedCompany.put("Date_on", "");
  parsedCompany.put("Company_Name", "");
  parsedCompany.put("City", "");
  parsedCompany.put("MB", "");
  parsedCompany.put("Company_Size", "");
  parsedCompany.put("Established", "");
  parsedCompany.put("Business_activity", "");
  parsedCompany.put("Address", "");
  parsedCompany.put("Telephone", "");
  parsedCompany.put("Email", "");
  parsedCompany.put("Contact_person", "");
  parsedCompany.put("Business_Unit", "");
  parsedCompany.put("Branch", "");
  parsedCompany.put("Relationship_Manager", "");
  parsedCompany.put("Total_exposure", "");
  parsedCompany.put("Internal_rating", "");
  parsedCompany.put("Overdue", "");
  parsedCompany.put("Days_in_delay", "");
  parsedCompany.put("Turnover_RSD_Yearly", "");
  parsedCompany.put("Turnover_FX_Yearly", "");
  parsedCompany.put("Income_from_payment", "");
  parsedCompany.put("Number_of_employees_on_payroll", "");
  parsedCompany.put("Tariff_for_payment", "");
  parsedCompany.put("Blockade", "");
  parsedCompany.put("Date_of_last_corporate_balance", "");
  parsedCompany.put("Revenues", "");
  parsedCompany.put("Net_income", "");
  parsedCompany.put("Leverage_ratio", "");
  parsedCompany.put("Liquidity_ratio", "");
  parsedCompany.put("Equity_ratio", "");
  parsedCompany.put("E_bank", "");
  parsedCompany.put("Business_card", "");
  parsedCompany.put("POS_terminals", "");
}

function buildRegularClientImportErrorReport(parsedCompany) {
  return [parsedCompany.Date_on, parsedCompany.ClientID,
    parsedCompany.Company_Name, parsedCompany.City, parsedCompany.MB,
    parsedCompany.Company_Size, parsedCompany.Established, parsedCompany.Business_activity,
    parsedCompany.Address, parsedCompany.Telephone,
    parsedCompany.Email, parsedCompany.Contact_person,
    parsedCompany.Business_Unit, parsedCompany.Branch,
    parsedCompany.Relationship_Manager, parsedCompany.Total_exposure,
    parsedCompany.Internal_rating, parsedCompany.Overdue,
    parsedCompany.Days_in_delay, parsedCompany.Turnover_RSD_Yearly,
    parsedCompany.Turnover_FX_Yearly, parsedCompany.Income_from_payment,
    parsedCompany.Number_of_employees_on_payroll, parsedCompany.Tariff_for_payment,
    parsedCompany.Blockade, parsedCompany.Date_of_last_corporate_balance,
    parsedCompany.Revenues, parsedCompany.Net_income,
    parsedCompany.Leverage_ratio, parsedCompany.Liquidity_ratio,
    parsedCompany.Equity_ratio, parsedCompany.E_bank,
    parsedCompany.Business_card, parsedCompany.POS_terminals
  ];
}

function clearParsedProspectClient(parsedCompany) {
  parsedCompany.put("Company_name", "");
  parsedCompany.put("Company_size", "");
  parsedCompany.put("Business_activity_ID", "");
  parsedCompany.put("Business_activity", "");
  parsedCompany.put("Address", "");
  parsedCompany.put("City", "");
  parsedCompany.put("Owner", "");
  parsedCompany.put("Representator", "");
  parsedCompany.put("Phone", "");
  parsedCompany.put("RM", "");
  parsedCompany.put("Regional_center", "");
  parsedCompany.put("NBS", "");
  parsedCompany.put("Financial_rating", "");
  parsedCompany.put("Group_of_related_parties", "");
  parsedCompany.put("Acc_in_Voban", "");
  parsedCompany.put("Blockades", "");
  parsedCompany.put("Total_income", "");
  parsedCompany.put("Net_profit", "");
  parsedCompany.put("Debt_ebitda", "");
  parsedCompany.put("Exporter", "");
}

function buildProspectClientImportErrorReport(parsedCompany) {
  return [parsedCompany.Company_name, parsedCompany.Company_ID,
    parsedCompany.Company_size, parsedCompany.Business_activity_ID, parsedCompany.Business_activity,
    parsedCompany.Address, parsedCompany.City, parsedCompany.Owner,
    parsedCompany.Representator, parsedCompany.Phone,
    parsedCompany.RM, parsedCompany.Regional_center,
    parsedCompany.NBS, parsedCompany.Financial_rating,
    parsedCompany.Group_of_related_parties, parsedCompany.Acc_in_Voban,
    parsedCompany.Blockades, parsedCompany.Total_income,
    parsedCompany.Net_profit, parsedCompany.Debt_ebitda,
    parsedCompany.Exporter
  ];
}

function buildRegularCompanyDao(companyData, userId) {
  var companyContainsError = false;
  var companyDao = {
    "userId": userId,
    "companyType": "regular",
    "companyId": companyData.ClientID
  };
  var companyDataCopy = companyData.deepClone();

  if(companyData.Company_Name != null && !companyData.Company_Name.isEmpty()) {
    if(companyData.Company_Name.length() <= 150) {
      companyDao.put("name", companyData.Company_Name);
      companyData.put("Company_Name", "");
    }
    else {
      warn("Error in client " + companyData.getOrDefault("ClientID", "") + " field: Company_Name = " + companyData.Company_Name);
      companyContainsError = true;
      companyData.put("Company_Name", "Company name is invalid or longer than 150 characters" + " (" + companyDataCopy.Company_Name + ")");
    }
  }
  if(companyData.Company_Size != null && !companyData.Company_Size.isEmpty()) {
    if(companyData.Company_Size.length() <= 50) {
      companyDao.put("companySize", companyData.Company_Size);
      companyData.put("Company_Size", "");
    }
    else {
      warn("Error in client " + companyData.getOrDefault("ClientID", "") + " field: Company_Size = " + companyData.Company_Size);
      companyContainsError = true;
      companyData.put("Company_Size", "Company size is invalid or longer than 50 characters" + " (" + companyDataCopy.Company_Size + ")");
    }
  }
  if(companyData.Address != null && !companyData.Address.isEmpty()) {
    if(companyData.Address.length() <= 50) {
      companyDao.put("address", companyData.Address);
      companyData.put("Address", "");
    }
    else {
      warn("Error in client " + companyData.getOrDefault("ClientID", "") + " field: Address = " + companyData.Address);
      companyContainsError = true;
      companyData.put("Address", "Address is invalid or longer than 50 characters" + " (" + companyDataCopy.Address + ")");
    }
  }
  if(companyData.City != null && !companyData.City.isEmpty()) {
    if(companyData.City.length() <= 50) {
      companyDao.put("city", companyData.City);
      companyData.put("City", "");
    }
    else {
      warn("Error in client " + companyData.getOrDefault("ClientID", "") + " field: City = " + companyData.City);
      companyContainsError = true;
      companyData.put("City", "City is invalid or longer than 50 characters" + " (" + companyDataCopy.City + ")");
    }
  }
  if(companyData.Telephone != null && !companyData.Telephone.isEmpty()) {
    if(companyData.Telephone.length() <= 20) {
      companyDao.put("phone", companyData.Telephone);
      companyData.put("Telephone", "");
    }
    else {
      warn("Error in client " + companyData.getOrDefault("ClientID", "") + " field: Telephone = " + companyData.Telephone);
      companyContainsError = true;
      companyData.put("Telephone", "Telephone is invalid or longer than 20 characters" + " (" + companyDataCopy.Telephone + ")");
    }
  }
  if(isNumber(companyData.getOrDefault("Blockade", "")) && (companyData.Blockade == "0" || companyData.Blockade == "1")) {
    companyDao.put("blockade", parseNumber(companyData.Blockade) == 1);
  }
  if(companyData.Contact_person != null && !companyData.Contact_person.isEmpty()) {
    if(companyData.Contact_person.length() <= 50) {
      companyDao.put("contactPerson", companyData.Contact_person);
      companyData.put("Contact_person", "");
    }
    else {
      warn("Error in client " + companyData.getOrDefault("ClientID", "") + " field: Contact_person = " + companyData.Contact_person);
      companyContainsError = true;
      companyData.put("Contact_person", "Contact person is invalid or longer than 50 characters" + " (" + companyDataCopy.Contact_person + ")");
    }
  }
  if(companyData.Business_activity != null && !companyData.Business_activity.isEmpty()) {
    if(companyData.Business_activity.length() <= 100) {
      companyDao.put("businessActivity", companyData.Business_activity);
      companyData.put("Business_activity", "");
    }
    else {
      warn("Error in client " + companyData.getOrDefault("ClientID", "") + " field: Business_activity = " + companyData.Business_activity);
      companyContainsError = true;
      companyData.put("Business_activity", "Business activity is invalid or longer than 100 characters" + " (" + companyDataCopy.Business_activity + ")");
    }
  }

  if(companyContainsError) {
    warn("(Regular) company " + companyData.ClientID + " contains errors");
    return null;
  }
  return companyDao;
}

function buildProspectCompanyDao(companyData, userId) {
  var companyContainsError = false;
  var companyDao = {
    "userId": userId,
    "companyType": "prospect",
    "companyId": companyData.Company_ID
  };

  if(companyData.Company_name != null && !companyData.Company_name.isEmpty()) {
    if(companyData.Company_name.length() <= 150) {
      companyDao.put("name", companyData.Company_name);
      companyData.put("Company_name", "");
    }
    else {
      warn("Error in client " + companyData.getOrDefault("Company_ID", "") + " field: Company_name = " + companyData.Company_name);
      companyContainsError = true;
      companyData.put("Company_name", "Company name is invalid or longer than 150 characters" + " (" + companyDataCopy.Company_name + ")");
    }
  }
  if(companyData.Company_size != null && !companyData.Company_size.isEmpty()) {
    if(companyData.Company_size.length() <= 50) {
      companyDao.put("companySize", companyData.Company_size);
      companyData.put("Company_size", "");
    }
    else {
      warn("Error in client " + companyData.getOrDefault("Company_ID", "") + " field: Company_size = " + companyData.Company_size);
      companyContainsError = true;
      companyData.put("Company_size", "Company size is invalid or longer than 50 characters" + " (" + companyDataCopy.Company_size + ")");
    }
  }
  if(companyData.Address != null && !companyData.Address.isEmpty()) {
    if(companyData.Address.length() <= 50) {
      companyDao.put("address", companyData.Address);
      companyData.put("Address", "");
    }
    else {
      warn("Error in client " + companyData.getOrDefault("Company_ID", "") + " field: Address = " + companyData.Address);
      companyContainsError = true;
      companyData.put("Address", "Address is invalid or longer than 50 characters" + " (" + companyDataCopy.Address + ")");
    }

  }
  if(companyData.City != null && !companyData.City.isEmpty()) {
    if(companyData.City.length() <= 50) {
      companyDao.put("city", companyData.City);
      companyData.put("City", "");
    }
    else {
      warn("Error in client " + companyData.getOrDefault("Company_ID", "") + " field: City = " + companyData.City);
      companyContainsError = true;
      companyData.put("City", "City is invalid or longer than 50 characters" + " (" + companyDataCopy.City + ")");
    }
  }
  if(companyData.Phone != null && !companyData.Phone.isEmpty()) {
    if(companyData.Phone.length() <= 20) {
      companyDao.put("phone", companyData.Phone);
      companyData.put("Phone", "");
    }
    else {
      warn("Error in client " + companyData.getOrDefault("Company_ID", "") + " field: Phone = " + companyData.Phone);
      companyContainsError = true;
      companyData.put("Phone", "Phone is invalid or longer than 20 characters" + " (" + companyDataCopy.Phone + ")");
    }
  }
  if(isNumber(companyData.getOrDefault("Blockades", "")) && (companyData.Blockades == "0" || companyData.Blockades == "1")) {
    companyDao.put("blockade", parseNumber(companyData.Blockades) == 1);
  }
  if(companyData.Representator != null && !companyData.Representator.isEmpty()) {
    if(companyData.Representator.length() <= 50) {
      companyDao.put("contactPerson", companyData.Representator);
      companyData.put("Representator", "");
    }
    else {
      warn("Error in client " + companyData.getOrDefault("Company_ID", "") + " field: Representator = " + companyData.Representator);
      companyContainsError = true;
      companyData.put("Representator", "Contact person is invalid or longer than 50 characters" + " (" + companyDataCopy.Representator + ")");
    }
  }
  if(companyData.Business_activity != null && !companyData.Business_activity.isEmpty()) {
    if(companyData.Business_activity.length() <= 100) {
      companyDao.put("businessActivity", companyData.Business_activity);
      companyData.put("Business_activity", "");
    }
    else {
      warn("Error in client " + companyData.getOrDefault("Company_ID", "") + " field: Business_activity = " + companyData.Business_activity);
      companyContainsError = true;
      companyData.put("Business_activity", "Business activity is invalid or longer than 100 characters" + " (" + companyDataCopy.Business_activity + ")");
    }
  }
  if(companyData.Business_activity_ID != null && !companyData.Business_activity_ID.isEmpty()) {
    if(companyData.Business_activity_ID.length() <= 20) {
      companyDao.put("businessActivityId", companyData.Business_activity_ID);
      companyData.put("Business_activity_ID", "");
    }
    else {
      warn("Error in client " + companyData.getOrDefault("Company_ID", "") + " field: Business_activity_ID = " + companyData.Business_activity_ID);
      companyContainsError = true;
      companyData.put("Business_activity_ID", "Business activity id is invalid or longer than 20 characters" + " (" + companyDataCopy.Business_activity_ID + ")");
    }
  }

  if(companyContainsError) {
    warn("(Prospect) company contains errors");
    return null;
  }
  return companyDao;
}

function isCompanyUpdateNecessary(originalCompany, newCompany) {
  if(originalCompany.userId != newCompany.userId) {
    return true;
  }
  if(originalCompany.name != newCompany.name) {
    return true;
  }
  if(originalCompany.companySize != newCompany.companySize) {
    return true;
  }
  if(originalCompany.address != newCompany.address) {
    return true;
  }
  if(originalCompany.city != newCompany.city) {
    return true;
  }
  if(originalCompany.phone != newCompany.phone) {
    return true;
  }
  if(originalCompany.blockade != newCompany.blockade) {
    return true;
  }
  if(originalCompany.contactPerson != newCompany.contactPerson) {
    return true;
  }
  if(originalCompany.businessActivity != newCompany.businessActivity) {
    return true;
  }
  return false;
}
