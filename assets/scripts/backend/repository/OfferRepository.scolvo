function getOffersByUserId(userId) {
  return select()
    .selectAs("offer.id", "id")
    .selectAs("offer.companyId", "companyId")
    .selectAs("offer.offerType", "offerType")
    .selectAs("offer.subject", "subject")
    .selectAs("offer.receiver", "receiver")
    .selectAs("offer.deliveryDeadline", "deliveryDeadline")
    .selectAs("offer.importantNotice", "importantNotice")
    .selectAs("offer.additionalConditionsNotes", "additionalConditionsNotes")
    .selectAs("offer.status", "status")
    .selectAs("offer.statusDate", "statusDate")
    .selectAs("offer.createdAt", "createdAt")
    .selectAs("offer.updatedAt", "updatedAt")
    .from("offer")
    .join("innerJoin", table("company"), and(custom("offer.companyId = company.companyId"), eq("company.userId", userId)))
    .execute();
}

function getOffersByBusinessCenterId(bcmId) {
  return select()
    .selectAs("offer.id", "id")
    .selectAs("offer.companyId", "companyId")
    .selectAs("offer.offerType", "offerType")
    .selectAs("offer.subject", "subject")
    .selectAs("offer.receiver", "receiver")
    .selectAs("offer.deliveryDeadline", "deliveryDeadline")
    .selectAs("offer.importantNotice", "importantNotice")
    .selectAs("offer.additionalConditionsNotes", "additionalConditionsNotes")
    .selectAs("offer.status", "status")
    .selectAs("offer.statusDate", "statusDate")
    .selectAs("offer.createdAt", "createdAt")
    .selectAs("offer.updatedAt", "updatedAt")
    .from("offer")
    .join("innerJoin", table("company"), custom("offer.companyId = company.companyId"))
    .join("innerJoin", table("user"), and(eq("user.businessCenterId", bcmId), eq("user.role", "relationshipManager"), custom("company.userId = user.id")))
    .execute();
}

function getRegularClientOffersByBusinessCenterId(businessCenterId) {
  return select()
    .selectAs("offer.id", "id")
    .selectAs("offer.companyId", "companyId")
    .selectAs("offer.offerType", "offerType")
    .selectAs("offer.subject", "subject")
    .selectAs("offer.receiver", "receiver")
    .selectAs("offer.deliveryDeadline", "deliveryDeadline")
    .selectAs("offer.importantNotice", "importantNotice")
    .selectAs("offer.additionalConditionsNotes", "additionalConditionsNotes")
    .selectAs("offer.status", "status")
    .selectAs("offer.statusDate", "statusDate")
    .selectAs("offer.createdAt", "createdAt")
    .selectAs("offer.updatedAt", "updatedAt")
    .from("offer")
    .join("innerJoin", table("company"), and(custom("offer.companyId = company.companyId"), eq("company.companyType", "regular")))
    .join("innerJoin", table("user"), and(eq("user.businessCenterId", businessCenterId), eq("user.role", "relationshipManager"), custom("company.userId = user.id")))
    .execute();
}

function getRegularClientOffers() {
  return select()
    .selectAs("offer.id", "id")
    .selectAs("offer.companyId", "companyId")
    .selectAs("offer.offerType", "offerType")
    .selectAs("offer.subject", "subject")
    .selectAs("offer.receiver", "receiver")
    .selectAs("offer.deliveryDeadline", "deliveryDeadline")
    .selectAs("offer.importantNotice", "importantNotice")
    .selectAs("offer.additionalConditionsNotes", "additionalConditionsNotes")
    .selectAs("offer.status", "status")
    .selectAs("offer.statusDate", "statusDate")
    .selectAs("offer.createdAt", "createdAt")
    .selectAs("offer.updatedAt", "updatedAt")
    .from("offer")
    .join("innerJoin", table("company"), and(custom("offer.companyId = company.companyId"), eq("company.companyType", "regular")))
    .execute();
}

function getRegularClientOffersByBusinessCenterIds(businessCenterIds) {
  var offers = [];
  businessCenterIds.each(function (businessCenterId) {
    offers.addAll(getRegularClientOffersByBusinessCenterId(businessCenterId));
  });
  return offers;
}

function getOfferLoansByUserId(userId) {
  return select()
    .selectAs("offerLoan.id", "id")
    .selectAs("offerLoan.offerId", "offerId")
    .selectAs("offerLoan.typeOfLoan", "typeOfLoan")
    .selectAs("offerLoan.amount", "amount")
    .selectAs("offerLoan.currency", "currency")
    .selectAs("offerLoan.purpose", "purpose")
    .selectAs("offerLoan.repaymentPeriod", "repaymentPeriod")
    .selectAs("offerLoan.availabilityPeriod", "availabilityPeriod")
    .selectAs("offerLoan.gracePeriod", "gracePeriod")
    .selectAs("offerLoan.withdrawalMethod", "withdrawalMethod")
    .selectAs("offerLoan.repaymentMethod", "repaymentMethod")
    .selectAs("offerLoan.interest", "interest")
    .selectAs("offerLoan.placementApprovalFee", "placementApprovalFee")
    .selectAs("offerLoan.feeForUndrawnFunds", "feeForUndrawnFunds")
    .selectAs("offerLoan.monitoringFee", "monitoringFee")
    .selectAs("offerLoan.collaterals", "collaterals")
    .from("offerLoan")
    .join("innerJoin", table("offer"), custom("offer.id = offerLoan.offerId"))
    .join("innerJoin", table("company"), and(custom("offer.companyId = company.companyId"), eq("company.userId", userId)))
    .execute();
}

function getOfferLoansByBusinessCenterId(bcmId) {
  return select()
    .selectAs("offerLoan.id", "id")
    .selectAs("offerLoan.offerId", "offerId")
    .selectAs("offerLoan.typeOfLoan", "typeOfLoan")
    .selectAs("offerLoan.amount", "amount")
    .selectAs("offerLoan.currency", "currency")
    .selectAs("offerLoan.purpose", "purpose")
    .selectAs("offerLoan.repaymentPeriod", "repaymentPeriod")
    .selectAs("offerLoan.availabilityPeriod", "availabilityPeriod")
    .selectAs("offerLoan.gracePeriod", "gracePeriod")
    .selectAs("offerLoan.withdrawalMethod", "withdrawalMethod")
    .selectAs("offerLoan.repaymentMethod", "repaymentMethod")
    .selectAs("offerLoan.interest", "interest")
    .selectAs("offerLoan.placementApprovalFee", "placementApprovalFee")
    .selectAs("offerLoan.feeForUndrawnFunds", "feeForUndrawnFunds")
    .selectAs("offerLoan.monitoringFee", "monitoringFee")
    .selectAs("offerLoan.collaterals", "collaterals")
    .from("offerLoan")
    .join("innerJoin", table("offer"), custom("offer.id = offerLoan.offerId"))
    .join("innerJoin", table("company"), custom("offer.companyId = company.companyId"))
    .join("innerJoin", table("user"), and(eq("user.businessCenterId", bcmId), eq("user.role", "relationshipManager"), custom("company.userId = user.id")))
    .execute();
}

function getRegularClientOfferLoansByBusinessCenterId(bcmId) {
  return select()
    .selectAs("offerLoan.id", "id")
    .selectAs("offerLoan.offerId", "offerId")
    .selectAs("offerLoan.typeOfLoan", "typeOfLoan")
    .selectAs("offerLoan.amount", "amount")
    .selectAs("offerLoan.currency", "currency")
    .selectAs("offerLoan.purpose", "purpose")
    .selectAs("offerLoan.repaymentPeriod", "repaymentPeriod")
    .selectAs("offerLoan.availabilityPeriod", "availabilityPeriod")
    .selectAs("offerLoan.gracePeriod", "gracePeriod")
    .selectAs("offerLoan.withdrawalMethod", "withdrawalMethod")
    .selectAs("offerLoan.repaymentMethod", "repaymentMethod")
    .selectAs("offerLoan.interest", "interest")
    .selectAs("offerLoan.placementApprovalFee", "placementApprovalFee")
    .selectAs("offerLoan.feeForUndrawnFunds", "feeForUndrawnFunds")
    .selectAs("offerLoan.monitoringFee", "monitoringFee")
    .selectAs("offerLoan.collaterals", "collaterals")
    .from("offerLoan")
    .join("innerJoin", table("offer"), custom("offer.id = offerLoan.offerId"))
    .join("innerJoin", table("company"), and(custom("offer.companyId = company.companyId"), eq("company.companyType", "regular")))
    .join("innerJoin", table("user"), and(eq("user.businessCenterId", bcmId), eq("user.role", "relationshipManager"), custom("company.userId = user.id")))
    .execute();
}

function getRegularClientOfferLoans() {
  return select()
    .selectAs("offerLoan.id", "id")
    .selectAs("offerLoan.offerId", "offerId")
    .selectAs("offerLoan.typeOfLoan", "typeOfLoan")
    .selectAs("offerLoan.amount", "amount")
    .selectAs("offerLoan.currency", "currency")
    .selectAs("offerLoan.purpose", "purpose")
    .selectAs("offerLoan.repaymentPeriod", "repaymentPeriod")
    .selectAs("offerLoan.availabilityPeriod", "availabilityPeriod")
    .selectAs("offerLoan.gracePeriod", "gracePeriod")
    .selectAs("offerLoan.withdrawalMethod", "withdrawalMethod")
    .selectAs("offerLoan.repaymentMethod", "repaymentMethod")
    .selectAs("offerLoan.interest", "interest")
    .selectAs("offerLoan.placementApprovalFee", "placementApprovalFee")
    .selectAs("offerLoan.feeForUndrawnFunds", "feeForUndrawnFunds")
    .selectAs("offerLoan.monitoringFee", "monitoringFee")
    .selectAs("offerLoan.collaterals", "collaterals")
    .from("offerLoan")
    .join("innerJoin", table("offer"), custom("offer.id = offerLoan.offerId"))
    .join("innerJoin", table("company"), and(custom("offer.companyId = company.companyId"), eq("company.companyType", "regular")))
    .execute();
}

function getRegularClientOfferLoansByBusinessCenterIds(businessCenterIds) {
  var offerLoans = [];
  businessCenterIds.each(function (businessCenterId) {
    offerLoans.addAll(getRegularClientOfferLoansByBusinessCenterId(businessCenterId));
  });
  return offerLoans;
}

function getOfferGuaranteesByUserId(userId) {
  return select()
    .selectAs("offerGuarantee.id", "id")
    .selectAs("offerGuarantee.offerId", "offerId")
    .selectAs("offerGuarantee.typeOfPlacement", "typeOfPlacement")
    .selectAs("offerGuarantee.purposeOfPlacement", "purposeOfPlacement")
    .selectAs("offerGuarantee.amount", "amount")
    .selectAs("offerGuarantee.currency", "currency")
    .selectAs("offerGuarantee.repaymentPeriod", "repaymentPeriod")
    .selectAs("offerGuarantee.availabilityPeriod", "availabilityPeriod")
    .selectAs("offerGuarantee.feesCommissions", "feesCommissions")
    .selectAs("offerGuarantee.interestRateInCaseOfDelay", "interestRateInCaseOfDelay")
    .selectAs("offerGuarantee.collaterals", "collaterals")
    .from("offerGuarantee")
    .join("innerJoin", table("offer"), custom("offer.id = offerGuarantee.offerId"))
    .join("innerJoin", table("company"), and(custom("offer.companyId = company.companyId"), eq("company.userId", userId)))
    .execute();
}

function getOfferGuaranteesByBusinessCenterId(bcmId) {
  return select()
    .selectAs("offerGuarantee.id", "id")
    .selectAs("offerGuarantee.offerId", "offerId")
    .selectAs("offerGuarantee.typeOfPlacement", "typeOfPlacement")
    .selectAs("offerGuarantee.purposeOfPlacement", "purposeOfPlacement")
    .selectAs("offerGuarantee.amount", "amount")
    .selectAs("offerGuarantee.currency", "currency")
    .selectAs("offerGuarantee.repaymentPeriod", "repaymentPeriod")
    .selectAs("offerGuarantee.availabilityPeriod", "availabilityPeriod")
    .selectAs("offerGuarantee.feesCommissions", "feesCommissions")
    .selectAs("offerGuarantee.interestRateInCaseOfDelay", "interestRateInCaseOfDelay")
    .selectAs("offerGuarantee.collaterals", "collaterals")
    .from("offerGuarantee")
    .join("innerJoin", table("offer"), custom("offer.id = offerGuarantee.offerId"))
    .join("innerJoin", table("company"), custom("offer.companyId = company.companyId"))
    .join("innerJoin", table("user"), and(eq("user.businessCenterId", bcmId), eq("user.role", "relationshipManager"), custom("company.userId = user.id")))
    .execute();
}

function getRegularClientOfferGuaranteesByBusinessCenterId(bcmId) {
  return select()
    .selectAs("offerGuarantee.id", "id")
    .selectAs("offerGuarantee.offerId", "offerId")
    .selectAs("offerGuarantee.typeOfPlacement", "typeOfPlacement")
    .selectAs("offerGuarantee.purposeOfPlacement", "purposeOfPlacement")
    .selectAs("offerGuarantee.amount", "amount")
    .selectAs("offerGuarantee.currency", "currency")
    .selectAs("offerGuarantee.repaymentPeriod", "repaymentPeriod")
    .selectAs("offerGuarantee.availabilityPeriod", "availabilityPeriod")
    .selectAs("offerGuarantee.feesCommissions", "feesCommissions")
    .selectAs("offerGuarantee.interestRateInCaseOfDelay", "interestRateInCaseOfDelay")
    .selectAs("offerGuarantee.collaterals", "collaterals")
    .from("offerGuarantee")
    .join("innerJoin", table("offer"), custom("offer.id = offerGuarantee.offerId"))
    .join("innerJoin", table("company"), and(custom("offer.companyId = company.companyId"), eq("company.companyType", "regular")))
    .join("innerJoin", table("user"), and(eq("user.businessCenterId", bcmId), eq("user.role", "relationshipManager"), custom("company.userId = user.id")))
    .execute();
}

function getRegularClientOfferGuarantees() {
  return select()
    .selectAs("offerGuarantee.id", "id")
    .selectAs("offerGuarantee.offerId", "offerId")
    .selectAs("offerGuarantee.typeOfPlacement", "typeOfPlacement")
    .selectAs("offerGuarantee.purposeOfPlacement", "purposeOfPlacement")
    .selectAs("offerGuarantee.amount", "amount")
    .selectAs("offerGuarantee.currency", "currency")
    .selectAs("offerGuarantee.repaymentPeriod", "repaymentPeriod")
    .selectAs("offerGuarantee.availabilityPeriod", "availabilityPeriod")
    .selectAs("offerGuarantee.feesCommissions", "feesCommissions")
    .selectAs("offerGuarantee.interestRateInCaseOfDelay", "interestRateInCaseOfDelay")
    .selectAs("offerGuarantee.collaterals", "collaterals")
    .from("offerGuarantee")
    .join("innerJoin", table("offer"), custom("offer.id = offerGuarantee.offerId"))
    .join("innerJoin", table("company"), and(custom("offer.companyId = company.companyId"), eq("company.companyType", "regular")))
    .execute();
}

function getRegularClientOfferGuaranteesByBusinessCenterIds(businessCenterIds) {
  var offerGuarantees = [];
  businessCenterIds.each(function (businessCenterId) {
    offerGuarantees.addAll(getRegularClientOfferGuaranteesByBusinessCenterId(businessCenterId));
  });
  return offerGuarantees;
}

function getOfferFrameLinesByUserId(userId) {
  return select()
    .selectAs("offerFrameLine.id", "id")
    .selectAs("offerFrameLine.offerId", "offerId")
    .selectAs("offerFrameLine.typeOfPlacements", "typeOfPlacements")
    .selectAs("offerFrameLine.amount", "amount")
    .selectAs("offerFrameLine.currency", "currency")
    .selectAs("offerFrameLine.useOfFunds", "useOfFunds")
    .selectAs("offerFrameLine.repaymentPeriod", "repaymentPeriod")
    .selectAs("offerFrameLine.prices", "prices")
    .selectAs("offerFrameLine.interestRate", "interestRate")
    .selectAs("offerFrameLine.paymentMethod", "paymentMethod")
    .selectAs("offerFrameLine.collaterals", "collaterals")
    .from("offerFrameLine")
    .join("innerJoin", table("offer"), custom("offer.id = offerFrameLine.offerId"))
    .join("innerJoin", table("company"), and(custom("offer.companyId = company.companyId"), eq("company.userId", userId)))
    .execute();
}

function getOfferFrameLinesByBusinessCenterId(bcmId) {
  return select()
    .selectAs("offerFrameLine.id", "id")
    .selectAs("offerFrameLine.offerId", "offerId")
    .selectAs("offerFrameLine.typeOfPlacements", "typeOfPlacements")
    .selectAs("offerFrameLine.amount", "amount")
    .selectAs("offerFrameLine.currency", "currency")
    .selectAs("offerFrameLine.useOfFunds", "useOfFunds")
    .selectAs("offerFrameLine.repaymentPeriod", "repaymentPeriod")
    .selectAs("offerFrameLine.prices", "prices")
    .selectAs("offerFrameLine.interestRate", "interestRate")
    .selectAs("offerFrameLine.paymentMethod", "paymentMethod")
    .selectAs("offerFrameLine.collaterals", "collaterals")
    .from("offerFrameLine")
    .join("innerJoin", table("offer"), custom("offer.id = offerFrameLine.offerId"))
    .join("innerJoin", table("company"), custom("offer.companyId = company.companyId"))
    .join("innerJoin", table("user"), and(eq("user.businessCenterId", bcmId), eq("user.role", "relationshipManager"), custom("company.userId = user.id")))
    .execute();
}

function getRegularClientOfferFrameLinesByBusinessCenterId(bcmId) {
  return select()
    .selectAs("offerFrameLine.id", "id")
    .selectAs("offerFrameLine.offerId", "offerId")
    .selectAs("offerFrameLine.typeOfPlacements", "typeOfPlacements")
    .selectAs("offerFrameLine.amount", "amount")
    .selectAs("offerFrameLine.currency", "currency")
    .selectAs("offerFrameLine.useOfFunds", "useOfFunds")
    .selectAs("offerFrameLine.repaymentPeriod", "repaymentPeriod")
    .selectAs("offerFrameLine.prices", "prices")
    .selectAs("offerFrameLine.interestRate", "interestRate")
    .selectAs("offerFrameLine.paymentMethod", "paymentMethod")
    .selectAs("offerFrameLine.collaterals", "collaterals")
    .from("offerFrameLine")
    .join("innerJoin", table("offer"), custom("offer.id = offerFrameLine.offerId"))
    .join("innerJoin", table("company"), and(custom("offer.companyId = company.companyId"), eq("company.companyType", "regular")))
    .join("innerJoin", table("user"), and(eq("user.businessCenterId", bcmId), eq("user.role", "relationshipManager"), custom("company.userId = user.id")))
    .execute();
}

function getRegularClientOfferFrameLines() {
  return select()
    .selectAs("offerFrameLine.id", "id")
    .selectAs("offerFrameLine.offerId", "offerId")
    .selectAs("offerFrameLine.typeOfPlacements", "typeOfPlacements")
    .selectAs("offerFrameLine.amount", "amount")
    .selectAs("offerFrameLine.currency", "currency")
    .selectAs("offerFrameLine.useOfFunds", "useOfFunds")
    .selectAs("offerFrameLine.repaymentPeriod", "repaymentPeriod")
    .selectAs("offerFrameLine.prices", "prices")
    .selectAs("offerFrameLine.interestRate", "interestRate")
    .selectAs("offerFrameLine.paymentMethod", "paymentMethod")
    .selectAs("offerFrameLine.collaterals", "collaterals")
    .from("offerFrameLine")
    .join("innerJoin", table("offer"), custom("offer.id = offerFrameLine.offerId"))
    .join("innerJoin", table("company"), and(custom("offer.companyId = company.companyId"), eq("company.companyType", "regular")))
    .execute();
}

function getRegularClientOfferFrameLinesByBusinessCenterIds(businessCenterIds) {
  var offerFrameLines = [];
  businessCenterIds.each(function (businessCenterId) {
    offerFrameLines.addAll(getRegularClientOfferFrameLinesByBusinessCenterId(businessCenterId));
  });
  return offerFrameLines;
}

function getOfferDepositesByUserId(userId) {
  return select()
    .selectAs("offerDeposit.id", "id")
    .selectAs("offerDeposit.offerId", "offerId")
    .selectAs("offerDeposit.termDepositAmount", "termDepositAmount")
    .selectAs("offerDeposit.currency", "currency")
    .selectAs("offerDeposit.termDepositPeriod", "termDepositPeriod")
    .selectAs("offerDeposit.amountOfNominalEffectiveInterestRate", "amountOfNominalEffectiveInterestRate")
    .selectAs("offerDeposit.methodOfInterestCalculationPayment", "methodOfInterestCalculationPayment")
    .selectAs("offerDeposit.interestRate", "interestRate")
    .selectAs("offerDeposit.depositSecurity", "depositSecurity")
    .selectAs("offerDeposit.offerValidityPeriod", "offerValidityPeriod")
    .from("offerDeposit")
    .join("innerJoin", table("offer"), custom("offer.id = offerDeposit.offerId"))
    .join("innerJoin", table("company"), and(custom("offer.companyId = company.companyId"), eq("company.userId", userId)))
    .execute();
}

function getOfferDepositesByBusinessCenterId(bcmId) {
  return select()
    .selectAs("offerDeposit.id", "id")
    .selectAs("offerDeposit.offerId", "offerId")
    .selectAs("offerDeposit.termDepositAmount", "termDepositAmount")
    .selectAs("offerDeposit.currency", "currency")
    .selectAs("offerDeposit.termDepositPeriod", "termDepositPeriod")
    .selectAs("offerDeposit.amountOfNominalEffectiveInterestRate", "amountOfNominalEffectiveInterestRate")
    .selectAs("offerDeposit.methodOfInterestCalculationPayment", "methodOfInterestCalculationPayment")
    .selectAs("offerDeposit.interestRate", "interestRate")
    .selectAs("offerDeposit.depositSecurity", "depositSecurity")
    .selectAs("offerDeposit.offerValidityPeriod", "offerValidityPeriod")
    .from("offerDeposit")
    .join("innerJoin", table("offer"), custom("offer.id = offerDeposit.offerId"))
    .join("innerJoin", table("company"), custom("offer.companyId = company.companyId"))
    .join("innerJoin", table("user"), and(eq("user.businessCenterId", bcmId), eq("user.role", "relationshipManager"), custom("company.userId = user.id")))
    .execute();
}

function getRegularClientOfferDepositesByBusinessCenterId(bcmId) {
  return select()
    .selectAs("offerDeposit.id", "id")
    .selectAs("offerDeposit.offerId", "offerId")
    .selectAs("offerDeposit.termDepositAmount", "termDepositAmount")
    .selectAs("offerDeposit.currency", "currency")
    .selectAs("offerDeposit.termDepositPeriod", "termDepositPeriod")
    .selectAs("offerDeposit.amountOfNominalEffectiveInterestRate", "amountOfNominalEffectiveInterestRate")
    .selectAs("offerDeposit.methodOfInterestCalculationPayment", "methodOfInterestCalculationPayment")
    .selectAs("offerDeposit.interestRate", "interestRate")
    .selectAs("offerDeposit.depositSecurity", "depositSecurity")
    .selectAs("offerDeposit.offerValidityPeriod", "offerValidityPeriod")
    .from("offerDeposit")
    .join("innerJoin", table("offer"), custom("offer.id = offerDeposit.offerId"))
    .join("innerJoin", table("company"), and(custom("offer.companyId = company.companyId"), eq("company.companyType", "regular")))
    .join("innerJoin", table("user"), and(eq("user.businessCenterId", bcmId), eq("user.role", "relationshipManager"), custom("company.userId = user.id")))
    .execute();
}

function getRegularClientOfferDeposites() {
  return select()
    .selectAs("offerDeposit.id", "id")
    .selectAs("offerDeposit.offerId", "offerId")
    .selectAs("offerDeposit.termDepositAmount", "termDepositAmount")
    .selectAs("offerDeposit.currency", "currency")
    .selectAs("offerDeposit.termDepositPeriod", "termDepositPeriod")
    .selectAs("offerDeposit.amountOfNominalEffectiveInterestRate", "amountOfNominalEffectiveInterestRate")
    .selectAs("offerDeposit.methodOfInterestCalculationPayment", "methodOfInterestCalculationPayment")
    .selectAs("offerDeposit.interestRate", "interestRate")
    .selectAs("offerDeposit.depositSecurity", "depositSecurity")
    .selectAs("offerDeposit.offerValidityPeriod", "offerValidityPeriod")
    .from("offerDeposit")
    .join("innerJoin", table("offer"), custom("offer.id = offerDeposit.offerId"))
    .join("innerJoin", table("company"), and(custom("offer.companyId = company.companyId"), eq("company.companyType", "regular")))
    .execute();
}

function getRegularClientOfferDepositesByBusinessCenterIds(businessCenterIds) {
  var offerDeposits = [];
  businessCenterIds.each(function (businessCenterId) {
    offerDeposits.addAll(getRegularClientOfferDepositesByBusinessCenterId(businessCenterId));
  });
  return offerDeposits;
}

function getOffersByCompanyId(companyId) {
  return select()
    .from("offer")
    .where(eq("companyId", companyId))
    .execute();
}

function getOfferLoansByOfferId(offerId) {
  return select()
    .from("offerLoan")
    .where(eq("offerId", offerId))
    .execute();
}

function getOfferDepositsByOfferId(offerId) {
  return select()
    .from("offerDeposit")
    .where(eq("offerId", offerId))
    .execute();
}

function getOfferFrameLinesByOfferId(offerId) {
  return select()
    .from("offerFrameLine")
    .where(eq("offerId", offerId))
    .execute();
}

function getOfferGuaranteesByOfferId(offerId) {
  return select()
    .from("offerGuarantee")
    .where(eq("offerId", offerId))
    .execute();
}

function deleteOffers(companyId) {
  var offersDg = [];
  getOffersByCompanyId(companyId).each(function (offerDao) {
    offersDg.add({
      "id": offerDao.id,
      "changeType": "DELETE"
    });
    deleteOfferLoans(offerDao.id);
    deleteOfferDeposits(offerDao.id);
    deleteOfferFrameLines(offerDao.id);
    deleteOfferGuarantees(offerDao.id);
    insertHistoryExecution("offer", offerDao);
    deleteExecution("offer", offerDao.id);
  });
  publishBroadcast("offer", offersDg);
}

function deleteOfferLoans(offerId) {
  var offerLoansDg = [];
  getOfferLoansByOfferId(offerId).each(function (offerLoanDao) {
    offerLoansDg.add({
      "id": offerLoanDao.id,
      "changeType": "DELETE"
    });
    insertHistoryExecution("offerLoan", offerLoanDao);
    deleteExecution("offerLoan", offerLoanDao.id);
  });
  publishBroadcast("offerLoan", offerLoansDg);
}

function deleteOfferDeposits(offerId) {
  var offerDepositsDg = [];
  getOfferDepositsByOfferId(offerId).each(function (offerDepositDao) {
    offerDepositsDg.add({
      "id": offerDepositDao.id,
      "changeType": "DELETE"
    });
    insertHistoryExecution("offerDeposit", offerDepositDao);
    deleteExecution("offerDeposit", offerDepositDao.id);
  });
  publishBroadcast("offerDeposit", offerDepositsDg);
}

function deleteOfferFrameLines(offerId) {
  var offerFrameLinesDg = [];
  getOfferFrameLinesByOfferId(offerId).each(function (offerFrameLineDao) {
    offerFrameLinesDg.add({
      "id": offerFrameLineDao.id,
      "changeType": "DELETE"
    });
    insertHistoryExecution("offerFrameLine", offerFrameLineDao);
    deleteExecution("offerFrameLine", offerFrameLineDao.id);
  });
  publishBroadcast("offerFrameLine", offerFrameLinesDg);
}

function deleteOfferGuarantees(offerId) {
  var offerGuaranteesDg = [];
  getOfferGuaranteesByOfferId(offerId).each(function (offerGuaranteeDao) {
    offerGuaranteesDg.add({
      "id": offerGuaranteeDao.id,
      "changeType": "DELETE"
    });
    insertHistoryExecution("offerGuarantee", offerGuaranteeDao);
    deleteExecution("offerGuarantee", offerGuaranteeDao.id);
  });
  publishBroadcast("offerGuarantee", offerGuaranteesDg);
}
