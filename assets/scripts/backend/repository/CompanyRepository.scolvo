import {
  /backend/repository/HistoryRepository
}

function getCompanyByCompanyId(companyId) {
  var companyDaos = select()
    .from("company")
    .where(eq("companyId", companyId))
    .execute();
  if (companyDaos.isEmpty()) {
    return null;
  }
  return companyDaos.get(0);
}

function getRegularClientByClientId(clientId) {
  var regularCompanyDaos = select()
    .from("companyRegular")
    .where(eq("companyId", clientId))
    .execute();
  if (regularCompanyDaos.isEmpty()) {
    return null;
  }
  return regularCompanyDaos.get(0);
}

function getProspectClientByClientId(clientId) {
  var prospectCompanyDaos = select()
    .from("companyProspect")
    .where(eq("companyId", clientId))
    .execute();
  if (prospectCompanyDaos.isEmpty()) {
    return null;
  }
  return prospectCompanyDaos.get(0);
}

function getClientExposureByAccount(exposureAccount) {
  var clientExposures = select()
    .from("exposure")
    .where(eq("account", exposureAccount))
    .execute();
  if(clientExposures.isEmpty()) {
    return null;
  }
  return clientExposures.get(0);
}

function getCompaniesByUserId(userId) {
  return select()
  .selectAs("id")
  .selectAs("name")
  .selectAs("userId")
  .selectAs("companyType")
  .selectAs("companyId")
  .selectAs("companySize")
  .selectAs("businessActivityId")
  .selectAs("businessActivity")
  .selectAs("address")
  .selectAs("city")
  .selectAs("contactPerson")
  .selectAs("phone")
  .selectAs("blockade")
  .from("company")
  .where(eq("userId", userId))
  .execute();
}

function getCompaniesByBusinessCenterId(businessCenterId) {
  return select()
  .selectAs("company.id","id")
  .selectAs("company.name", "name")
  .selectAs("company.userId", "userId")
  .selectAs("company.companyType", "companyType")
  .selectAs("company.companyId", "companyId")
  .selectAs("company.companySize", "companySize")
  .selectAs("company.businessActivityId", "businessActivityId")
  .selectAs("company.businessActivity", "businessActivity")
  .selectAs("company.address", "address")
  .selectAs("company.city", "city")
  .selectAs("company.contactPerson", "contactPerson")
  .selectAs("company.phone", "phone")
  .selectAs("company.blockade", "blockade")
  .from("company")
  .join("innerJoin", table("user"), and(custom("company.userId = user.id"), eq("user.businessCenterId", businessCenterId), eq("user.role", "relationshipManager")))
  .execute();
}

function getRegularTypeCompaniesByBusinessCenterId(businessCenterId) {
  return select()
  .selectAs("company.id","id")
  .selectAs("company.name", "name")
  .selectAs("company.userId", "userId")
  .selectAs("company.companyType", "companyType")
  .selectAs("company.companyId", "companyId")
  .selectAs("company.companySize", "companySize")
  .selectAs("company.businessActivityId", "businessActivityId")
  .selectAs("company.businessActivity", "businessActivity")
  .selectAs("company.address", "address")
  .selectAs("company.city", "city")
  .selectAs("company.contactPerson", "contactPerson")
  .selectAs("company.phone", "phone")
  .selectAs("company.blockade", "blockade")
  .from("company")
  .where(eq("company.companyType", "regular"))
  .join("innerJoin", table("user"), and(custom("company.userId = user.id"), eq("user.businessCenterId", businessCenterId), eq("user.role", "relationshipManager")))
  .execute();
}

function getRegularTypeCompanies() {
  return select()
  .selectAs("company.id","id")
  .selectAs("company.name", "name")
  .selectAs("company.userId", "userId")
  .selectAs("company.companyType", "companyType")
  .selectAs("company.companyId", "companyId")
  .selectAs("company.companySize", "companySize")
  .selectAs("company.businessActivityId", "businessActivityId")
  .selectAs("company.businessActivity", "businessActivity")
  .selectAs("company.address", "address")
  .selectAs("company.city", "city")
  .selectAs("company.contactPerson", "contactPerson")
  .selectAs("company.phone", "phone")
  .selectAs("company.blockade", "blockade")
  .from("company")
  .where(eq("company.companyType", "regular"))
  .execute();
}

function getRegularTypeCompaniesByBusinessCenterIds(businessCenterIds) {
  var companies = [];
  businessCenterIds.each(function (businessCenterId) {
    companies.addAll(getRegularTypeCompaniesByBusinessCenterId(businessCenterId));
  });
  return companies;
}

function getCompaniesByType(companyType) {
  return select().from("company").where(eq("companyType", companyType)).execute();
}

function getRegularCompanies() {
  return select().from("companyRegular").execute();
}

function getRegularCompaniesByUserId(userId) {
  return select()
  .selectAs("companyRegular.id", "id")
  .selectAs("companyRegular.companyId", "companyId")
  .selectAs("companyRegular.mb", "mb")
  .selectAs("companyRegular.established", "established")
  .selectAs("companyRegular.email", "email")
  .selectAs("companyRegular.branch", "branch")
  .selectAs("companyRegular.totalExposure", "totalExposure")
  .selectAs("companyRegular.internalRating", "internalRating")
  .selectAs("companyRegular.overdue", "overdue")
  .selectAs("companyRegular.daysInDelay", "daysInDelay")
  .selectAs("companyRegular.turnoverRsdYearly", "turnoverRsdYearly")
  .selectAs("companyRegular.turnoverFxYearly", "turnoverFxYearly")
  .selectAs("companyRegular.incomeFromPayment", "incomeFromPayment")
  .selectAs("companyRegular.employeesOnPayroll", "employeesOnPayroll")
  .selectAs("companyRegular.tariffForPayment", "tariffForPayment")
  .selectAs("companyRegular.lastCorporateBalanceDate", "lastCorporateBalanceDate")
  .selectAs("companyRegular.revenue", "revenue")
  .selectAs("companyRegular.netIncome", "netIncome")
  .selectAs("companyRegular.leverageRatio", "leverageRatio")
  .selectAs("companyRegular.liquidityRatio", "liquidityRatio")
  .selectAs("companyRegular.equityRatio", "equityRatio")
  .selectAs("companyRegular.eBank", "eBank")
  .selectAs("companyRegular.businessCard", "businessCard")
  .selectAs("companyRegular.posTerminal", "posTerminal")
  .from("companyRegular")
  .join("innerJoin", table("company"), and(custom("companyRegular.companyId = company.companyId"), eq("company.userId", userId)))
  .execute();
}

function getRegularCompaniesByBusinessCenterId(businessCenterId) {
  return select()
  .selectAs("companyRegular.id", "id")
  .selectAs("companyRegular.companyId", "companyId")
  .selectAs("companyRegular.mb", "mb")
  .selectAs("companyRegular.established", "established")
  .selectAs("companyRegular.email", "email")
  .selectAs("companyRegular.branch", "branch")
  .selectAs("companyRegular.totalExposure", "totalExposure")
  .selectAs("companyRegular.internalRating", "internalRating")
  .selectAs("companyRegular.overdue", "overdue")
  .selectAs("companyRegular.daysInDelay", "daysInDelay")
  .selectAs("companyRegular.turnoverRsdYearly", "turnoverRsdYearly")
  .selectAs("companyRegular.turnoverFxYearly", "turnoverFxYearly")
  .selectAs("companyRegular.incomeFromPayment", "incomeFromPayment")
  .selectAs("companyRegular.employeesOnPayroll", "employeesOnPayroll")
  .selectAs("companyRegular.tariffForPayment", "tariffForPayment")
  .selectAs("companyRegular.lastCorporateBalanceDate", "lastCorporateBalanceDate")
  .selectAs("companyRegular.revenue", "revenue")
  .selectAs("companyRegular.netIncome", "netIncome")
  .selectAs("companyRegular.leverageRatio", "leverageRatio")
  .selectAs("companyRegular.liquidityRatio", "liquidityRatio")
  .selectAs("companyRegular.equityRatio", "equityRatio")
  .selectAs("companyRegular.eBank", "eBank")
  .selectAs("companyRegular.businessCard", "businessCard")
  .selectAs("companyRegular.posTerminal", "posTerminal")
  .from("companyRegular")
  .join("innerJoin", table("company"), custom("companyRegular.companyId = company.companyId"))
  .join("innerJoin", table("user"), and(custom("company.userId = user.id"), eq("user.businessCenterId", businessCenterId), eq("user.role", "relationshipManager")))
  .execute();
}

function getRegularCompaniesForMobile() {
  return select()
  .selectAs("companyRegular.id", "id")
  .selectAs("companyRegular.companyId", "companyId")
  .selectAs("companyRegular.mb", "mb")
  .selectAs("companyRegular.established", "established")
  .selectAs("companyRegular.email", "email")
  .selectAs("companyRegular.branch", "branch")
  .selectAs("companyRegular.totalExposure", "totalExposure")
  .selectAs("companyRegular.internalRating", "internalRating")
  .selectAs("companyRegular.overdue", "overdue")
  .selectAs("companyRegular.daysInDelay", "daysInDelay")
  .selectAs("companyRegular.turnoverRsdYearly", "turnoverRsdYearly")
  .selectAs("companyRegular.turnoverFxYearly", "turnoverFxYearly")
  .selectAs("companyRegular.incomeFromPayment", "incomeFromPayment")
  .selectAs("companyRegular.employeesOnPayroll", "employeesOnPayroll")
  .selectAs("companyRegular.tariffForPayment", "tariffForPayment")
  .selectAs("companyRegular.lastCorporateBalanceDate", "lastCorporateBalanceDate")
  .selectAs("companyRegular.revenue", "revenue")
  .selectAs("companyRegular.netIncome", "netIncome")
  .selectAs("companyRegular.leverageRatio", "leverageRatio")
  .selectAs("companyRegular.liquidityRatio", "liquidityRatio")
  .selectAs("companyRegular.equityRatio", "equityRatio")
  .selectAs("companyRegular.eBank", "eBank")
  .selectAs("companyRegular.businessCard", "businessCard")
  .selectAs("companyRegular.posTerminal", "posTerminal")
  .from("companyRegular")
  .execute();
}

function getRegularCompaniesByBusinessCenterIds(businessCenterIds) {
  var regularClients = [];
  businessCenterIds.each(function (businessCenterId) {
    regularClients.addAll(getRegularCompaniesByBusinessCenterId(businessCenterId));
  });
  return regularClients;
}

function getProspectCompanies() {
  return select().from("companyProspect").execute();
}

function getProspectCompaniesByUserId(userId) {
  return select()
  .selectAs("companyProspect.id", "id")
  .selectAs("companyProspect.companyId", "companyId")
  .selectAs("companyProspect.ownerName", "ownerName")
  .selectAs("companyProspect.nbsClassification", "nbsClassification")
  .selectAs("companyProspect.financialRating", "financialRating")
  .selectAs("companyProspect.groupOfRelatedParties", "groupOfRelatedParties")
  .selectAs("companyProspect.accountInVoban", "accountInVoban")
  .selectAs("companyProspect.totalIncome", "totalIncome")
  .selectAs("companyProspect.netProfit", "netProfit")
  .selectAs("companyProspect.debtEbitda", "debtEbitda")
  .selectAs("companyProspect.exporter", "exporter")
  .from("companyProspect")
  .join("innerJoin", table("company"), and(custom("companyProspect.companyId = company.companyId"), eq("company.userId", userId)))
  .execute();
}

function getProspectCompaniesByBusinessCenterId(businessCenterId) {
  return select()
  .selectAs("companyProspect.id", "id")
  .selectAs("companyProspect.companyId", "companyId")
  .selectAs("companyProspect.ownerName", "ownerName")
  .selectAs("companyProspect.nbsClassification", "nbsClassification")
  .selectAs("companyProspect.financialRating", "financialRating")
  .selectAs("companyProspect.groupOfRelatedParties", "groupOfRelatedParties")
  .selectAs("companyProspect.accountInVoban", "accountInVoban")
  .selectAs("companyProspect.totalIncome", "totalIncome")
  .selectAs("companyProspect.netProfit", "netProfit")
  .selectAs("companyProspect.debtEbitda", "debtEbitda")
  .selectAs("companyProspect.exporter", "exporter")
  .from("companyProspect")
  .join("innerJoin", table("company"), custom("companyProspect.companyId = company.companyId"))
  .join("innerJoin", table("user"), and(custom("company.userId = user.id"), eq("user.businessCenterId", businessCenterId), eq("user.role", "relationshipManager")))
  .execute();
}

function getClientExposures() {
  return select().from("exposure").execute();
}

function getClientExposuresByUserId(userId) {
  return select()
  .selectAs("exposure.id", "id")
  .selectAs("exposure.companyRegularId", "companyRegularId")
  .selectAs("exposure.account", "account")
  .selectAs("exposure.stage", "stage")
  .selectAs("exposure.productType", "productType")
  .selectAs("exposure.amount", "amount")
  .selectAs("exposure.currency", "currency")
  .selectAs("exposure.interestRate", "interestRate")
  .selectAs("exposure.dueDate", "dueDate")
  .from("exposure")
  .join("innerJoin", table("company"), and(custom("exposure.companyRegularId = company.companyId"), eq("company.userId", userId)))
  .execute();
}

function getClientExposuresByBusinessCenterId(businessCenterId) {
  return select()
  .selectAs("exposure.id", "id")
  .selectAs("exposure.companyRegularId", "companyRegularId")
  .selectAs("exposure.account", "account")
  .selectAs("exposure.stage", "stage")
  .selectAs("exposure.productType", "productType")
  .selectAs("exposure.amount", "amount")
  .selectAs("exposure.currency", "currency")
  .selectAs("exposure.interestRate", "interestRate")
  .selectAs("exposure.dueDate", "dueDate")
  .from("exposure")
  .join("innerJoin", table("company"), custom("exposure.companyRegularId = company.companyId"))
  .join("innerJoin", table("user"), and(custom("company.userId = user.id"), eq("user.businessCenterId", businessCenterId), eq("user.role", "relationshipManager")))
  .execute();
}

function getClientExposuresForMobile() {
  return select()
  .selectAs("exposure.id", "id")
  .selectAs("exposure.companyRegularId", "companyRegularId")
  .selectAs("exposure.account", "account")
  .selectAs("exposure.stage", "stage")
  .selectAs("exposure.productType", "productType")
  .selectAs("exposure.amount", "amount")
  .selectAs("exposure.currency", "currency")
  .selectAs("exposure.interestRate", "interestRate")
  .selectAs("exposure.dueDate", "dueDate")
  .from("exposure")
  .execute();
}

function getClientExposuresByBusinessCenterIds(businessCenterIds) {
  var clientExposures = [];
  businessCenterIds.each(function (businessCenterId) {
    clientExposures.addAll(getClientExposuresByBusinessCenterId(businessCenterId));
  });
  return clientExposures;
}

function getCompanyByProspectCompanyId(companyProspectId) {
  var companyDaos = select()
  .selectAs("name")
  .selectAs("userId")
  .selectAs("contactPerson")
  .selectAs("phone")
  .from("company")
  .where(eq("companyId", companyProspectId))
  .execute();
  if(companyDaos.isEmpty()) {
    return null;
  }
  return companyDaos.get(0);
}

function deleteCompanies(companyDaos) {
  companyDaos.each(function (companyDao) {
    insertHistoryExecution("company", companyDao);
    deleteExecution("company", companyDao.id);
  });
}

function deleteRegularCompany(regularCompanyDao) {
  insertHistoryExecution("companyRegular", regularCompanyDao);
  deleteExecution("companyRegular", regularCompanyDao.id);
}

function deleteProspectCompany(prospectCompanyDao) {
  insertHistoryExecution("companyProspect", prospectCompanyDao);
  deleteExecution("companyProspect", prospectCompanyDao.id);
}

function deleteClientExposures(clientExposureDaos) {
  clientExposureDaos.each(function (clientExposureDao) {
    insertHistoryExecution("exposure", clientExposureDao);
    deleteExecution("exposure", clientExposureDao.id);
  });
}

function deleteAllClientExposures() {
  delete().from("exposure").execute();
}
