import {
  /mhub/user/CreateUser,
  /mhub/user/ModifyUser,
  /mhub/repository/UserRepository,
  /mhub/common/TeamCommon
}

function displayUsersPage(originId) {
  var users = createUserListData();
  var data = {
    "UsersPage": {
      "UsersList": users
    }
  };
  display(UsersPage, data, originId);
}

function createUserListData() {
  return getUsers().map(function (userDao) {
    return buildUserListRowFromDao(userDao);
  });
}

page UsersPage {
  layout: vertical;
  template: general;
  scolvoMenuVisible: true;
  settingsVisible: true;

  list UsersList {
    template: normal;
    itemTemplate: grid;
    span: 0;
    filterVisible: true;
    actions: [
      CreateUser
    ]
    columns: [
      name,
      team,
      email,
      role
    ]
  }
}

function onUsersPageLoaded(originId) {}

function onEnableUser(originId) {
  changeUserStatus("active", $IN.recordId, originId);
}

function onDisableUser(originId) {
  changeUserStatus("inactive", $IN.recordId, originId);
}

function onCreateUser(originId) {
  displayCreateUserPage(originId);
}

function onModifyUser(originId) {
  displayUserModifyPage(originId, $IN.recordId);
}

function changeUserStatus(newUserStatus, recordId, originId) {
  var userDao = getUserById(recordId);
  userDao.put("status", newUserStatus);
  userDao.put("changeType", "UPDATE");

  updateTypeDefinition("user", userDao.id, userDao);
  sendDataChange("user", [userDao.deepClone()]);

  fireEvent(createReplaceItemTargetEvent("UsersList", buildUserListRowFromDao(userDao)), originId);
}

function buildUserListRowFromDao(userDao) {
  var userData = {
    "id": userDao.id,
    "name": userDao.name,
    "team": resolveTeam(userDao.teamId),
    "role": resolveUserRole(userDao.role),
    "email": userDao.email
  };
  userData.put("actions", ["ModifyUser"]);
  if (userDao.status == "active") {
    userData.get("actions").add("DisableUser");
  } else {
    userData.get("actions").add("EnableUser");
  }
  return userData;
}

function resolveUserRole(userRole) {
  if (userRole == ROLE_ADMIN) {
    return DICTIONARY.role_admin;
  }
  else if(userRole == ROLE_WORKER) {
    return DICTIONARY.role_worker;
  }
  else {
    throw UnknownAuthorization;
  }
}
