import {
  /mhub/DataChange,
  /mhub/SessionUser,
  /mhub/user/CreateModifyUserCommon
}

var createUserPageName;
var createUserPageEmail;
var createUserPageRole;
var createUserPageTeam;
var createUserPageUsername;
var createUserPagePassword;
var createUserPageConfirmPassword;

function displayCreateUserPage(originId) {

  createUserPageName = null;
  createUserPageEmail = null;
  createUserPageTeam = null;
  createUserPageUsername = null;
  createUserPagePassword = null;
  createUserPageConfirmPassword = null;
  createUserPageRole = ROLE_WORKER;

  var events = [
    createValueChangeTargetEvent("RoleInput", getRoleOptions(createUserPageRole)),
    createValueChangeTargetEvent("TeamInput", getTeamOptions(null)),

    createValueChangeSourceEvent("NameInput", "CreateUserNameChanged"),
    createValueChangeSourceEvent("EmailInput", "CreateUserEmailChanged"),
    createValueChangeSourceEvent("RoleInput", "CreateUserRoleChanged"),
    createValueChangeSourceEvent("TeamInput", "CreateUserTeamChanged"),
    createValueChangeSourceEvent("UsernameInput", "CreateUserUsernameChanged"),
    createValueChangeSourceEvent("PasswordInput", "CreateUserPasswordChanged"),
    createValueChangeSourceEvent("ConfirmPasswordInput", "CreateUserConfirmPasswordChanged"),

    createClickSourceEvent("SaveUser", "CreateUserSaveUserClicked")
  ];

  display(CreateUserPage, {}, originId, events);
}

page CreateUserPage {
  layout: vertical;
  template: general;

  inputField NameInput {
    inputType: text;
  }
  inputField EmailInput {
    inputType: text;
  }
  inputField RoleInput {
    inputType: selectOne;
  }
  inputField TeamInput {
    inputType: selectOne;
  }
  inputField UsernameInput {
    inputType: text;
  }
  inputField PasswordInput {
    inputType: password;
  }
  inputField ConfirmPasswordInput {
    inputType: password;
  }
  container Buttons{
    layout: horizontal;

    button SaveUser{
      template: primary;
    }
  }
}

function onCreateUserPageLoaded(originId) {}

function onCreateUserNameChanged(originId) {
  createUserPageName = $IN.data.value;
}

function onCreateUserEmailChanged(originId) {
  createUserPageEmail = $IN.data.value;
}

function onCreateUserRoleChanged(originId) {
  createUserPageRole = $IN.data.value;
  fireEvent(createErrorValueChangeTargetEvent("RoleInput", ""), "CreateUserPage");
  if (createUserPageRole == ROLE_ADMIN) {
    fireEvent(createVisibilityChangeTargetEvent("TeamInput", "gone"), "CreateUserPage");
    createUserPageTeam = null;
  } else {
    fireEvent(createValueChangeTargetEvent("TeamInput", getTeamOptions(null)), "CreateUserPage");
    fireEvent(createVisibilityChangeTargetEvent("TeamInput", "visible"), "CreateUserPage");
  }
}

function onCreateUserTeamChanged(originId) {
  createUserPageTeam = $IN.data.value;
  fireEvent(createErrorValueChangeTargetEvent("TeamInput", ""), "CreateUserPage");
}

function onCreateUserUsernameChanged(originId) {
  createUserPageUsername = $IN.data.value;
}

function onCreateUserPasswordChanged(originId) {
  createUserPagePassword = $IN.data.value;
}

function onCreateUserConfirmPasswordChanged(originId) {
  createUserPageConfirmPassword = $IN.data.value;
}

function createUserCreateData() {
  return {
    "name": createUserPageName,
    "teamId": createUserPageTeam,
    "role": createUserPageRole,
    "email": createUserPageEmail,
    "username": createUserPageUsername,
    "password": createUserPagePassword,
    "confirmPassword": createUserPageConfirmPassword
  };
}

function onCreateUserSaveUserClicked(originId) {
  var userData = createUserCreateData();
  if (validateUserData(userData, originId)) {
    var userDao = {
      "id": uuid(),
      "name": userData.name,
      "teamId": userData.teamId,
      "role": userData.role,
      "email": userData.email,
      "username": userData.username,
      "status": "active",
      "visible": false,
      "changeType": "INSERT"
    };

    var requestData = {
      "type": "userDataValidationRequest",
      "requestId": getRequestId(),
      "userDao": userDao,
      "operation": "create"
    };
    sendDataChange("request", [requestData]);
  }
}

function saveUser(userDao, isEmailAddressAvailable) {
  debug("Backend has responsed to request, email address available: " + isEmailAddressAvailable);
  if (!isEmailAddressAvailable) {
    fireEvent(createErrorValueChangeTargetEvent("EmailInput", DICTIONARY.validationMsg_mailAlreadyExists), "CreateUserPage");
  } else {
    insertTypeDefinition("user", userDao);
    userDao.put("password", createUserPagePassword);

    debug("Sending data Change to Backend ...");
    sendDataChange("user", [userDao]);

    debug("Refreshing user list ...");
    fireEvent(createRefreshItemTargetEvent("UsersList", createUserListData()), "UsersPage");
    finishPage("CreateUserPage", originId);
  }
}

function validateUserData(userData, originId) {
  var nameValid = validateUserName(userData, "NameInput", "CreateUserPage");
  var emailValid = validateUserMail(userData, "EmailInput", "CreateUserPage");
  var teamValid = validateTeam(userData, "TeamInput", "CreateUserPage");
  var roleValid = validateUserRole(userData, "RoleInput", "CreateUserPage");
  var usernameValid = validateUsername(userData, "UsernameInput", "CreateUserPage");
  var passwordValid = validateUserPassword(userData, "PasswordInput", "ConfirmPasswordInput", "CreateUserPage");
  return nameValid && emailValid && teamValid && roleValid && usernameValid && passwordValid;
}
