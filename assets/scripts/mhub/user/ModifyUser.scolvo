import {
  /mhub/DataChange,
  /mhub/user/CreateModifyUserCommon,
  /mhub/repository/UserRepository
}

var modifyUserData;
var modifyUserOriginalData;

var modifyUserPagePassword;
var modifyUserPageConfirmPassword;

function displayUserModifyPage(originId, selectedUserId) {

  modifyUserPagePassword = null;
  modifyUserPageConfirmPassword = null;

  modifyUserData = getUserById(selectedUserId);
  modifyUserOriginalData = modifyUserData.deepClone();


  var events = [
    createValueChangeTargetEvent("NameInput", modifyUserData.name),
    createValueChangeTargetEvent("EmailInput", modifyUserData.email),
    createValueChangeTargetEvent("RoleInput", getRoleOptions(modifyUserData.role)),
    createValueChangeTargetEvent("TeamInput", getTeamOptions(modifyUserData.teamId)),
    createValueChangeTargetEvent("UsernameInput", modifyUserData.username),

    createValueChangeSourceEvent("NameInput", "ModifyUserNameChanged"),
    createValueChangeSourceEvent("EmailInput", "ModifyUserEmailChanged"),
    createValueChangeSourceEvent("RoleInput", "ModifyUserRoleChanged"),
    createValueChangeSourceEvent("TeamInput", "ModifyUserTeamChanged"),
    createValueChangeSourceEvent("UsernameInput", "ModifyUserUsernameChanged"),
    createValueChangeSourceEvent("PasswordInput", "ModifyUserPasswordChanged"),
    createValueChangeSourceEvent("ConfirmPasswordInput", "ModifyUserConfirmPasswordChanged"),

    createClickSourceEvent("SaveUser", "ModifyUserSaveUserClicked")
  ];

  if (modifyUserData.role == ROLE_ADMIN) {
    events.add(createVisibilityChangeTargetEvent("TeamInput", "gone"));
  }

  display(ModifyUserPage, {}, originId, events);
}

page ModifyUserPage {
  layout: vertical;
  template: general;

  inputField NameInput {
    inputType: text;
  }
  inputField EmailInput {
    inputType: text;
  }
  inputField RoleInput {
    inputType: selectOne;
  }
  inputField TeamInput {
    inputType: selectOne;
  }
  inputField UsernameInput {
    inputType: text;
  }
  inputField PasswordInput {
    inputType: password;
  }
  inputField ConfirmPasswordInput {
    inputType: password;
  }
  container Buttons{
    layout: horizontal;

    button SaveUser{
      template: primary;
    }
  }
}

function onModifyUserPageLoaded(originId) {}

function onModifyUserNameChanged(originId) {
  modifyUserData.put("name", $IN.data.value);
}

function onModifyUserEmailChanged(originId) {
  modifyUserData.put("email", $IN.data.value);
}

function onModifyUserRoleChanged(originId) {
  modifyUserData.put("role", $IN.data.value);
  fireEvent(createErrorValueChangeTargetEvent("RoleInput", ""), "ModifyUserPage");
  if (modifyUserData.role == ROLE_ADMIN) {
    fireEvent(createVisibilityChangeTargetEvent("TeamInput", "gone"), "ModifyUserPage");
    modifyUserData.put("teamId", null);
  } else {
    fireEvent(createValueChangeTargetEvent("TeamInput", getTeamOptions(null)), "ModifyUserPage");
    fireEvent(createVisibilityChangeTargetEvent("TeamInput", "visible"), "ModifyUserPage");
  }
}

function onModifyUserTeamChanged(originId) {
  modifyUserData.put("teamId", $IN.data.value);
  fireEvent(createErrorValueChangeTargetEvent("TeamInput", ""), "ModifyUserPage");
}

function onModifyUserUsernameChanged(originId) {
  modifyUserData.put("username", $IN.data.value);
}

function onModifyUserPasswordChanged(originId) {
  modifyUserPagePassword = $IN.data.value;
}

function onModifyUserConfirmPasswordChanged(originId) {
  modifyUserPageConfirmPassword = $IN.data.value;
}

function onModifyUserSaveUserClicked(originId) {
  debug("Validating ...");
  if (validateModifyUserData()) {
    debug("Validated");
    var userDao = {
      "id": modifyUserData.id,
      "name": modifyUserData.name,
      "email": modifyUserData.email,
      "teamId": modifyUserData.teamId,
      "username": modifyUserData.username,
      "role": modifyUserData.role,
      "changeType": "UPDATE"
    };

    debug("Checking emails");
    if (modifyUserData.email == modifyUserOriginalData.email) {
      debug("No email change");
      modifyUser(userDao, true);
    } else {
      debug("Email change");
      var requestData = {
        "type": "userDataValidationRequest",
        "requestId": getRequestId(),
        "userDao": userDao,
        "operation": "modify"
      };
      sendDataChange("request", [requestData]);
    }
  }
}

function modifyUser(userDao, isEmailAddressAvailable) {
  debug("Modifying ...");
  if (!isEmailAddressAvailable) {
    debug("Email not available");
    fireEvent(createErrorValueChangeTargetEvent("EmailInput", DICTIONARY.validationMsg_mailAlreadyExists), "ModifyUserPage");
  } else {
    debug("Updating locally");
    updateTypeDefinition("user", userDao.id, userDao);

    debug("Checking password");
    if (modifyUserPagePassword != null) {
      userDao.put("password", modifyUserPagePassword);
    }
    debug("Sending data change");
    var cloned = userDao.deepClone();
    // Null bug in deepClone!
    cloned.put("teamId", userDao.teamId);

    sendDataChange("user", [cloned]);
    debug("Refreshing local pages");
    fireEvent(createRefreshItemTargetEvent("UsersList", createUserListData()), "UsersPage");
    finishPage("ModifyUserPage", originId);
  }
}

function validateModifyUserData() {
  debug("Validating name");
  var nameValid = validateUserName(modifyUserData, "NameInput", "ModifyUserPage");
  debug("Validating email");
  var emailValid = validateUserMail(modifyUserData, "EmailInput", "ModifyUserPage");
  debug("Validating team");
  var teamValid = validateTeam(modifyUserData, "TeamInput", "ModifyUserPage");
  debug("Validating role");
  var roleValid = validateUserRole(modifyUserData, "RoleInput", "ModifyUserPage");
  debug("Validating username");
  var usernameValid = validateModifyUsername("UsernameInput", "ModifyUserPage");

  var passwordValid = true;
  debug("Validating password");
  if (modifyUserPagePassword != null && !modifyUserPagePassword.isEmpty()) {
    debug("Really Validating password");
    passwordValid = validateUserPasswordWithValues(modifyUserPagePassword, modifyUserPageConfirmPassword, "PasswordInput", "ConfirmPasswordInput", "ModifyUserPage");
  }
  debug("Final check: name " + nameValid + " email " + emailValid + " team " + teamValid + " role " + roleValid + " username " + usernameValid + " password " + passwordValid);
  var result = nameValid && emailValid && teamValid && roleValid && usernameValid && passwordValid;
  debug("Final result: " + result);
  return result;
}

function validateModifyUsername(componentId, pageName) {
  if (modifyUserData.username == modifyUserOriginalData.username) {
    return true;
  }
  return validateUsername(modifyUserData, componentId, pageName);
}
