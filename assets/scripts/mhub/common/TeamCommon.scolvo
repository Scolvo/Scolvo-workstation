import {
  /mhub/repository/TeamRepository
}

function resolveTeam(teamId) {
  var team = {"name": "-"};
  if (teamId != null) {
    team = getTeamById(teamId);
  }
  if(team == null) {
    return "-";
  }
  return team.name;
}

function resolveTeamName(teamName) {
  if (teamName != null) {
    return teamName;
  }
  return "-";
}

function getTeamOptions(selectedId) {
  return getTeams().map(function(teamDao) {
    return createSelectOption(teamDao.id, teamDao.name, teamDao.id == selectedId);
  });
}

function getTeamOptionsWithAll(selectedId) {
  var result = [
    createSelectOption("all", DICTIONARY.filter_all, "all" == selectedId)
  ];
  getTeams().each(function(teamDao) {
    result.add(createSelectOption(teamDao.id, teamDao.name, teamDao.id == selectedId));
  });
  return result;
}

function getTeamOptionsWithAllAndNone(selectedId) {
  var result = [
    createSelectOption("all", DICTIONARY.filter_all, "all" == selectedId),
    createSelectOption("none", DICTIONARY.filter_none, "none" == selectedId),
  ];
  getTeams().each(function(teamDao) {
    result.add(createSelectOption(teamDao.id, teamDao.name, teamDao.id == selectedId));
  });
  return result;
}


function validateTeamForWorkplace(data, componentId, pageName) {
  if (data.canBeBooked == "yes" && (data.teamId == null || data.teamId.isEmpty())) {
    fireEvent(createErrorValueChangeTargetEvent(componentId, DICTIONARY.userValidationMsg_Team), pageName);
    return false;
  }
  return true;
}

function validateTeamValue(value, role, componentId, pageName) {
  if (role == ROLE_WORKER && (value == null || value.isEmpty())) {
    fireEvent(createErrorValueChangeTargetEvent(componentId, DICTIONARY.userValidationMsg_Team), pageName);
    return false;
  } else if (role == ROLE_ADMIN && value != null) {
    fireEvent(createErrorValueChangeTargetEvent(componentId, DICTIONARY.userValidationMsg_AdminMustNotHaveTeam), pageName);
    return false;
  }

  return true;
}

function createYesNoOptions(selected) {
  return [
    createSelectOption("yes", DICTIONARY.text_Yes, selected == "yes"),
    createSelectOption("no", DICTIONARY.text_No, selected == "no")
  ];
}

function createTeamMapRelativePath(teamId, fileName) {
  return "team_maps/" + teamId + "/" + fileName;
}

function validateTeamName(data, componentId, pageName) {
  if (data.name == null || data.name.isEmpty()) {
    fireEvent(createErrorValueChangeTargetEvent(componentId, DICTIONARY.userValidationMsg_TeamName), pageName);
    return false;
  } else if (data.name.length() > 50) {
    fireEvent(createErrorValueChangeTargetEvent(componentId, DICTIONARY.userValidationMsg_TeamNameTooLong), pageName);
    return false;
  }

  return true;
}

function validateTeamLocation(data, componentId, pageName) {
  if (data.location == null || data.location.isEmpty()) {
    fireEvent(createErrorValueChangeTargetEvent(componentId, DICTIONARY.userValidationMsg_TeamLocation), pageName);
    return false;
  } else if (data.location.length() > 50) {
    fireEvent(createErrorValueChangeTargetEvent(componentId, DICTIONARY.userValidationMsg_TeamLocationTooLong), pageName);
    return false;
  }

  return true;
}

function validateTeamMapFileType(data, componentId, pageName) {
  if (data.uploadMap.mimeType != "image/png" && data.uploadMap.mimeType != "image/jpg" && data.uploadMap.mimeType != "image/jpeg") {
    fireEvent(createErrorValueChangeTargetEvent(componentId, DICTIONARY.userValidationMsg_TeamMapInvalidType), pageName);
    return false;
  }
  return true;
}

function validateCreateTeamData(teamData, pageName) {
  debug("Validating creating team data ...");
  var nameIsValid = validateTeamName(teamData, "NameInput", pageName);
  var locationIsValid = validateTeamLocation(teamData, "LocationInput", pageName);
  var uploadMapIsValid = true;
  if (teamData.uploadMap != null && teamData.uploadMap.originalFileName != null) {
    uploadMapIsValid = validateTeamMapFileType(teamData, "MapPictureUploadField", pageName);
  }

  return nameIsValid && locationIsValid && uploadMapIsValid;
}

function validateModifiedTeamData(teamData, pageName) {
  debug("Validating modified team data ...");
  var nameIsValid = validateTeamName(teamData, "NameInput", pageName);
  var locationIsValid = validateTeamLocation(teamData, "LocationInput", pageName);
  var uploadMapIsValid = true;
  if (teamData.uploadMap != null && teamData.uploadMap.originalFileName != null) {
    uploadMapIsValid = validateTeamMapFileType(teamData, "MapPictureUploadField", pageName);
  }

  return nameIsValid && locationIsValid && uploadMapIsValid;
}

function onTeamMapUploadFailure(originId) {
  publishNotificationMessage(originId, DICTIONARY.uploadFail_msg);
}
