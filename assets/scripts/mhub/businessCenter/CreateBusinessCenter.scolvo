import {
  /mhub/DataChange,
  /common/TypeDefinitionExtension,
  /mhub/common/CorporateCommon,
  /mhub/businessCenter/BusinessCenterValidation
}

var selectedCorporate = null;

function displayCreateBusinessCenterPage(originId) {
  var data = {
    "CreateBusinessCenterPage": {
      "CreateBusinessCenterForm": {
        "corporateOptions": getCorporateOptions(null)
      }
    }
  };

  display(CreateBusinessCenterPage, data, originId);
}

page CreateBusinessCenterPage {
  layout: vertical;
  template: general;

  form CreateBusinessCenterForm {
    template: normal;
    span: 24;
    actions: [
      BackToBusinessCenter,
      SaveBusinessCenter
    ]
    fields: [
      field Code => code formItemInputNormal,
      field Name => name formItemInputNormal,
      field Corporate => corporate formItemSelectNormal
    ]
  }
}

function onCreateBusinessCenterPageLoaded(originId) {}

function onBackToBusinessCenter(originId) {
  onBusinessCenters(originId);
}

function onSaveBusinessCenter(originId) {
  var businessCenterData = $IN.data;
  var validationResult = validateBusinessCenter(businessCenterData, originId);
  if (validationResult.messages.size() != 0) {
    publish(validationResult);
    return null;
  }

  var businessCenterDao = {
    "id": uuid(),
    "businessCenterCode": businessCenterData.Code,
    "name": businessCenterData.Name,
    "corporate": businessCenterData.Corporate
    "changeType": "INSERT"
  };

  insertExecution("businessCenter", businessCenterDao);
  sendDataChangeRq(originId, "businessCenter", [businessCenterDao]);

  onBackToBusinessCenter(originId);
}

function validateBusinessCenter(businessCenterData, originId) {
  var validationResult = com.scolvo.core.vm.action.display.FormValidationResult(originId);
  validateBusinessCenterCode(businessCenterData.Code, validationResult);
  validateBusinessCenterName(businessCenterData.Name, validationResult);
  validateBusinessCenterCorporate(businessCenterData.Corporate, validationResult);
  return validationResult;
}
