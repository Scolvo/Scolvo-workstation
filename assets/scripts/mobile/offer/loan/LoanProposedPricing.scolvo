import {
  /mobile/Builders,
  /mobile/offer/loan/LoanAdditionalConditions
}

function displayLoanProposedPricingFragment(originId) {
  var actionEvents = [
    buildSourceValueChangedEvent("Interest", "LoanOfferInterestValueChanged"),
    buildSourceValueChangedEvent("PlacementApprovalFee", "LoanOfferPlacementApprovalFeeValueChanged"),
    buildSourceValueChangedEvent("FeeForUndrawnFunds", "LoanOfferFeeForUndrawnFundsValueChanged"),
    buildSourceValueChangedEvent("MonitoringFee", "LoanOfferMonitoringFeeValueChanged"),
    buildSourceClickedEvent("PrevButton", "LoanProposedPricingFragmentPrevButtonClicked"),
    buildSourceClickedEvent("NextButton", "LoanProposedPricingFragmentNextButtonClicked"),
    buildTargetValueChangeEvent("Interest", loanOfferData.interest),
    buildTargetValueChangeEvent("PlacementApprovalFee", loanOfferData.placementApprovalFee),
    buildTargetValueChangeEvent("FeeForUndrawnFunds", loanOfferData.feeForUndrawnFunds),
    buildTargetValueChangeEvent("MonitoringFee", loanOfferData.monitoringFee)
  ];
  displayFragment("IndicativeOfferFormContainer", LoanProposedPricingFragment, {}, originId, actionEvents);
}

fragment LoanProposedPricingFragment {
  layout: vertical;
  template: general;
  isScrollable: true;
  span: 0;

  inputField Interest {
    template: inputFieldSimple;
    inputType: text;
  }

  inputField PlacementApprovalFee {
    template: inputFieldSimple;
    inputType: text;
  }

  inputField FeeForUndrawnFunds {
    template: inputFieldSimple;
    inputType: text;
  }

  inputField MonitoringFee {
    template: inputFieldSimple;
    inputType: text;
  }

  container ButtonContainer {
    layout: horizontalButtonGroup;

    button PrevButton {
      template: secondaryMedium;
    }

    button NextButton {
      template: primaryMedium;
    }
  }
}

function onLoanProposedPricingFragmentLoaded(originId) {}

function onLoanOfferInterestValueChanged(originId) {
  loanOfferData.put("interest", $IN.data.message);
}

function onLoanOfferPlacementApprovalFeeValueChanged(originId) {
  loanOfferData.put("placementApprovalFee", $IN.data.message);
}

function onLoanOfferFeeForUndrawnFundsValueChanged(originId) {
  loanOfferData.put("feeForUndrawnFunds", $IN.data.message);
}

function onLoanOfferMonitoringFeeValueChanged(originId) {
  loanOfferData.put("monitoringFee", $IN.data.message);
}

function onLoanProposedPricingFragmentPrevButtonClicked(originId) {
  displayLoanBasicOfferDetailFragment(null, originId);
}

function onLoanProposedPricingFragmentNextButtonClicked(originId) {
  if (validateLoanProposedPricingFragment()) {
    displayLoanAdditinalConditionsFragment(originId);
  }
}

function validateLoanProposedPricingFragment() {
  var isValid = true;
  if(loanOfferData.interest != null && loanOfferData.interest.length() > 50) {
    fireEvent(buildErrorValueChangeEvent("Interest", DICTIONARY.validationMsg_TooLong50), originId);
    isValid = false;
  }
  if(loanOfferData.placementApprovalFee != null && loanOfferData.placementApprovalFee.length() > 50) {
    fireEvent(buildErrorValueChangeEvent("PlacementApprovalFee", DICTIONARY.validationMsg_TooLong50), originId);
    isValid = false;
  }
  if(loanOfferData.feeForUndrawnFunds != null && loanOfferData.feeForUndrawnFunds.length() > 50) {
    fireEvent(buildErrorValueChangeEvent("FeeForUndrawnFunds", DICTIONARY.validationMsg_TooLong50), originId);
    isValid = false;
  }
  if(loanOfferData.monitoringFee != null && loanOfferData.monitoringFee.length() > 50) {
    fireEvent(buildErrorValueChangeEvent("MonitoringFee", DICTIONARY.validationMsg_TooLong50), originId);
    isValid = false;
  }
  return isValid;
}
