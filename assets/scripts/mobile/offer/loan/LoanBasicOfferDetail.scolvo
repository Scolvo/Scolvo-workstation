import {
  /mobile/Builders,
  /mobile/offer/common/CurrencyBuilder,
  /mobile/repository/OfferRepository,
  /mobile/offer/loan/LoanProposedPricing
}

var loanOfferData = {};

function displayLoanBasicOfferDetailFragment(offerId, originId) {
  if (offerId != null && !offerId.isEmpty()) {
    loanOfferData.clear();
    loanOfferData.put("offerId", offerId);
    loanOfferData.putAll(getLoanOfferByOfferId(offerId));
  }

  var loanAmount = loanOfferData.amount;
  if (loanOfferData.amount != null && isNumber(loanOfferData.amount.toString())) {
    loanAmount = decimalFormat(loanOfferData.amount, "###,##0.00");
  }

  var actionEvents = [
    buildSourceValueChangedEvent("TypeOfLoan", "LoanOfferTypeValueChanged"),
    buildSourceValueChangedEvent("Amount", "LoanOfferAmountValueChanged"),
    buildSourceSelectionChanged("Currency", "LoanOfferCurrencySelectionChanged"),
    buildSourceValueChangedEvent("Purpose", "LoanOfferPurposeValueChanged"),
    buildSourceValueChangedEvent("RepaymentPeriod", "LoanOfferRepaymentPeriodValueChanged"),
    buildSourceValueChangedEvent("AvailabilityPeriod", "LoanOfferAvailabilityPeriodValueChanged"),
    buildSourceValueChangedEvent("GracePeriod", "LoanOfferGracePeriodValueChanged"),
    buildSourceValueChangedEvent("WithdrawalMethod", "LoanOfferWithdrawalMethodValueChanged"),
    buildSourceValueChangedEvent("RepaymentMethod", "LoanOfferRepaymentMethodValueChanged"),
    buildSourceClickedEvent("PrevButton", "LoanBasicOfferDetailPrevButtonClicked"),
    buildSourceClickedEvent("NextButton", "LoanBasicOfferDetailNextButtonClicked"),
    buildTargetValueChangeEvent("TypeOfLoan", loanOfferData.typeOfLoan),
    buildTargetValueChangeEvent("Amount", loanAmount),
    buildTargetValueChangeEvent("Purpose", loanOfferData.purpose),
    buildTargetValueChangeEvent("RepaymentPeriod", loanOfferData.repaymentPeriod),
    buildTargetValueChangeEvent("AvailabilityPeriod", loanOfferData.availabilityPeriod),
    buildTargetValueChangeEvent("GracePeriod", loanOfferData.gracePeriod),
    buildTargetValueChangeEvent("WithdrawalMethod", loanOfferData.withdrawalMethod),
    buildTargetValueChangeEvent("RepaymentMethod", loanOfferData.repaymentMethod)
  ];

  var data = {
    "LoanBasicOfferDetailFragment": {
      "CurrencyOptions": buildCurrencyOptions(loanOfferData.currency)
    }
  };
  displayFragment("IndicativeOfferFormContainer", LoanBasicOfferDetailFragment, data, originId, actionEvents);
}

fragment LoanBasicOfferDetailFragment {
  layout: vertical;
  template: general;
  isScrollable: true;
  span: 0;

  inputField TypeOfLoan {
    template: inputFieldSimple;
    inputType: text;
  }

  inputField Amount {
    template: inputFieldSimple;
    inputType: number;
  }

  inputField Currency {
    template: inputFieldSimple;
    inputType: selectOne;
  }

  inputField Purpose {
    template: inputFieldSimple;
    inputType: text;
  }

  inputField RepaymentPeriod {
    template: inputFieldSimple;
    inputType: text;
  }

  inputField AvailabilityPeriod {
    template: inputFieldSimple;
    inputType: text;
  }

  inputField GracePeriod {
    template: inputFieldSimple;
    inputType: text;
  }

  inputField WithdrawalMethod {
    template: inputFieldSimple;
    inputType: text;
  }

  inputField RepaymentMethod {
    template: inputFieldSimple;
    inputType: text;
  }

  container ButtonContainer {
    layout: horizontalButtonGroup;

    button PrevButton {
      template: secondaryMedium;
    }

    button NextButton {
      template: primaryMedium;
    }
  }
}

function onLoanBasicOfferDetailFragmentLoaded(originId) {}

function onLoanOfferTypeValueChanged(originId) {
  loanOfferData.put("typeOfLoan", $IN.data.message);
}

function onLoanOfferAmountValueChanged(originId) {
  if ($IN.data.message != null && !$IN.data.message.isEmpty()) {
    loanOfferData.put("amount", parseNumber($IN.data.message));
  } else {
    loanOfferData.put("amount", null);
  }
}

function onLoanOfferCurrencySelectionChanged(originId) {
  loanOfferData.put("currency", $IN.data.value);
}

function onLoanOfferPurposeValueChanged(originId) {
  loanOfferData.put("purpose", $IN.data.message);
}

function onLoanOfferRepaymentPeriodValueChanged(originId) {
  loanOfferData.put("repaymentPeriod", $IN.data.message);
}

function onLoanOfferAvailabilityPeriodValueChanged(originId) {
  loanOfferData.put("availabilityPeriod", $IN.data.message);
}

function onLoanOfferGracePeriodValueChanged(originId) {
  loanOfferData.put("gracePeriod", $IN.data.message);
}

function onLoanOfferWithdrawalMethodValueChanged(originId) {
  loanOfferData.put("withdrawalMethod", $IN.data.message);
}

function onLoanOfferRepaymentMethodValueChanged(originId) {
  loanOfferData.put("repaymentMethod", $IN.data.message);
}

function onLoanBasicOfferDetailPrevButtonClicked(originId) {
  displayIndicativeOfferFragment(originId);
}

function onLoanBasicOfferDetailNextButtonClicked(originId) {
  if (validateLoanOfferDetailFragment(originId)) {
    displayLoanProposedPricingFragment(originId);
  }
}

function validateLoanOfferDetailFragment(originId) {
  var isValid = true;
  if (loanOfferData.typeOfLoan != null && loanOfferData.typeOfLoan.length() > 50) {
    fireEvent(buildErrorValueChangeEvent("TypeOfLoan", DICTIONARY.validationMsg_TooLong50), originId);
    isValid = false;
  }
  if (loanOfferData.purpose != null && loanOfferData.purpose.length() > 50) {
    fireEvent(buildErrorValueChangeEvent("Purpose", DICTIONARY.validationMsg_TooLong50), originId);
    isValid = false;
  }
  if (loanOfferData.repaymentPeriod != null && loanOfferData.repaymentPeriod.length() > 50) {
    fireEvent(buildErrorValueChangeEvent("RepaymentPeriod", DICTIONARY.validationMsg_TooLong50), originId);
    isValid = false;
  }
  if (loanOfferData.availabilityPeriod != null && loanOfferData.availabilityPeriod.length() > 50) {
    fireEvent(buildErrorValueChangeEvent("AvailabilityPeriod", DICTIONARY.validationMsg_TooLong50), originId);
    isValid = false;
  }
  if (loanOfferData.gracePeriod != null && loanOfferData.gracePeriod.length() > 50) {
    fireEvent(buildErrorValueChangeEvent("GracePeriod", DICTIONARY.validationMsg_TooLong50), originId);
    isValid = false;
  }
  if (loanOfferData.withdrawalMethod != null && loanOfferData.withdrawalMethod.length() > 50) {
    fireEvent(buildErrorValueChangeEvent("WithdrawalMethod", DICTIONARY.validationMsg_TooLong50), originId);
    isValid = false;
  }
  if (loanOfferData.repaymentMethod != null && loanOfferData.repaymentMethod.length() > 50) {
    fireEvent(buildErrorValueChangeEvent("RepaymentMethod", DICTIONARY.validationMsg_TooLong50), originId);
    isValid = false;
  }
  if (loanOfferData.amount == null) {
    fireEvent(buildErrorValueChangeEvent("Amount", DICTIONARY.validationMsg_requiredField), originId);
    isValid = false;
  }
  if (loanOfferData.currency == null) {
    fireEvent(buildErrorValueChangeEvent("Currency", DICTIONARY.validationMsg_requiredField), originId);
    isValid = false;
  }
  return isValid;
}
