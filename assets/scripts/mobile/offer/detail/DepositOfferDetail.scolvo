import {
  /mobile/Builders,
  /mobile/offer/OfferBuilder,
  /mobile/repository/OfferRepository,
  /mobile/offer/DeleteOfferConfirmation,
  /mobile/offer/detail/AttachmentOffer,
  /mobile/offer/common/OfferShare
}

function displayDepositOfferDetailPage(originId, selectedOffer) {
  var deposit = getDepositOfferByOfferId(selectedOffer.id);

  var deliveryDeadline = "";
  if (selectedOffer.deliveryDeadline != null) {
    deliveryDeadline = dateToString(selectedOffer.deliveryDeadline, "dd.MM.yyyy.");
  }

  var statusDate = "";
  if (selectedOffer.statusDate != null) {
    statusDate = dateToString(selectedOffer.statusDate, "dd.MM.yyyy.");
  }

  var offerValidity = "";
  if (deposit.offerValidityPeriod != null) {
    offerValidity = dateToString(deposit.offerValidityPeriod, "dd.MM.yyyy.");
  }

  var termDepositAmount = deposit.termDepositAmount;
  if (deposit.termDepositAmount != null && isNumber(deposit.termDepositAmount.toString())) {
    termDepositAmount = decimalFormat(deposit.termDepositAmount, "###,##0.00");
  }

  var currency = "";
  if(deposit.currency != null) {
    currency = resolveCurrency(deposit.currency);
  }

  var detailFormData = {
    "offerType": resolveOfferType(selectedOffer.offerType),
    "subject": selectedOffer.subject,
    "receiver": selectedOffer.receiver,
    "deliveryDeadline": deliveryDeadline,
    "importantNotice": selectedOffer.importantNotice,
    "status": resolveOfferStatus(selectedOffer.status),
    "statusDate": statusDate,
    "termDepositAmount": termDepositAmount,
    "termDepositCurrency": currency,
    "termDepositPeriod": deposit.termDepositPeriod,
    "amountOfNominalEffectiveInterestRate": deposit.amountOfNominalEffectiveInterestRate,
    "methodOfInterestCalculationPayment": deposit.methodOfInterestCalculationPayment,
    "interestRate": deposit.interestRate,
    "depositSecurity": deposit.depositSecurity,
    "offerValidityPeriod": offerValidity
  };

  var pageActions = [];
  if (sessionUserIsRM()) {
    pageActions.addAll(["EditDepositOffer", "DeleteDepositOffer", "AttachmentOffer", "ShareDepositOffer"]);
  }
  else if (sessionUserIsBCM()) {
    pageActions.add("EditDepositOffer");
  }

  var data = {
    "DepositOfferDetailPage": {
      "actions": pageActions,
      "OfferDetailForm": detailFormData
    }
  };

  display(DepositOfferDetailPage, data, originId);
}

page DepositOfferDetailPage {
  layout: vertical;
  template: detail;
  scolvoMenuVisible: false;

  form OfferDetailForm {
    template: detail;
    span: 0;
    fields: [
      field OfferType => offerType formItemReadOnlyFull,
      field Subject => subject formItemReadOnlyFull,
      field Receiver => receiver formItemReadOnlyFull,
      field DeliveryDeadline => deliveryDeadline formItemReadOnlyFull,
      field ImportantNotice => importantNotice formItemReadOnlyFull,
      field Status => status formItemReadOnlyFull,
      field StatusUpdateDate => statusDate formItemReadOnlyFull,
      field TermDepositAmount => termDepositAmount formItemReadOnlyFull,
      field TermDepositCurrency => termDepositCurrency formItemReadOnlyFull,
      field TermDepositPeriod => termDepositPeriod formItemReadOnlyFull,
      field AmountOfNominalEffectiveInterestRate => amountOfNominalEffectiveInterestRate formItemReadOnlyFull,
      field MethodOfInterestCalculationPayment => methodOfInterestCalculationPayment formItemReadOnlyFull,
      field InterestRate => interestRate formItemReadOnlyFull,
      field DepositSecurity => depositSecurity formItemReadOnlyFull,
      field OfferValidityPeriod => offerValidityPeriod formItemReadOnlyFull
    ]
  }
}

function onDepositOfferDetailPageLoaded(originId) {}

function onEditDepositOffer(originId) {
  finishPage("DepositOfferDetailPage", originId);
  displayIndicativeOfferPage(originId, selectedOfferDao.companyId, selectedOfferDao.id);
}

function onDeleteDepositOffer(originId) {
  displayDeleteOfferConfirmationPage(originId, "DepositOfferDetailPage");
}

function onShareDepositOffer(originId) {
  shareOffer(selectedOfferDao.id, "Deposit");
}
