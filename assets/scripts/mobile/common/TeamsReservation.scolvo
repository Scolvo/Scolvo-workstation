import {
  /mobile/repository/TeamRepository
}

var loggedInUser = null;
var teams = null;
var workstations = null;
var meetingRooms = null;

function getTeamsData() {
  if(teams == null) {
    teams = prepareData(getTeams());
  }
  return teams;
}

function getWorkstationsData() {
  if(workstations == null) {
    workstations = prepareData(getWorkstations());
  }
  return workstations;
}

function getMeetingRoomsData() {
  if(meetingRooms == null) {
    meetingRooms = prepareData(getMeetingRooms());
  }
  return meetingRooms;
}

function addTeamToTeamsData(teamDao) {
  teams.put(teamDao.id, teamDao);
}

function addWorkstationToWorkstationsData(workstationDao) {
  workstations.put(workstationDao.id, workstationDao);
}

function addMeetingRoomToMeetingRoomsData(meetingRoomDao) {
  meetingRooms.put(meetingRoomDao.id, meetingRoomDao);
}

function getLoggedInUser() {
  if(loggedInUser == null) {
    loggedInUser = getUserById(sessionUserId());
  }
  return loggedInUser;
}

function setLoggedInUserVisible(visibility) {
  loggedInUser.put("visible", visibility);
}

function createTeamOptions(selectedId) {
  return getTeams().map(function (teamDao) {
    return createSelectOption(teamDao.id, teamDao.name, selectedId == teamDao.id);
  });
}

function getDayStart(day) {
  var dayStartString = dateToString(day, "yyyy-MM-dd") + " 8:00";
  return parseStringToDate(dayStartString, "yyyy-MM-dd HH:mm");
}

function getDayEnd(day) {
  var dayEndString = dateToString(day, "yyyy-MM-dd") + " 19:00";
  return parseStringToDate(dayEndString, "yyyy-MM-dd HH:mm");
}

function getDateStringForList(day, relativeDayCount) {
  var dateString = dateToString(currentDay, "yyyy MMMM dd.");
  if(relativeDayCount == 0) {
    dateString = DICTIONARY.today + ", " + dateString;
  } else if(relativeDayCount == 1) {
    dateString = DICTIONARY.tomorrow + ", " + dateString;
  }
  return dateString;
}

function resolveAvailableMeetingRoomLabel(availableCount, totalAvailableReservationUnits) {
  if(availableCount == 0) {
    return DICTIONARY.noAvailableReservations_msg;
  }
  else if (availableCount == totalAvailableReservationUnits) {
    return DICTIONARY.allAvailableReservations_msg;
  }
  return DICTIONARY.someAvailableReservations_msg;
}

function resolveMeetingRoomsAvailabilityPicture(totalMeetingRooms, availableMeetingRooms) {
  if(availableMeetingRooms == totalMeetingRooms) {
    return "icon_sofa_success";
  }
  else if(availableMeetingRooms == 0) {
    return "icon_sofa_alert";
  }
  else if(availableMeetingRooms > 0 && availableMeetingRooms < totalMeetingRooms) {
    return "icon_sofa_warning";
  }
}

function resolveReservationIntervalText(reservationStart, reservationEnd) {
  return dateToString(reservationStart, "HH:mm") + " - " + dateToString(reservationEnd, "HH:mm");
}

function prepareCalendarDayData(day, reservations, totalAvailable) {
  var reservationString = dateToString(day, "yyyy.MM.dd.");
  var reservationsForCurrentDay = 0;
  if (reservations.get(reservationString) != null) {
    reservationsForCurrentDay = reservations.get(reservationString);
  }

  var dayData = {
    "eventDate": day.getTime(),
    "eventMarkerColor": resolveCalendarMarkerColor(reservationsForCurrentDay, totalAvailable)
  };
  return dayData;
}

function resolveCalendarMarkerColor(reservations, totalAvailable) {
  var available = totalAvailable - reservations;
  if(available == 0) {
    return "alert800";
  }
  if(available == totalAvailable) {
    return "success800";
  }
  return "warning800";
}

function prepareWorkstationReservationForPeriod(teamId, startOfPeriod, endOfPeriod) {
  var reservationsByPeriod = getWorkstationReservationsForTeamByPeriod(teamId, startOfPeriod, endOfPeriod);
  var reservations = {};
  reservationsByPeriod.each(function(reservationDao) {
    reservations.put(reservationDao.reservationStr, reservationDao.count);
  });
  return reservations;
}

function prepareWorkstationReservationForDay(teamId, day) {
  var reservationsByDay = getWorkstationReservationsForDayByTeam(teamId, day);
  var reservations = {};
  reservationsByDay.each(function(reservationDao) {
    var innerData = {
      "id": reservationDao.id,
      "userId": reservationDao.userId
    };
    reservations.put(reservationDao.workplaceId, innerData);
  });
  return reservations;
}

function prepareMeetingRoomReservationForPeriod(startOfPeriod, endOfPeriod) {
  var reservationsByPeriod = getMeetingRoomsReservationsByPeriod(startOfPeriod, endOfPeriod);
  var reservations = {};
  reservationsByPeriod.each(function(reservationDao) {
    reservations.put(reservationDao.reservationStr, reservationDao.count);
  });
  return reservations;
}

function prepareMeetingRoomReservationForDay(startOfPeriod, endOfPeriod) {
  var reservationsByPeriod = getMeetingRoomsReservationsByDay(startOfPeriod, endOfPeriod);
  var reservations = {};
  reservationsByPeriod.each(function(reservationDao) {
    reservations.put(reservationDao.meetingRoomId, reservationDao.count);
  });
  return reservations;
}

function prepareData(dataArray) {
  var preparedData = {};
  dataArray.each(function (dataDao) {
    preparedData.put(dataDao.id, dataDao);
  });
  return preparedData;
}
