import {
  /mobile/common/TeamsReservation,
  /mobile/repository/ReservationRepository,
  /mobile/repository/WorkstationRepository,
  /mobile/workstation/Workstations
}

function onCalendarView(originId) {
  var selectedTeamId = getUserById(sessionUserId()).teamId;

  var data = {
    "CalendarViewPage": {
      "CalendarViewTeamSelectOptions": createTeamOptions(selectedTeamId),
      "ReservationList": createCalendarViewReservationList(selectedTeamId)
    }
  };
  var actionEvents = [
    buildSourceSelectionChanged("CalendarViewTeamSelect", "CalendarViewTeamSelectChanged")
  ];

  display(CalendarViewPage, data, originId, actionEvents);
}

function prepareCalendarDayData(day, reservations) {
  var reservationString = dateToString(day, "yyyy.MM.dd.");
  var reservationsForCurrentDay = 0;
  if (reservations.get(reservationString) != null) {
    reservationsForCurrentDay = reservations.get(reservationString);
  }

  var dayData = {
    "eventDate": day.getTime(),
    "eventMarkerColor": resolveMarkerColor(reservationsForCurrentDay, totalWorkstationsForTeam)
  };
  return dayData;
}

function createCalendarViewReservationList(selectedTeamId) {
  var calendarViewReservationsListData = [];
  var today = getTodayForWorkstations();
  var totalWorkstationsForTeam = getWorkstationsForTeam(selectedTeamId).size();
  var reservations = prepareReservationForPeriod(selectedTeamId, dateSubtract(today, 7, "day").getTime(), dateAdd(today, 29, "day").getTime());

  for(var i = 7; i > 0; i -= 1) {
    var currentDay = dateSubtract(today, i, "day");
    calendarViewReservationsListData.add(prepareCalendarDayData(currentDay, reservations));
  }
  calendarViewReservationsListData.add(prepareCalendarDayData(today, reservations));
  for(var i = 1; i < 30; i += 1) {
    var currentDay = dateAdd(today, i, "day");
    calendarViewReservationsListData.add(prepareCalendarDayData(currentDay, reservations));
  }

  return calendarViewReservationsListData;
}

function resolveMarkerColor(reservations, totalWorkstations) {
  var availableWorkstations = totalWorkstations - reservations;
  if(availableWorkstations == 0) {
    return "alert800";
  }
  if(availableWorkstations == totalWorkstations) {
    return "success800";
  }
  return "warning800";
}

page CalendarViewPage {
  layout: vertical;
  template: general;
  scolvoMenuVisible: true;
  settingsVisible: true;

  inputField  CalendarViewTeamSelect {
    inputType: selectOne;
  }

  list ReservationList {
    template: listVerticalNormal;
    itemTemplate: listItemCalendar;
    span: 0;
    filterVisible: false;
    columns: [
      eventDay => eventDate
    ]
  }
}

function onCalendarViewPageLoaded(originId) {}

function onCalendarViewTeamSelectChanged(originId) {
  fireEvent(buildRefreshItemEvent("ReservationList", createCalendarViewReservationList($IN.data.value)), "CalendarViewPage");
}

function onReservationListSelectionChanged(originId) {
  displayWorkstationsPage(originId, $IN.data.selectedDay);
}
