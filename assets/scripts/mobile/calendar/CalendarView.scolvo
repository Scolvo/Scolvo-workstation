import {
  /mobile/common/TeamsReservation,
  /mobile/repository/ReservationRepository,
  /mobile/repository/WorkstationRepository,
  /mobile/workstation/WorkstationsForADay
}

var selectedCalendarViewTeamId = null;

function displayCalendarViewPage(originId) {
  selectedCalendarViewTeamId = getUserById(sessionUserId()).teamId;
  var team = getTeamsIdMap().get(selectedCalendarViewTeamId);
  var selectData = {
    "helper_label": team.location
  };
  if(team.mapPicturePath != null) {
    selectData.put("helper_icon", "\ue913");
  }
  var data = {
    "CalendarViewPage": {
      "CalendarViewTeamSelect": selectData,
      "CalendarViewTeamSelectOptions": createTeamOptions(selectedCalendarViewTeamId),
      "ReservationList": createCalendarViewReservationList()
    }
  };
  var actionEvents = [
    createValueChangeSourceEvent("CalendarViewTeamSelect", "CalendarViewTeamSelectChanged")
  ];

  display(CalendarViewPage, data, originId, actionEvents);
}

function createCalendarViewReservationList() {
  var calendarViewReservationsListData = [];
  // Day starts are populated for local time-zone
  var today = getDayStartForLocalTimeZone(now());
  var totalWorkstationsForTeam = getWorkstationsForTeam(selectedCalendarViewTeamId).size();

  // Because of the time-zone differences one day - and + is used then working with the period
  var reservations = prepareWorkstationReservationForPeriod(selectedCalendarViewTeamId, dateSubtract(today, DATE_LIST_PREVIOUS_DAYS_PLUS_ONE, "day").getTime(), dateAdd(today, DATE_LIST_FOLLOWING_DAYS_PLUS_ONE, "day").getTime());
  for(var i = DATE_LIST_PREVIOUS_DAYS; i > 0; i -= 1) {
    var currentDay = dateSubtract(today, i, "day");
    var dayData = prepareCalendarDayData(currentDay, reservations, totalWorkstationsForTeam);
    calendarViewReservationsListData.add(dayData);
  }

  var dayData = prepareCalendarDayData(today, reservations, totalWorkstationsForTeam);
  calendarViewReservationsListData.add(dayData);

  for(var i = 1; i <= DATE_LIST_FOLLOWING_DAYS; i += 1) {
    var currentDay = dateAdd(today, i, "day");
    var dayData = prepareCalendarDayData(currentDay, reservations, totalWorkstationsForTeam);
    calendarViewReservationsListData.add(dayData);
  }

  return calendarViewReservationsListData;
}

page CalendarViewPage {
  layout: vertical;
  template: general;
  scolvoMenuVisible: true;

  inputField  CalendarViewTeamSelect {
    inputType: selectOne;
  }

  list ReservationList {
    template: listVerticalNormal;
    itemTemplate: listItemCalendar;
    span: 0;
    filterVisible: false;
    columns: [
      eventDay => eventDate
    ]
  }
}

function onCalendarViewPageLoaded(originId) {}

function onCalendarViewTeamSelectHelperAction(originId) {
  var team = getTeamsIdMap().get(selectedCalendarViewTeamId);
  displayMapPopup(originId, team.name, team.mapPicturePath);
}

function onCalendarViewTeamSelectChanged(originId) {
  selectedCalendarViewTeamId = $IN.data.value;
  var team = getTeamsIdMap().get(selectedCalendarViewTeamId);
  var selectComponentData = {
    "helper_label": team.location
  };
  if(team.mapPicturePath != null) {
    selectComponentData.put("helper_icon", "\ue913");
  }
  else {
    selectComponentData.put("helper_icon", "");
  }
  fireEvent(createValueChangeTargetEvent("CalendarViewTeamSelect", selectComponentData), originId);
  fireEvent(createRefreshItemTargetEvent("ReservationList", createCalendarViewReservationList()), "CalendarViewPage");
}

function onReservationListSelectionChanged(originId) {
  var dayToShow = $IN.data.selectedDay;
  debug("CalendarView - day by the control is: " + dayToShow);
  // This is client's local time-zone
  var centralTimeZoneDay = getDayStartForCentralTimeZone(dayToShow).getTime();
  displayWorkstationsPageForADayForTeam(originId, selectedCalendarViewTeamId, centralTimeZoneDay);
}
