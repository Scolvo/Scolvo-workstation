function getProspectOrRegularClients(companyTableName, rowCount, offsetCount, filterPrefix) {
  var queryBuilder = select()
    .selectAs("company.id")
    .selectAs("company.name")
    .selectAs("company.companyId")
    .selectAs("company.contactPerson")
    .from("company")
    .join("innerJoin", table(companyTableName), custom("company.companyId = " + companyTableName +".companyId"))
    .orderBy("name", "asc")
    .limit(rowCount, offsetCount);

  buildClientsFilter(queryBuilder, filterPrefix);

  return queryBuilder.execute();
}

function getRegularOrProspectClientsDataCount(companyTableName, filterPrefix) {
  var queryBuilder = select()
    .count()
    .from("company")
    .join("innerJoin", table(companyTableName), custom("company.companyId = " + companyTableName +".companyId"));

  buildClientsFilter(queryBuilder, filterPrefix);
  var countDaos = queryBuilder.execute();
  if (countDaos.isEmpty()) {
    return 0;
  }
  return countDaos.get(0).count;
}


function buildClientsFilter(queryBuilder, filterPrefix) {
  if (filterPrefix != null && !filterPrefix.isEmpty()) {
    queryBuilder.where(or(like("company.name", "%" + filterPrefix + "%"),like("company.companyId", "%" + filterPrefix + "%"),like("company.contactPerson", "%" + filterPrefix + "%")));
  }
}

function getCompanyById(id) {
  var companyDaos = select()
  .selectAs("companyId")
  .from("company")
  .where(eq("id", id))
  .execute();

  if(companyDaos.isEmpty()) {
    return null;
  }
  return companyDaos.get(0);
}

function getCompanyByCompanyId(companyId) {
  var companyDaos = select()
  .from("company")
  .where(eq("companyId", companyId))
  .execute();

  if(companyDaos.isEmpty()) {
    return null;
  }
  return companyDaos.get(0);
}

function getProspectClientByCompanyId(companyId) {
  var prospectClientDaos = select()
  .from("companyProspect")
  .where(eq("companyId", companyId))
  .execute();

  if(prospectClientDaos.isEmpty()) {
    return null;
  }
  return prospectClientDaos.get(0);
}

function getRegularClientByCompanyId(companyId) {
  var regularClientDaos = select()
  .selectAs("id")
  .selectAs("companyId")
  .selectAs("mb")
  .selectAs("CASE established WHEN 0 THEN '' ELSE strftime('%d.%m.%Y', datetime(established/1000, 'unixepoch')) END established")
  .selectAs("email")
  .selectAs("branch")
  .selectAs("totalExposure")
  .selectAs("internalRating")
  .selectAs("overdue")
  .selectAs("daysInDelay")
  .selectAs("turnoverRsdYearly")
  .selectAs("turnoverFxYearly")
  .selectAs("incomeFromPayment")
  .selectAs("employeesOnPayroll")
  .selectAs("tariffForPayment")
  .selectAs("CASE lastCorporateBalanceDate WHEN 0 THEN '' ELSE strftime('%d.%m.%Y', datetime(lastCorporateBalanceDate/1000, 'unixepoch')) END lastCorporateBalanceDate")
  .selectAs("revenue")
  .selectAs("netIncome")
  .selectAs("leverageRatio")
  .selectAs("liquidityRatio")
  .selectAs("equityRatio")
  .selectAs("eBank")
  .selectAs("businessCard")
  .selectAs("posTerminal")
  .from("companyRegular")
  .where(eq("companyId", companyId))
  .execute();

  if(regularClientDaos.isEmpty()) {
    return null;
  }
  return regularClientDaos.get(0);
}

function getClientExposuresByCompanyId(companyId) {
  return select()
  .selectAs("id")
  .selectAs("companyRegularId")
  .selectAs("account")
  .selectAs("stage")
  .selectAs("productType")
  .selectAs("amount")
  .selectAs("currency")
  .selectAs("interestRate")
  .selectAs("CASE dueDate WHEN 0 THEN '' ELSE strftime('%d.%m.%Y', datetime(dueDate/1000, 'unixepoch')) END dueDate")
  .from("exposure")
  .where(eq("companyRegularId", companyId))
  .orderBy("stage", "asc")
  .orderBy("account", "asc")
  .execute();
}

function searchCompanyByContent(content, rowCount, offsetCount) {
  if (content == null || content.isEmpty()) {
    return [];
  }
  var searchCondition = "%" + content + "%";
  return select()
    .from("company")
    .where(or(like("name", searchCondition), like("companyId", searchCondition), like("contactPerson", searchCondition), like("city", searchCondition), like("businessActivity", searchCondition)))
    .orderBy("name", "asc")
    .limit(rowCount, offsetCount)
    .execute();
}

function getCompanyIdForAttachment(attachmentDao) {
  if(attachmentDao.callLogId != null && !attachmentDao.callLogId.isEmpty()) {
    var callLog = getCallLogById(attachmentDao.callLogId);
    if (callLog == null) {
      callLog = {};
    }
    return callLog.getOrDefault("companyId", "");
  }
  if(attachmentDao.offerId != null && !attachmentDao.offerId.isEmpty()) {
    var offer = getOfferById(attachmentDao.offerId);
    if (offer == null) {
      offer = {};
    }
    return offer.getOrDefault("companyId", "");
  }
  if(attachmentDao.meetingMemoRegularId != null && !attachmentDao.meetingMemoRegularId.isEmpty()) {
    var regularMeetingMemo = getRegularMeetingMemoById(attachmentDao.meetingMemoRegularId);
    if (regularMeetingMemo == null) {
      regularMeetingMemo = {};
    }
    return regularMeetingMemo.getOrDefault("companyRegularId", "");
  }
  if(attachmentDao.meetingMemoProspectId != null && !attachmentDao.meetingMemoProspectId.isEmpty()) {
    var prospectMeetingMemo = getProspectMeetingMemoById(attachmentDao.meetingMemoProspectId);
    if (prospectMeetingMemo == null) {
      prospectMeetingMemo = {};
    }
    return prospectMeetingMemo.getOrDefault("companyProspectId", "");
  }
  return "";
}

function deleteExposures() {
  delete().from("exposure").execute();
}
