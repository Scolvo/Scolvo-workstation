function getReservationById(reservationId) {
  var reservations = select()
  .from("reservation")
  .where(eq("id", reservationId))
  .execute();

  if(reservations.isEmpty()) {
    return null;
  }
  return reservations.get(0);
}

// 1) NOTE: Based on the time difference between the CENTRAL_TIME_ZONE and GMT time the calculation for the first and last day might be wrong - I suggest to have an extra day before the start and after the end
// 2) The result is calulated based on the fact, that all reservations for a day gets the same timestamp. The date string must be calculated in srcipt space to avoid time-zone conversion problems
function getWorkstationReservationsForTeamByPeriod(teamId, startPeriod, endPeriod) {
  return select()
  .selectAs("count(*)", "count")
  .selectAs("start", "reservationDate")
  .from("reservation")
  .join("innerJoin", table("workplace"), and(custom("workplace.id = reservation.workplaceId"), eq("workplace.teamId", teamId)))
  .where(and(custom("start >=" + startPeriod), custom("start <= " + endPeriod)))
  .groupBy(["reservationDate"])
  .execute();
}

function getWorkstationReservationsForDayByTeam(teamId, day) {
  return select()
  .selectAs("reservation.id", "id")
  .selectAs("reservation.workplaceId", "workplaceId")
  .selectAs("reservation.userId", "userId")
  .from("reservation")
  .join("innerJoin", table("workplace"), and(custom("workplace.id = reservation.workplaceId"), eq("workplace.teamId", teamId)))
  .where(and(custom("reservation.workplaceId IS NOT NULL"), custom("start = " + day)))
  .groupBy(["workplaceId"])
  .execute();
}

function getMeetingRoomReservationsForDay(meetingRoomId, dayStart, dayEnd) {
  return select()
  .from("reservation")
  .where(and(eq("meetingRoomId", meetingRoomId), custom("start >= " + dayStart), custom("end <= " + dayEnd)))
  .orderBy("start", "asc")
  .execute();
}

function getMeetingRoomsReservedForPeriod(meetingRoomId, startTime, endTime) {
  return select()
  .from("reservation")
  .where(and(
    eq("meetingRoomId", meetingRoomId),
    or(and(custom(startTime + " <= start"), custom("start < " + endTime)), //record start is between startPeriod and endPeriod
       and(custom(startTime + " < end"), custom("end <= " + endTime)),     // record end is between startPeriod and endPeriod
       and(custom("start < " + startTime), custom(endTime + " < end")) )))  // contained
  .execute();
}

function getMeetingRoomsReservationsByDay(dayStart, dayEnd) {
  return select()
  .selectAs("SUM((end - start)/60000)", "count")
  .selectAs("reservation.meetingRoomId", "meetingRoomId")
  .from("reservation")
  .where(and(custom("reservation.meetingRoomId IS NOT NULL"), and(custom("start >=" + dayStart), custom("start <= " + dayEnd))))
  .groupBy(["meetingRoomId"])
  .execute();
}

function getMeetingRoomsReservationsByPeriod(startPeriod, endPeriod) {
  return select()
  .selectAs("SUM((end - start)/60000)", "count")
  .selectAs("strftime('%Y.%m.%d.', datetime(start / 1000, 'unixepoch', 'localtime'))", "reservationStr")
  .from("reservation")
  .where(and(custom("meetingRoomId IS NOT NULL"), and(custom("start >=" + startPeriod), custom("start <= " + endPeriod))))
  .groupBy(["reservationStr"])
  .execute();
}

function getReservationsByUser(userId, startTime) {
  return select()
  .from("reservation")
  .where(and(eq("userId", userId), custom("start >= " + startTime)))
  .orderBy("start", "asc")
  .execute();
}
