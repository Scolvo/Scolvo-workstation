function getWorkstationReservationsForTeamByDay(teamId, day) {
  return select()
  .selectAs("reservation.id", "id")
  .selectAs("reservation.userId", "userId")
  .selectAs("reservation.workplaceId", "workplaceId")
  .selectAs("reservation.start", "start")
  .from("reservation")
  .join("innerJoin", table("user"), and(custom("reservation.userId = user.id"), eq("user.teamId", teamId)))
  .where(and(custom("reservation.workplaceId IS NOT NULL"), custom("reservation.start = " + day)))
  .execute();
}

function getWorkstationReservedForDay(workstationId, day) {
  var workstation = select()
  .selectAs("id")
  .selectAs("userId")
  .selectAs("workplaceId")
  .selectAs("start")
  .from("reservation")
  .where(and(eq("workplaceId", workstationId), custom("start = " + day)))
  .execute();

  if(workstation.isEmpty()) {
    return null;
  }
  return workstation.get(0);
}

function getMeetingRoomReservationsForDay(meetingRoomId, dayStart, dayEnd) {
  return select()
  .from("reservation")
  .where(and(eq("meetingRoomId", meetingRoomId), custom("start >= " + dayStart), custom("end <= " + dayEnd)))
  .execute();
}

function getWorkstationReservationsForTeamByPeriod(teamId, startPeriod, endPeriod) {
  return select()
  .selectAs("count(*)", "count")
  .selectAs("start", "reservationDate")
  .selectAs("strftime('%Y.%m.%d.', datetime(start / 1000, 'unixepoch') )", "reservationStr")
  .from("reservation")
  .join("innerJoin", table("workplace"), and(custom("workplace.id = reservation.workplaceId"), eq("workplace.teamId", teamId)))
  .where(and(custom("start >=" + startPeriod), custom("start <= " + endPeriod)))
  .groupBy(["start"])
  .execute();
}

function getReservationById(reservationId) {
  var reservations = select().from("reservation").where(eq("id", reservationId)).execute();

  if(reservations.isEmpty()) {
    return null;
  }
  return reservations.get(0);
}
