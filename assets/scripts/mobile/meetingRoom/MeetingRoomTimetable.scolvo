import {
  /mobile/meetingRoom/ReserveMeetingRoom,
  /mobile/meetingRoom/DeleteMeetingRoomReservation
}

var selectedMeetingRoomId = null;

function displayMeetingRoomTimetablePage(originId, meetingRoomId) {
  selectedMeetingRoomId = meetingRoomId;
  var meetingRoom = getMeetingRoomsIdMap().get(meetingRoomId);
  var selectData = {
    "helper_label": meetingRoom.location
  };
  if(meetingRoom.mapPicturePath != null) {
    selectData.put("helper_icon", "\ue913");
  }
  var data = {
    "MeetingRoomTimetablePage": {
      "headerText": dateToString(selectedMeetingRoomDay, "yyyy MMMM dd.", CENTRAL_TIME_ZONE),
      "MeetingRoomTimetableSelectOptions": createMeetingRoomOptions(meetingRoomId),
      "MeetingRoomTimetableSelect": selectData,
      "MeetingRoomTimetableList": createMeetingRoomTimetableData()
    }
  };
  var actionEvents = [
    createValueChangeSourceEvent("MeetingRoomTimetableSelect", "MeetingRoomTimetableSelectChanged")
  ];
  display(MeetingRoomTimetablePage, data, originId, actionEvents);
}

function createMeetingRoomOptions(selectedId) {
  return getMeetingRooms().map(function (meetingRoomDao) {
    var extendedName = meetingRoomDao.name + " (" + meetingRoomDao.capacity + ")";
    return createSelectOption(meetingRoomDao.id,  extendedName, selectedId == meetingRoomDao.id);
  });
}

function createMeetingRoomTimetableData() {
  return getMeetingRoomReservationsForDay(selectedMeetingRoomId, getDayStartForCentralTimeZone(selectedMeetingRoomDay).getTime(), getDayEndForCentralTimeZone(selectedMeetingRoomDay).getTime()).map(function (reservationDao) {
    var reservationData = {
      "id": reservationDao.id,
      "reservationInterval": resolveReservationIntervalText(reservationDao.start, reservationDao.end),
      "reservedText": resolveMeetingRoomReservationText(reservationDao.userId)
    };
    if(reservationDao.userId == sessionUserId()) {
      reservationData.put("reservationId", reservationDao.id);
      reservationData.put("actions", ["DeleteMeetingRoomReservation"]);
    }
    return reservationData;
  });
}

function resolveMeetingRoomReservationText(userId)  {
  var user = getUserById(userId);
  if(user.visible) {
    return DICTIONARY.reserved + ", " + user.name;
  }
  return DICTIONARY.reserved;
}

page MeetingRoomTimetablePage {
  layout: vertical;
  template: general;

  inputField  MeetingRoomTimetableSelect {
    inputType: selectOne;
  }

  list MeetingRoomTimetableList {
    template: listVerticalNormal;
    filterVisible: false;
    span: 0;
    itemTemplate: listItemMultiLine;
    actions: [
      AddReservation
    ]
    columns: [
      mainText => reservationInterval,
      subText => reservedText
    ]
  }
}

function onMeetingRoomTimetablePageLoaded(originId) {}

function onMeetingRoomTimetableSelectHelperAction(originId) {
  var meetingRoom = getMeetingRoomsIdMap().get(selectedMeetingRoomId);
  displayMapPopup(originId, meetingRoom.name, meetingRoom.mapPicturePath);
}

function onMeetingRoomTimetableListSelectionChanged(originId) {}

function onMeetingRoomTimetableSelectChanged(originId) {
  selectedMeetingRoomId = $IN.data.value;
  var meetingRoom = getMeetingRoomsIdMap().get(selectedMeetingRoomId);
  var selectData = {
    "helper_label": meetingRoom.location
  };
  if(meetingRoom.mapPicturePath != null) {
    selectData.put("helper_icon", "\ue913");
  }
  else {
    selectData.put("helper_icon", "");
  }
  fireEvent(createValueChangeTargetEvent("MeetingRoomTimetableSelect", selectData), originId);
  fireEvent(createRefreshItemTargetEvent("MeetingRoomTimetableList", createMeetingRoomTimetableData()), "MeetingRoomTimetablePage");
}

function onDeleteMeetingRoomReservation(originId) {
  displayDeleteMeetingRoomReservationPopup(originId, $IN.data.reservationId, $IN.data.reservationInterval, selectedMeetingRoomDay, false);
}

function onAddReservation(originId) {
  displayReserveMeetingRoomPage(originId);
}
