
var startingTimeStr = null;
var startingTimeStamp = null;
var endingTimeStr = null;
var endingTimeStamp = null;
var numberOfParticipants = null;
var reserveMeetingRoomDayStart = null;
var reserveMeetingRoomDayEnd = null;

function displayReserveMeetingRoomPage(originId) {
  startingTimeStr = null;
  startingTimeStamp = null;
  endingTimeStr = null;
  endingTimeStamp = null;
  numberOfParticipants = null;
  reserveMeetingRoomDayStart = getReservationStartForCentralTimeZone(selectedMeetingRoomDay);
  reserveMeetingRoomDayEnd = getReservationEndForCentralTimeZone(selectedMeetingRoomDay);

  var headerString = DICTIONARY.page_ReserveMeetingRoomPage_headerText_prefix + " " + dateToString(selectedMeetingRoomDay, "yyyy MMMM dd.", CENTRAL_TIME_ZONE);
  var data = {
    "ReserveMeetingRoomPage": {
      "headerText": headerString,
      "NumberOfParticipantsSelectOptions": createNumberOfParticipantsOptions()
    }
  };
  var actionEvents = [
    createValueChangeSourceEvent("TimeOfStart", "TimeOfStartSelectionChanged"),
    createValueChangeSourceEvent("TimeOfEnd", "TimeOfEndSelectionChanged"),
    createValueChangeSourceEvent("NumberOfParticipantsSelect", "NumberOfParticipantsSelectChanged"),
    createClickSourceEvent("SaveMeetingRoomReservationButton", "SaveMeetingRoomReservationButtonClicked"),
    createValueChangeTargetEvent("TimeOfStart", null)
  ];

  display(ReserveMeetingRoomPage, data, originId, actionEvents);
}

function createNumberOfParticipantsOptions() {
  var selectedMeetingRoom = getMeetingRoomById(selectedMeetingRoomId);
  var numberOfParticipantsOptions = [];
  for(var i = 1; i <= selectedMeetingRoom.capacity; i += 1) {
    var selectIdString = "" + i;
    numberOfParticipantsOptions.add(createSelectOption(selectIdString, decimalFormat(i, "##"), false));
  }
  return numberOfParticipantsOptions;
}

page ReserveMeetingRoomPage {
  layout: vertical;
  template: general;

  inputField TimeOfStart {
    template: inputFieldSimple;
    inputType: time;
  }

  inputField TimeOfEnd {
    template: inputFieldSimple;
    inputType: time;
  }

  inputField  NumberOfParticipantsSelect {
    inputType: selectOne;
  }

  button SaveMeetingRoomReservationButton {
    template: primaryMedium;
  }
}

function onReserveMeetingRoomPageLoaded(originId) {}

function onTimeOfStartSelectionChanged(originId) {
  debug("Time of start has been changed: " + $IN.data);
  startingTimeStr = dateToString($IN.data.time, "HH:mm", getTimeZone());
  debug("Time of start string: " + startingTimeStr);
  startingTimeStamp = createTimeForSelectedDay(startingTimeStr);
  debug("Generated starting time stamp: " + startingTimeStamp);
}

function onTimeOfEndSelectionChanged(originId) {
  debug("Time of end has been changed: " + $IN.data);
  endingTimeStr = dateToString($IN.data.time, "HH:mm", getTimeZone());
  endingTimeStamp = createTimeForSelectedDay(endingTimeStr);
}

function onNumberOfParticipantsSelectChanged(originId) {
  numberOfParticipants = $IN.data.value;
  if (numberOfParticipants!=null && !numberOfParticipants.isEmpty()) {
    fireEvent(createErrorValueChangeTargetEvent("NumberOfParticipantsSelect", ""), "ReserveMeetingRoomPage");
  }
}

function createTimeForSelectedDay(timeString) {
  var dateString = dateToString(selectedMeetingRoomDay, "yyyy-MM-dd", CENTRAL_TIME_ZONE);
  var fullTimeString = dateString + " " + timeString;
  var timeStamp = parseStringToDate(fullTimeString, "yyyy-MM-dd HH:mm", CENTRAL_TIME_ZONE).getTime();
  return timeStamp;
}

function onSaveMeetingRoomReservationButtonClicked(originId) {
  if (!isReservationValid()) {
    return null;
  }
  if (!getMeetingRoomsReservedForPeriod(selectedMeetingRoomId, startingTimeStamp, endingTimeStamp).isEmpty()) {
    fireEvent(createShortToastNotificationTargetEvent(DICTIONARY.reservation_periodAlreadyReservedMsg), originId);
    return null;
  }
  var reservationDao = {
    "id": uuid(),
    "userId": sessionUserId(),
    "meetingRoomId": selectedMeetingRoomId,
    "start": startingTimeStamp,
    "end": endingTimeStamp,
    "numberOfParticipants": numberOfParticipants,
    "changeType": "INSERT"
  };

  insertTypeDefinition("reservation", reservationDao);
  sendDataChange("reservation", [reservationDao]);

  fireEvent(createRefreshItemTargetEvent("MeetingRoomTimetableList", createMeetingRoomTimetableData()), "MeetingRoomTimetablePage");
  fireEvent(createRefreshItemTargetEvent("MeetingRoomsDailyList", createMeetingRoomsDailyData()), "MeetingRoomsDailyPage");
  fireEvent(createRefreshItemTargetEvent("MeetingRoomsDashboardList", createMeetingRoomsDashboardListData()), "MeetingRoomsDashboardPage");
  fireEvent(createRefreshItemTargetEvent("MeetingRoomCalendarViewList", createMeetingRoomCalendarViewReservationList()), "MeetingRoomsDashboardPage");
  fireEvent(createShortToastNotificationTargetEvent(DICTIONARY.reservation_successMsg), originId);

  finishPage("ReserveMeetingRoomPage", originId);
}

function isReservationValid() {
  var isValid = true;
  if (!isTimeValid(startingTimeStr, startingTimeStamp, "TimeOfStart")) {
    isValid = false;
  }
  if (!isTimeValid(endingTimeStr, endingTimeStamp, "TimeOfEnd")) {
    isValid = false;
  }
  // Relation is only checked when the start and end are both OK
  if (isValid && !isStartEndTimeRelationValid()) {
    isValid = false;
  }
  if(!isNumberOfParticipantsValid()) {
    isValid = false;
  }
  return isValid;
}

function isTimeValid(selectedTimeStr, selectedTimeStamp, componentId) {
  debug("Checking selected time for component: " + componentId + " selected time is: " + selectedTimeStr);
  if (selectedTimeStr == null || selectedTimeStr.isEmpty()) {
    fireEvent(createErrorValueChangeTargetEvent(componentId, DICTIONARY.reservationTime_emptyMsg), originId);
    return false;
  }

  debug("Validating Reservation time (local) for " + componentId + ": " + selectedTimeStamp + " dayStart : " + reserveMeetingRoomDayStart + " dayEnd : " + reserveMeetingRoomDayEnd);
  if (dateBefore(selectedTimeStamp, reserveMeetingRoomDayStart) || dateAfter(selectedTimeStamp, reserveMeetingRoomDayEnd)) {
    var textToShow = DICTIONARY.reservationTime_invalidInterval;
    fireEvent(createErrorValueChangeTargetEvent(componentId, textToShow), originId);
    return false;
  }

  return true;
}

function isStartEndTimeRelationValid() {
  if (dateSame(startingTimeStamp, endingTimeStamp, "minute")) {
    fireEvent(createErrorValueChangeTargetEvent("TimeOfEnd", DICTIONARY.reservationTime_sameStartEnd), originId);
    return false;
  }
  if (dateAfter(startingTimeStamp, endingTimeStamp)) {
    fireEvent(createErrorValueChangeTargetEvent("TimeOfStart", DICTIONARY.reservationTime_startAfterEnd), originId);
    return false;
  }
  return true;
}

function isNumberOfParticipantsValid() {
  if (numberOfParticipants == null) {
    fireEvent(createErrorValueChangeTargetEvent("NumberOfParticipantsSelect", DICTIONARY.reservationNumberOfParticipants_emptyMsg), originId);
    return false;
  }
  return true;
}
