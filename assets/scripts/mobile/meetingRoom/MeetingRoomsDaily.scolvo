import {
  /mobile/meetingRoom/MeetingRoomTimetable
}

var selectedMeetingRoomDay = null;

function displayMeetingRoomsDailyPage(originId, day) {
  selectedMeetingRoomDay = day;
  var data = {
    "MeetingRoomsDailyPage": {
      "headerText": dateToString(selectedMeetingRoomDay, "yyyy MMMM dd.", CENTRAL_TIME_ZONE),
      "MeetingRoomsDailyList": createMeetingRoomsDailyData()
    }
  };
  display(MeetingRoomsDailyPage, data, originId);
}

function createMeetingRoomsDailyData() {
  var reservations = prepareMeetingRoomReservationForDay(getDayStartForCentralTimeZone(selectedMeetingRoomDay).getTime(), getDayEndForCentralTimeZone(selectedMeetingRoomDay).getTime());
  return getMeetingRooms().map(function (meetingRoomDao) {
    var availableCount = MEETING_ROOM_DAILY_MINUTES;
    if (reservations.get(meetingRoomDao.id) != null) {
      availableCount = MEETING_ROOM_DAILY_MINUTES - reservations.get(meetingRoomDao.id);
    }
    var meetingRoomData = {
      "id": meetingRoomDao.id,
      "meetingRoomName": meetingRoomDao.name + " (" + decimalFormat(meetingRoomDao.capacity, "##") + ")",
      "availability": resolveAvailableMeetingRoomLabel(availableCount, MEETING_ROOM_DAILY_MINUTES),
      "availabilityPicture": resolveMeetingRoomsAvailabilityPicture(MEETING_ROOM_DAILY_MINUTES, availableCount)
    };
    return meetingRoomData;
  });
}

page MeetingRoomsDailyPage {
  layout: vertical;
  template: general;

  list MeetingRoomsDailyList {
    template: listVerticalNormal;
    filterVisible: false;
    span: 0;
    itemTemplate: listItemMultiLine;
    columns: [
      mainText => meetingRoomName,
      subText => availability,
      prefixImage => availabilityPicture
    ]
  }
}

function onMeetingRoomsDailyPageLoaded(originId) {}

function onMeetingRoomsDailyListSelectionChanged(originId) {
  displayMeetingRoomTimetablePage(originId, $IN.data.id);
}
