var meetingRoomReservationIdToDelete = null;
var isMeetingRoomDeleteFromMyReservations = false;

function displayDeleteMeetingRoomReservationPopup(originId, reservationId, reservationIntervalText, selectedReservationDay, isDeleteFromMyReservations) {
  meetingRoomReservationIdToDelete = reservationId;
  isMeetingRoomDeleteFromMyReservations = isDeleteFromMyReservations;
  var meetingRoomDao = getMeetingRoomByReservationId(reservationId);

  var reservationDayString = dateToString(selectedReservationDay, "yyyy MMMM dd.", CENTRAL_TIME_ZONE);
  var dateStringWithHour = reservationDayString + " " + reservationIntervalText;
  var calculatedHeaderText = meetingRoomDao.name + " " + dateStringWithHour;
  var actionEvents = [
    createValueChangeTargetEvent("DateLabel", dateStringWithHour),
    createClickSourceEvent("DontDeleteMeetingRoomReservationButton", "DontDeleteMeetingRoomReservationButtonClicked"),
    createClickSourceEvent("DeleteMeetingRoomReservationButton", "DeleteMeetingRoomReservationButtonClicked"),
  ];
  var data = {
    "DeleteMeetingRoomReservationPopup": {
      "headerText": calculatedHeaderText
    }
  };
  display(DeleteMeetingRoomReservationPopup, data, originId, actionEvents);
}

page DeleteMeetingRoomReservationPopup {
  layout: vertical;
  template: popup;

  spacer {
    span: 8;
  }

  label ConfirmationLabel {
    template: heading4Primary|multi;
    alignment: left;
  }

  label DateLabel {
    template: bodyCopy1CondensedSecondary;
    alignment: left;
  }

  container DeleteMeetingRoomReservationButtonContainer {
    layout: horizontalButtonGroup;

    button DontDeleteMeetingRoomReservationButton {
      template: secondaryMedium;
    }

    button DeleteMeetingRoomReservationButton {
      template: primaryMedium;
    }
  }
}

function onDeleteMeetingRoomReservationPopupCancel(originId) {}

function onDontDeleteMeetingRoomReservationButtonClicked(originId) {
  finishPage("DeleteMeetingRoomReservationPopup", originId);
}

function onDeleteMeetingRoomReservationButtonClicked(originId) {
  deleteTypeDefinition("reservation", meetingRoomReservationIdToDelete);
  var reservationDeleteDao = {
    "id": meetingRoomReservationIdToDelete,
    "changeType": "DELETE"
  };
  sendDataChange("reservation", [reservationDeleteDao]);

  if (isMeetingRoomDeleteFromMyReservations) {
    fireEvent(createRemoveItemTargetEvent("UserSpecificReservationsList", meetingRoomReservationIdToDelete), "UserSpecificReservationsPage");
  } else {
    fireEvent(createRefreshItemTargetEvent("MeetingRoomTimetableList", createMeetingRoomTimetableData()), "MeetingRoomTimetablePage");
    fireEvent(createRefreshItemTargetEvent("MeetingRoomsDailyList", createMeetingRoomsDailyData()), "MeetingRoomsDailyPage");
    fireEvent(createRefreshItemTargetEvent("MeetingRoomsDashboardList", createMeetingRoomsDashboardListData()), "MeetingRoomsDashboardPage");
  }

  fireEvent(createShortToastNotificationTargetEvent(DICTIONARY.reservationDelete_successMsg), originId);
  finishPage("DeleteMeetingRoomReservationPopup", originId);
}
