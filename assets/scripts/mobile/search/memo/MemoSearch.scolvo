import {
  /mobile/Builders,
  /mobile/SessionUser,
  /mobile/memo / MeetingMemoBuilder,
  /mobile/repository / MeetingMemoRepository,
  /mobile/memo / ProspectMeetingMemoDetails,
  /mobile/memo / RegularMeetingMemoDetails
}

var memoSearchOfferWants = null;
var memoSearchFrom = null;
var memoSearchTo = null;

function displayMemoSearchFragment(originId, fragmentContainerId) {
  memoSearchOfferWants = null;
  memoSearchFrom = dateSubtract(now(), 1, "week").getTime();
  memoSearchTo = nowInMillis();
  displayFragment(fragmentContainerId, MemoSearchFragment, {}, originId);
}

function buildMemoOfferWantsFilterOptions() {
  return [
    buildSelectOptions("yes", DICTIONARY.yes, "yes" == memoSearchOfferWants),
    buildSelectOptions("no", DICTIONARY.no, "no" == memoSearchOfferWants),
    buildSelectOptions("maybe", DICTIONARY.maybe, "maybe" == memoSearchOfferWants),
    buildSelectOptions("empty", DICTIONARY.empty, "empty" == memoSearchOfferWants)
  ];
}

fragment MemoSearchFragment {
  layout: vertical;
  span: 0;
  template: general;

  list MemoSearchList {
    template: listVerticalNormal;
    itemTemplate: listItemCard;
    span: 0;
    paged: true;
    pageThreshold: 20;
    actions: [
      MemoSearch
    ]
    columns: [
      mainText => title,
      text => description
    ]
  }
}

function onMemoSearchFragmentLoaded(originId) {}

function onMemoSearchListLoadData(originId) {
  return getMeetingMemoSearchDataByDateAndContent($IN.data.rowCount, $IN.data.offsetCount);
}

function onMemoSearch(originId) {
  var data = {
    "MemoSearchPopup": {
      "MemoStatusFilterOptions": buildMemoOfferWantsFilterOptions()
    }
  };

  var actionEvents = [
    buildSourceSelectionChanged("MemoStatusFilter", "MemoStatusFilterSelectionChanged"),
    buildSourceValueChangedEvent("MemoFrom", "MemoFromValueChanged"),
    buildSourceValueChangedEvent("MemoTo", "MemoToValueChanged"),
    buildSourceClickedEvent("SearchButton", "MemoSearchButtonClicked"),
    buildTargetValueChangeEvent("MemoFrom", memoSearchFrom),
    buildTargetValueChangeEvent("MemoTo", memoSearchTo)
  ];
  display(MemoSearchPopup, data, originId, actionEvents);
}

page MemoSearchPopup {
  template: popup;
  layout: vertical;

  inputField MemoFrom {
    template: inputFieldSimple;
    inputType: fullDate;
    isDeletable: true;
  }

  inputField MemoTo {
    template: inputFieldSimple;
    inputType: fullDate;
    isDeletable: true;
  }

  inputField MemoStatusFilter {
    template: inputFieldSimple;
    inputType: selectOne;
    isDeletable: true;
  }

  button SearchButton {
    template: primaryMedium;
  }

}

function onMemoSearchPopupCancel(originId) {}

function onMemoSearchListSelectionChanged(originId) {
  if ($IN.data.companyProspectId != null) {
    prospectClientCompanyId = $IN.data.companyProspectId;
    displayProspectMeetingMemoDetailsPage(originId, $IN.data.id);
  } else {
    regularClientCompanyId = $IN.data.companyRegularId;
    displayRegularMeetingMemoDetailsPage(originId, $IN.data.id);
  }
}

function onMemoStatusFilterSelectionChanged(originId) {
  memoSearchOfferWants = $IN.data.value;
}

function onMemoFromValueChanged(originId) {
  if ($IN.data.date == null) {
    memoSearchFrom = null;
  } else {
    var dateFromString = dateToString($IN.data.date, "dd.MM.yyyy") + " 00:00";
    memoSearchFrom = parseStringToDate(dateFromString, "dd.MM.yyyy HH:mm").getTime();
  }
}

function onMemoToValueChanged(originId) {
  if ($IN.data.date == null) {
    memoSearchTo = null;
  } else {
    var memoDateToString = dateToString($IN.data.date, "dd.MM.yyyy") + " 23:59";
    memoSearchTo = parseStringToDate(memoDateToString, "dd.MM.yyyy HH:mm").getTime();
  }
}

function getMeetingMemoSearchDataByDateAndContent(rowCount, offsetCount) {
  return buildAdvancedMeetingMemoListData(searchMemoByDateAndContent(memoSearchOfferWants, memoSearchFrom, memoSearchTo, !sessionUserIsRM(), rowCount, offsetCount));
}

function onMemoSearchButtonClicked(originId) {
  hideSoftKeyboard();
  finishPage("MemoSearchPopup", originId);
  fireEvent(buildRefreshItemEvent("MemoSearchList", getMeetingMemoSearchDataByDateAndContent(20, 0)), originId);
}
