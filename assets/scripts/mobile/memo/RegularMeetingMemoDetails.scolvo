import {
  /mobile/repository/MeetingMemoRepository,
  /mobile/repository/BankRepository,
  /mobile/repository/AttachmentRepository,
  /mobile/SessionUser,
  /mobile/Builders
}

var selectedRegularMeetingMemoId = null;

function displayRegularMeetingMemoDetailsPage(originId, meetingMemoId) {
  selectedRegularMeetingMemoId = meetingMemoId;
  var meetingMemoDao = getRegularMeetingMemoById(meetingMemoId);

  var bankDao = getBankById(meetingMemoDao.getOrDefault("bankId", "noId"));
  var mainBankDao = getBankById(meetingMemoDao.getOrDefault("mainBankId", "noId"));

  var hasComment = "";
  if(meetingMemoDao.hasComment != null) {
    if(meetingMemoDao.hasComment) {
      hasComment = DICTIONARY.yes;
    } else {
      hasComment = DICTIONARY.no;
    }
  }

  var newCreditArrangement = "";
  if(meetingMemoDao.newCreditArrangement != null) {
    if(meetingMemoDao.newCreditArrangement) {
      newCreditArrangement = DICTIONARY.yes;
    } else {
      newCreditArrangement = DICTIONARY.no;
    }
  }

  var documentarySupport = "";
  if(meetingMemoDao.documentarySupport != null) {
    if(meetingMemoDao.documentarySupport) {
      documentarySupport = DICTIONARY.yes;
    } else {
      documentarySupport = DICTIONARY.no;
    }
  }

  var bankName = "";
  if (bankDao != null) {
    bankName = bankDao.name;
  }

  var preferentialTariff = "";
  if(meetingMemoDao.preferentialTariff != null) {
    if(meetingMemoDao.preferentialTariff) {
      preferentialTariff = DICTIONARY.yes;
    } else {
      preferentialTariff = DICTIONARY.no;
    }
  }

  var anyImportantNotice = "";
  if(meetingMemoDao.anyImportantNotice != null) {
    if(meetingMemoDao.anyImportantNotice) {
      anyImportantNotice = DICTIONARY.yes;
    } else {
      anyImportantNotice = DICTIONARY.no;
    }
  }

  var mainBankName = "";
  if (mainBankDao != null) {
    mainBankName = mainBankDao.name;
  }

  var nextCallDate = "";
  if (meetingMemoDao.nextCallDate != null && meetingMemoDao.nextCallDate != 0) {
    nextCallDate = dateToString(meetingMemoDao.nextCallDate, "dd.MM.yyyy.");
  }

  var formData = {
    "hasComment": hasComment,
    "mainComment": meetingMemoDao.getOrDefault("mainComment", ""),
    "newCreditArrangement": newCreditArrangement,
    "loanType": resolveTypeOfLoan(meetingMemoDao.getOrDefault("loanType", "")),
    "mainNeeds": meetingMemoDao.getOrDefault("mainNeeds", ""),
    "documentarySupport": documentarySupport,
    "ducumentaryBusiness": resolveDocumentBusiness(meetingMemoDao.getOrDefault("ducumentaryBusiness", "")),
    "ducumentaryBusinessNotes": meetingMemoDao.getOrDefault("ducumentaryBusinessNotes", ""),
    "bank": bankName,
    "preferentialTariff": preferentialTariff,
    "posNetwork": resolvePosNetwork(meetingMemoDao.getOrDefault("posNetwork", "")),
    "numberOfDevices": meetingMemoDao.getOrDefault("numberOfDevices", "").toString(),
    "posNotes": meetingMemoDao.getOrDefault("posNotes", ""),
    "anyImportantNotice": anyImportantNotice,
    "importantTopic": meetingMemoDao.getOrDefault("importantTopic", ""),
    "importantNotice": meetingMemoDao.getOrDefault("importantNotice", ""),
    "mainBank": mainBankName,
    "wantsOffer": resolveWantsOffer(meetingMemoDao.getOrDefault("wantsOffer", "")),
    "nextCallDate": nextCallDate,
    "comment": meetingMemoDao.getOrDefault("comment", "")
  };

  var pageActions = [];

  if(sessionUserIsRM()) {
    pageActions.addAll(["EditRegularMeetingMemo", "DeleteRegularMeetingMemo", "RegularMeetingMemoAttachment", "RegularMeetingMemoShare"]);
  }
  else if(sessionUserIsBCM()) {
    pageActions.add("EditRegularMeetingMemo");
  }

  var data = {
    "RegularMeetingMemoDetailsPage": {
      "actions": pageActions,
      "RegularMeetingMemoDetailForm": formData
    }
  };
  display(RegularMeetingMemoDetailsPage, data, originId);
}

page RegularMeetingMemoDetailsPage {
  layout: vertical;
  template: detail;
  scolvoMenuVisible: false;

  form RegularMeetingMemoDetailForm {
    template: detail;
    span: 0;
    fields: [
      field HasComment => hasComment formItemReadOnlyFull,
      field MainComment => mainComment formItemReadOnlyFull,
      field NewCreditArrangement => newCreditArrangement formItemReadOnlyFull,
      field LoanType => loanType formItemReadOnlyFull,
      field MainNeeds => mainNeeds formItemReadOnlyFull,
      field DocumentarySupport => documentarySupport formItemReadOnlyFull,
      field DucumentaryBusiness => ducumentaryBusiness formItemReadOnlyFull,
      field DucumentaryBusinessNotes => ducumentaryBusinessNotes formItemReadOnlyFull,
      field Bank => bank formItemReadOnlyFull,
      field PreferentialTariff => preferentialTariff formItemReadOnlyFull,
      field PosNetwork => posNetwork formItemReadOnlyFull,
      field NumberOfDevices => numberOfDevices formItemReadOnlyFull,
      field PosNotes => posNotes formItemReadOnlyFull,
      field AnyImportantNotice => anyImportantNotice formItemReadOnlyFull,
      field ImportantTopic => importantTopic formItemReadOnlyFull,
      field ImportantNotice => importantNotice formItemReadOnlyFull,
      field MainBank => mainBank formItemReadOnlyFull,
      field WantsOffer => wantsOffer formItemReadOnlyFull,
      field NextCallDate => nextCallDate formItemReadOnlyFull,
      field Comment => comment formItemReadOnlyFull
    ]
  }
}

function onRegularMeetingMemoDetailsPageLoaded(originId) {}

function onEditRegularMeetingMemo(originId) {
  selectedClientType = "regular";
  displayMeetingMemoPage(originId, selectedRegularMeetingMemoId);
  finishPage("RegularMeetingMemoDetailsPage", originId);
}

function onDeleteRegularMeetingMemo(originId) {
  display(DeleteRegularMeetingMemoConfirmPage, {}, originId);
}

function onRegularMeetingMemoAttachment(originId) {
  displayAttachments("RegularMeetingMemoDetail", getAttachmentByRegularMeetingMemoId(selectedRegularMeetingMemoId), DICTIONARY.page_RegularMeetingMemoAttachment_headerText);
}

function onRegularMeetingMemoDetailAddAttachment(originId) {
  insertRegularMeetingMemoAttachment($IN.data, selectedRegularMeetingMemoId);
}

function onRegularMeetingMemoDetailDeleteAttachment(originId) {
  deleteAttachmentById($IN.data.id);
}

function onRegularMeetingMemoShare(originId) {
  var requestData = {
    "type": "shareRegularMeetingMemo",
    "userId": sessionUserId(),
    "regularMeetingMemoMemoId": selectedRegularMeetingMemoId
  };

  sendDataChangeRq(originId, "request", [requestData]);
  fireEvent(buildShortToastNotificationEvent(DICTIONARY.shareToastMessage), originId);
}

page DeleteRegularMeetingMemoConfirmPage {
  template: confirmationPopup;
  layout: vertical;
}

function onDeleteRegularMeetingMemoConfirmPageSave(originId) {
  finishPage("RegularMeetingMemoDetailsPage", originId);
  fireEvent(buildRemoveItemEvent("MeetingMemoRMList", selectedRegularMeetingMemoId), "RegularClientDetailPage");
  deleteSelectedRegularMeetingMemo();
  deleteRegularMeetingmemoAttachmentById(selectedRegularMeetingMemoId);
}

function onDeleteRegularMeetingMemoConfirmPageCancel(originId) {}

function deleteSelectedRegularMeetingMemo() {
  var deleteMeetingMemoDao = {
    "id": selectedRegularMeetingMemoId,
    "changeType": "DELETE"
  };
  deleteExecution("meetingMemoRegular", selectedRegularMeetingMemoId);
  sendDataChangeRq(originId, "meetingMemoRegular", [deleteMeetingMemoDao]);
}

function resolveTypeOfLoan(selectedValue) {
  if(selectedValue.isEmpty()) {
    return selectedValue;
  }
  return DICTIONARY.get("loanType_" + selectedValue);
}

function resolveDocumentBusiness(selectedValue) {
  if(selectedValue.isEmpty()) {
    return selectedValue;
  }
  return DICTIONARY.get("documentarySupport_" + selectedValue);
}

function resolvePosNetwork(selectedValue) {
  if(selectedValue.isEmpty()) {
    return selectedValue;
  }
  return DICTIONARY.get("posNetwork_" + selectedValue);
}
