import {
  /mobile/memo/MeetingMemoCommon,
  /mobile/repository/BankRepository
}

//Prospect client specific progress definitions
var IS_REGISTERED_ACTIVITY_MAIN = "isRegisteredActivityMain";
var SIGNIFICANT_SEASONALITY = "significantSeasonality";
var RETAIL_NETWORK = "retailNetwork";
var MAIN_BUYERS = "mainBuyers";
var BUYER_PAYMENT = "buyerPayment";
var MAIN_SUPPLIERS = "mainSuppliers";
var SUPPLIER_PAYMENT = "supplierPayment";
var MAIN_BANK = "mainBank";
var NEW_PHONE_NUMBER = "newPhoneNumber";
var OFFER = "offer";
var NEXT_CALL = "nextCall";

var buyer1Name = "";
var buyer2Name = "";
var buyer3Name = "";
var buyer4Name = "";
var buyer5Name = "";

var supplier1Name = "";
var supplier2Name = "";
var supplier3Name = "";
var supplier4Name = "";
var supplier5Name = "";

var buyersData;
var suppliersData;

function loadBuyersData() {
  clearBuyersFieldValues();
  buyersData = getBuyersByMeetingMemoId(meetingMemoData.id);
  if(buyersData.size() == 1) {
    buyer1Name = buyersData.get(0).name;
  }
  else if(buyersData.size() == 2) {
    buyer1Name = buyersData.get(0).name;
    buyer2Name = buyersData.get(1).name;
  }
  else if(buyersData.size() == 3) {
    buyer1Name = buyersData.get(0).name;
    buyer2Name = buyersData.get(1).name;
    buyer3Name = buyersData.get(2).name;
  }
  else if(buyersData.size() == 4) {
    buyer1Name = buyersData.get(0).name;
    buyer2Name = buyersData.get(1).name;
    buyer3Name = buyersData.get(2).name;
    buyer4Name = buyersData.get(3).name;
  }
  else if(buyersData.size() == 5) {
    buyer1Name = buyersData.get(0).name;
    buyer2Name = buyersData.get(1).name;
    buyer3Name = buyersData.get(2).name;
    buyer4Name = buyersData.get(3).name;
    buyer5Name = buyersData.get(4).name;
  }
}

function clearBuyersFieldValues() {
  buyer1Name = "";
  buyer2Name = "";
  buyer3Name = "";
  buyer4Name = "";
  buyer5Name = "";
}

function loadSuppliersData() {
  clearSuppliersFieldValues();
  suppliersData = getSuppliersByMeetingMemoId(meetingMemoData.id);
  if(suppliersData.size() == 1) {
    supplier1Name = suppliersData.get(0).name;
  }
  else if(suppliersData.size() == 2) {
    supplier1Name = suppliersData.get(0).name;
    supplier2Name = suppliersData.get(1).name;
  }
  else if(suppliersData.size() == 3) {
    supplier1Name = suppliersData.get(0).name;
    supplier2Name = suppliersData.get(1).name;
    supplier3Name = suppliersData.get(2).name;
  }
  else if(suppliersData.size() == 4) {
    supplier1Name = suppliersData.get(0).name;
    supplier2Name = suppliersData.get(1).name;
    supplier3Name = suppliersData.get(2).name;
    supplier4Name = suppliersData.get(3).name;
  }
  else if(suppliersData.size() == 5) {
    supplier1Name = suppliersData.get(0).name;
    supplier2Name = suppliersData.get(1).name;
    supplier3Name = suppliersData.get(2).name;
    supplier4Name = suppliersData.get(3).name;
    supplier5Name = suppliersData.get(4).name;
  }
}

function clearSuppliersFieldValues() {
  supplier1Name = "";
  supplier2Name = "";
  supplier3Name = "";
  supplier4Name = "";
  supplier5Name = "";
}

function enterProspectMeetingMemo(originId) {
  loadBuyersData();
  loadSuppliersData();
  if(isMeetingMemoProgressDataNew || meetingMemoProgressData.lastEntryPoint == IS_REGISTERED_ACTIVITY_MAIN) {
    displayMainActivityFragment(originId);
  }
  else if(meetingMemoProgressData.lastEntryPoint == SIGNIFICANT_SEASONALITY) {
    displaySignificantSeasonalityFragment(originId);
  }
  else if(meetingMemoProgressData.lastEntryPoint == RETAIL_NETWORK) {
    displayRetailNetworkFragment(originId);
  }
  else if(meetingMemoProgressData.lastEntryPoint == MAIN_BUYERS) {
    displayMainBuyersFragment(originId);
  }
  else if(meetingMemoProgressData.lastEntryPoint == BUYER_PAYMENT) {
    displayBuyerPaymentFragment(originId);
  }
  else if(meetingMemoProgressData.lastEntryPoint == MAIN_SUPPLIERS) {
    displayMainSuppliersFragment(originId);
  }
  else if(meetingMemoProgressData.lastEntryPoint == SUPPLIER_PAYMENT) {
    displaySupplierPaymentFragment(originId);
  }
  else if(meetingMemoProgressData.lastEntryPoint == MAIN_BANK) {
    displayMainBankFragment(originId);
  }
  else if(meetingMemoProgressData.lastEntryPoint == NEW_PHONE_NUMBER) {
    displayNewPhoneNumberFragment(originId);
  }
  else if(meetingMemoProgressData.lastEntryPoint == OFFER) {
    displayMeetingMemoOfferFragment(originId);
  }
  else if(meetingMemoProgressData.lastEntryPoint == NEXT_CALL) {
    displayProspectNextCallFragment(originId);
  }
}

function handleProspectMeetingMemoBackNavigation(originId) {
  if(meetingMemoProgressData.lastEntryPoint == IS_REGISTERED_ACTIVITY_MAIN) {
    displayTimeOfMeetingFragment(originId, "MeetingMemoFragmentContainer");
  }
  else if(meetingMemoProgressData.lastEntryPoint == SIGNIFICANT_SEASONALITY) {
    displayMainActivityFragment(originId);
  }
  else if(meetingMemoProgressData.lastEntryPoint == RETAIL_NETWORK) {
    displaySignificantSeasonalityFragment(originId);
  }
  else if(meetingMemoProgressData.lastEntryPoint == MAIN_BUYERS) {
    displayRetailNetworkFragment(originId);
  }
  else if(meetingMemoProgressData.lastEntryPoint == BUYER_PAYMENT) {
    displayMainBuyersFragment(originId);
  }
  else if(meetingMemoProgressData.lastEntryPoint == MAIN_SUPPLIERS) {
    displayBuyerPaymentFragment(originId);
  }
  else if(meetingMemoProgressData.lastEntryPoint == SUPPLIER_PAYMENT) {
    displayMainSuppliersFragment(originId);
  }
  else if(meetingMemoProgressData.lastEntryPoint == MAIN_BANK) {
    displaySupplierPaymentFragment(originId);
  }
  else if(meetingMemoProgressData.lastEntryPoint == NEW_PHONE_NUMBER) {
    displayMainBankFragment(originId);
  }
  else if(meetingMemoProgressData.lastEntryPoint == OFFER) {
    displayNewPhoneNumberFragment(originId);
  }
  else if(meetingMemoProgressData.lastEntryPoint == NEXT_CALL) {
    displayMeetingMemoOfferFragment(originId);
  }
}

//========================== Meeting memo/Main activity
function displayMainActivityFragment(originId) {
  saveMeetingMemoProgressData(IS_REGISTERED_ACTIVITY_MAIN);
  var data = {
    "MainActivityFragment": {
      "MainActivityYesNoInputFieldOptions": buildYesNoSelectOneOptions("registeredActivityIsMain")
    }
  };
  var actionEvents = [
    buildSourceSelectionChanged("MainActivityYesNoInputField", "MainActivityYesNoInputFieldSelectionChanged"),
    buildSourceValueChangedEvent("MainActivityCoreBusinessInputField", "MainActivityCoreBusinessInputFieldValueChanged"),
    buildSourceClickedEvent("MainActivityNextQuestionButton", "MainActivityNextQuestionButtonClicked"),
    buildSourceClickedEvent("MainActivityBackButton", "MainActivityBackButtonClicked"),
    buildTargetValueChangeEvent("MainActivityCoreBusinessInputField", getMeetingMemoTextValueByKey("coreBusiness"))
  ];

  if (!meetingMemoData.containsKey("registeredActivityIsMain") || meetingMemoData.registeredActivityIsMain) {
    actionEvents.add(buildTargetVisibilityChangeEvent("MainActivityCoreBusinessInputField", "gone"));
  }
  displayFragment("MeetingMemoFragmentContainer", MainActivityFragment, data, originId, actionEvents);
}

fragment MainActivityFragment {
  layout: vertical;
  template: detail;
  isScrollable: true;

  label QuestionLabel {
    template: display4Secondary|multi;
    alignment: center;
  }

  inputField  MainActivityYesNoInputField {
    inputType: selectOne;
  }

  inputField MainActivityCoreBusinessInputField {
    inputType: text;
  }

  container MainActivityButtonContainer {
    layout: horizontalButtonGroup;

    button MainActivityBackButton {
      template: secondaryMedium;
    }

    button MainActivityNextQuestionButton {
      template: primaryMedium;
    }
  }
}

function onMainActivityFragmentLoaded(originId) {}

function onMainActivityYesNoInputFieldSelectionChanged(originId) {
  var selected = $IN.data.value;
  saveYesNoQuestionAnswer(selected, "registeredActivityIsMain");
  if(selected == "no") {
    fireEvent(buildTargetVisibilityChangeEvent("MainActivityCoreBusinessInputField", "visible"), originId);
  }
  else if(selected == "yes") {
    fireEvent(buildTargetVisibilityChangeEvent("MainActivityCoreBusinessInputField", "gone"), originId);
  }
}

function onMainActivityCoreBusinessInputFieldValueChanged(originId) {
  saveTextAnswer($IN.data.message, "coreBusiness");
}

function onMainActivityNextQuestionButtonClicked(originId) {
  removeMeetingMemoField("registeredActivityIsMain", true, "coreBusiness");
  updateProspectMeetingMemoData();
  displaySignificantSeasonalityFragment(originId);
  updateMemoList(false);
}

function onMainActivityBackButtonClicked(originId) {
  handleProspectMeetingMemoBackNavigation(originId);
}

//========================== Meeting memo/Significant seasonality
function displaySignificantSeasonalityFragment(originId) {
  saveMeetingMemoProgressData(SIGNIFICANT_SEASONALITY);

  var beginSeason = "";
  if(meetingMemoData.get("beginningOfSeason") != null ) {
    beginSeason = decimalFormat(meetingMemoData.beginningOfSeason, "#");
  }
  var months = [];
  for (var i = 1; i <= 12; i += 1) {
    var monthOption = i.toString();
    months.add(buildSelectOptions(monthOption, monthOption, monthOption == beginSeason));
  }

  var data = {
    "SignificantSeasonalityFragment": {
      "SignificantSeasonalityYesNoInputFieldOptions": buildYesNoSelectOneOptions("significantSeasonality"),
      "SignificantSeasonalityBeginSessionInputFieldOptions": months
    }
  };
  var actionEvents = [
    buildSourceSelectionChanged("SignificantSeasonalityYesNoInputField", "SignificantSeasonalityYesNoInputFieldSelectionChanged"),
    buildSourceSelectionChanged("SignificantSeasonalityBeginSessionInputField", "SignificantSeasonalityBeginSessionSelectionChanged"),
    buildSourceClickedEvent("SignificantSeasonalityNextQuestionButton", "SignificantSeasonalityNextQuestionButtonClicked"),
    buildSourceClickedEvent("SignificantSeasonalityBackButton", "SignificantSeasonalityBackButtonClicked")
  ];

  if (!meetingMemoData.containsKey("significantSeasonality") || !meetingMemoData.significantSeasonality) {
    actionEvents.add(buildTargetVisibilityChangeEvent("SignificantSeasonalityBeginSessionInputField", "gone"));
  }

  displayFragment("MeetingMemoFragmentContainer", SignificantSeasonalityFragment, data, originId, actionEvents);
}

fragment SignificantSeasonalityFragment {
  layout: vertical;
  template: detail;
  isScrollable: true;

  label QuestionLabel {
    template: display4Secondary|multi;
    alignment: center;
  }

  inputField SignificantSeasonalityYesNoInputField {
    inputType: selectOne;
  }

  inputField SignificantSeasonalityBeginSessionInputField {
    inputType: selectOne;
  }

  container SignificantSeasonalityButtonContainer {
    layout: horizontalButtonGroup;

    button SignificantSeasonalityBackButton {
      template: secondaryMedium;
    }

    button SignificantSeasonalityNextQuestionButton {
      template: primaryMedium;
    }
  }
}

function onSignificantSeasonalityFragmentLoaded(originId) {}

function onSignificantSeasonalityYesNoInputFieldSelectionChanged(originId) {
  var selected = $IN.data.value;
  saveYesNoQuestionAnswer(selected, "significantSeasonality");
  if(selected == "no") {
    fireEvent(buildTargetVisibilityChangeEvent("SignificantSeasonalityBeginSessionInputField", "gone"), originId);
  }
  else if(selected == "yes") {
    fireEvent(buildTargetVisibilityChangeEvent("SignificantSeasonalityBeginSessionInputField", "visible"), originId);
  }
}

function onSignificantSeasonalityBeginSessionSelectionChanged(originId) {
  saveInputAsNumber($IN.data.value, "beginningOfSeason");
}

function onSignificantSeasonalityNextQuestionButtonClicked(originId) {
  removeMeetingMemoField("significantSeasonality", false, "beginningOfSeason");
  updateProspectMeetingMemoData();
  displayRetailNetworkFragment(originId);
}

function onSignificantSeasonalityBackButtonClicked(originId) {
  handleProspectMeetingMemoBackNavigation(originId);
}

//========================== Meeting memo/Retail network
function displayRetailNetworkFragment(originId) {
  saveMeetingMemoProgressData(RETAIL_NETWORK);
  var answer = getMeetingMemoTextValueByKey("numberOfStores");
  var data = {
    "RetailNetworkFragment": {
      "RetailNetworkYesNoInputFieldOptions": buildYesNoSelectOneOptions("retailNetwork"),
      "RetailNetworkNumberInputFieldOptions": [
        buildSelectOptions("1to10", DICTIONARY.numberOfStores_option_1to10, "1to10" == answer),
        buildSelectOptions("11to50", DICTIONARY.numberOfStores_option_11to50, "11to50" == answer),
        buildSelectOptions("above51", DICTIONARY.numberOfStores_option_above51, "above51" == answer)
      ]
    }
  };
  var actionEvents = [
    buildSourceSelectionChanged("RetailNetworkYesNoInputField", "RetailNetworkYesNoInputFieldSelectionChanged"),
    buildSourceSelectionChanged("RetailNetworkNumberInputField", "RetailNetworkNumberInputFieldSelectionChanged"),
    buildSourceClickedEvent("RetailNetworkNextQuestionButton", "RetailNetworkNextQuestionButtonClicked"),
    buildSourceClickedEvent("RetailNetworkBackButton", "RetailNetworkBackButtonClicked")
  ];

  if (!meetingMemoData.containsKey("retailNetwork") || !meetingMemoData.retailNetwork) {
    actionEvents.add(buildTargetVisibilityChangeEvent("RetailNetworkNumberInputField", "gone"));
  }

  displayFragment("MeetingMemoFragmentContainer", RetailNetworkFragment, data, originId, actionEvents);
}

fragment RetailNetworkFragment {
  layout: vertical;
  template: detail;
  isScrollable: true;

  label QuestionLabel {
    template: display4Secondary|multi;
    alignment: center;
  }

  inputField RetailNetworkYesNoInputField {
    inputType: selectOne;
  }

  inputField RetailNetworkNumberInputField {
    inputType: selectOne;
  }

  container RetailNetworkButtonContainer {
    layout: horizontalButtonGroup;

    button RetailNetworkBackButton {
      template: secondaryMedium;
    }

    button RetailNetworkNextQuestionButton {
      template: primaryMedium;
    }
  }
}

function onRetailNetworkFragmentLoaded(originId) {}

function onRetailNetworkYesNoInputFieldSelectionChanged(originId) {
  var selected = $IN.data.value;
  saveYesNoQuestionAnswer(selected, "retailNetwork");
  if(selected == "no") {
    fireEvent(buildTargetVisibilityChangeEvent("RetailNetworkNumberInputField", "gone"), originId);
  }
  else if(selected == "yes") {
    fireEvent(buildTargetVisibilityChangeEvent("RetailNetworkNumberInputField", "visible"), originId);
  }
}

function onRetailNetworkNumberInputFieldSelectionChanged(originId) {
  saveTextAnswer($IN.data.value, "numberOfStores");
}

function onRetailNetworkNextQuestionButtonClicked(originId) {
  removeMeetingMemoField("retailNetwork", false, "numberOfStores");
  updateProspectMeetingMemoData();
  displayMainBuyersFragment(originId);
}

function onRetailNetworkBackButtonClicked(originId) {
  handleProspectMeetingMemoBackNavigation(originId);
}

//========================== Meeting memo/Main buyers
function displayMainBuyersFragment(originId) {
  saveMeetingMemoProgressData(MAIN_BUYERS);
  var data = {};
  var actionEvents = [
    buildSourceValueChangedEvent("MainBuyer1InputField", "MainBuyer1InputFieldChanged"),
    buildSourceValueChangedEvent("MainBuyer2InputField", "MainBuyer2InputFieldChanged"),
    buildSourceValueChangedEvent("MainBuyer3InputField", "MainBuyer3InputFieldChanged"),
    buildSourceValueChangedEvent("MainBuyer4InputField", "MainBuyer4InputFieldChanged"),
    buildSourceValueChangedEvent("MainBuyer5InputField", "MainBuyer5InputFieldChanged"),
    buildSourceClickedEvent("MainBuyersNextQuestionButton", "MainBuyersNextQuestionButtonClicked"),
    buildSourceClickedEvent("MainBuyersBackButton", "MainBuyersBackButtonClicked")
  ];

  var mainBuyer2Visibility = "gone";
  var mainBuyer3Visibility = "gone";
  var mainBuyer4Visibility = "gone";
  var mainBuyer5Visibility = "gone";

  if (!buyer1Name.isEmpty()) {
    mainBuyer2Visibility = "visible";
  }
  if (!buyer2Name.isEmpty()) {
    mainBuyer2Visibility = "visible";
    mainBuyer3Visibility = "visible";
  }
  if (!buyer3Name.isEmpty()) {
    mainBuyer3Visibility = "visible";
    mainBuyer4Visibility = "visible";
  }
  if (!buyer4Name.isEmpty()) {
    mainBuyer4Visibility = "visible";
    mainBuyer5Visibility = "visible";
  }
  if (!buyer5Name.isEmpty()) {
    mainBuyer5Visibility = "visible";
  }

  actionEvents.add(buildTargetVisibilityChangeEvent("MainBuyer2InputField", mainBuyer2Visibility));
  actionEvents.add(buildTargetVisibilityChangeEvent("MainBuyer3InputField", mainBuyer3Visibility));
  actionEvents.add(buildTargetVisibilityChangeEvent("MainBuyer4InputField", mainBuyer4Visibility));
  actionEvents.add(buildTargetVisibilityChangeEvent("MainBuyer5InputField", mainBuyer5Visibility));
  actionEvents.add(buildTargetValueChangeEvent("MainBuyer1InputField", buyer1Name));
  actionEvents.add(buildTargetValueChangeEvent("MainBuyer2InputField", buyer2Name));
  actionEvents.add(buildTargetValueChangeEvent("MainBuyer3InputField", buyer3Name));
  actionEvents.add(buildTargetValueChangeEvent("MainBuyer4InputField", buyer4Name));
  actionEvents.add(buildTargetValueChangeEvent("MainBuyer5InputField", buyer5Name));

  displayFragment("MeetingMemoFragmentContainer", MainBuyersFragment, data, originId, actionEvents);
}

fragment MainBuyersFragment {
  layout: vertical;
  template: detail;
  isScrollable: true;

  label QuestionLabel {
    template: display4Secondary|multi;
    alignment: center;
  }

  inputField MainBuyer1InputField {
    inputType: text;
  }

  inputField MainBuyer2InputField {
    inputType: text;
  }

  inputField MainBuyer3InputField {
    inputType: text;
  }

  inputField MainBuyer4InputField {
    inputType: text;
  }

  inputField MainBuyer5InputField {
    inputType: text;
  }

  container MainBuyersButtonContainer {
    layout: horizontalButtonGroup;

    button MainBuyersBackButton {
      template: secondaryMedium;
    }

    button MainBuyersNextQuestionButton {
      template: primaryMedium;
    }
  }
}

function onMainBuyersFragmentLoaded(originId) {}

function onMainBuyer1InputFieldChanged(originId) {
  buyer1Name = $IN.data.message;
  if (buyer1Name.isEmpty() && buyer2Name.isEmpty()) {
    fireEvent(buildTargetVisibilityChangeEvent("MainBuyer2InputField", "gone"), originId);
  }
  if (!buyer1Name.isEmpty()) {
    fireEvent(buildTargetVisibilityChangeEvent("MainBuyer2InputField", "visible"), originId);
  }
}

function onMainBuyer2InputFieldChanged(originId) {
  buyer2Name = $IN.data.message;
  if (buyer2Name.isEmpty() && buyer1Name.isEmpty()) {
    fireEvent(buildTargetVisibilityChangeEvent("MainBuyer2InputField", "gone"), originId);
  }
  if (buyer2Name.isEmpty() && buyer3Name.isEmpty()) {
    fireEvent(buildTargetVisibilityChangeEvent("MainBuyer3InputField", "gone"), originId);
  }
  if (buyer2Name.length() == 1) {
    fireEvent(buildTargetVisibilityChangeEvent("MainBuyer3InputField", "visible"), originId);
  }
}

function onMainBuyer3InputFieldChanged(originId) {
  buyer3Name = $IN.data.message;
  if (buyer3Name.isEmpty() && buyer2Name.isEmpty()) {
    fireEvent(buildTargetVisibilityChangeEvent("MainBuyer3InputField", "gone"), originId);
  }
  if (buyer3Name.isEmpty() && buyer4Name.isEmpty()) {
    fireEvent(buildTargetVisibilityChangeEvent("MainBuyer4InputField", "gone"), originId);
  }
  if (buyer3Name.length() == 1) {
    fireEvent(buildTargetVisibilityChangeEvent("MainBuyer4InputField", "visible"), originId);
  }
}

function onMainBuyer4InputFieldChanged(originId) {
  buyer4Name = $IN.data.message;
  if (buyer4Name.isEmpty() && buyer3Name.isEmpty()) {
    fireEvent(buildTargetVisibilityChangeEvent("MainBuyer4InputField", "gone"), originId);
  }
  if (buyer4Name.isEmpty() && buyer5Name.isEmpty()) {
    fireEvent(buildTargetVisibilityChangeEvent("MainBuyer5InputField", "gone"), originId);
  }
  if (buyer4Name.length() == 1) {
    fireEvent(buildTargetVisibilityChangeEvent("MainBuyer5InputField", "visible"), originId);
  }
}

function onMainBuyer5InputFieldChanged(originId) {
  buyer5Name = $IN.data.message;
  if (buyer5Name.isEmpty() && buyer4Name.isEmpty()) {
    fireEvent(buildTargetVisibilityChangeEvent("MainBuyer5InputField", "gone"), originId);
  }
}

function onMainBuyersNextQuestionButtonClicked(originId) {
  saveMainBuyers();
  displayBuyerPaymentFragment(originId);
}

function onMainBuyersBackButtonClicked(originId) {
  handleProspectMeetingMemoBackNavigation(originId);
}

function saveMainBuyers() {
  clearBuyersData();
  insertBuyerData(buyer1Name);
  insertBuyerData(buyer2Name);
  insertBuyerData(buyer3Name);
  insertBuyerData(buyer4Name);
  insertBuyerData(buyer5Name);
}

function insertBuyerData(buyerName) {
  if(!buyerName.isEmpty()) {
    var buyerDao = {
      "id": uuid(),
      "meetingMemoId": meetingMemoData.id,
      "type": "B",
      "name": buyerName
    };
    buyersData.add(buyerDao);
    buyerDao.put("changeType", "INSERT");
    insertExecution("buyerSupplier", buyerDao);
    sendDataChangeRq(uuid(), "buyerSupplier", [buyerDao]);
  }
}

function clearBuyersData() {
  buyersData.each(function (buyerData) {
    deleteBuyerSupplierData(buyerData.id);
  });
  buyersData.clear();
}

function deleteBuyerSupplierData(buyerSupplierId) {
  var buyerSupplierDao = {
    "id": buyerSupplierId,
    "changeType": "DELETE"
  };
  deleteExecution("buyerSupplier", buyerSupplierDao.id);
  sendDataChangeRq(uuid(), "buyerSupplier", [buyerSupplierDao]);
}
//========================== Meeting memo/Buyer payment
function displayBuyerPaymentFragment(originId) {
  saveMeetingMemoProgressData(BUYER_PAYMENT);
  var answer = getMeetingMemoTextValueByKey("termOfBuyersPayment");
  var data = {
    "BuyerPaymentFragment": {
      "BuyerPaymentTermInputFieldOptions": buildPaymentSelectOptions(answer)
    }
  };
  var actionEvents = [
    buildSourceSelectionChanged("BuyerPaymentTermInputField", "BuyerPaymentTermInputFieldSelectionChanged"),
    buildSourceClickedEvent("BuyerPaymentNextQuestionButton", "BuyerPaymentNextQuestionButtonClicked"),
    buildSourceClickedEvent("BuyerPaymentBackButton", "BuyerPaymentBackButtonClicked")
  ];

  displayFragment("MeetingMemoFragmentContainer", BuyerPaymentFragment, data, originId, actionEvents);
}

fragment BuyerPaymentFragment {
  layout: vertical;
  template: detail;
  isScrollable: true;

  label QuestionLabel {
    template: display4Secondary|multi;
    alignment: center;
  }

  inputField BuyerPaymentTermInputField {
    inputType: selectOne;
  }

  container BuyerPaymentButtonContainer {
    layout: horizontalButtonGroup;

    button BuyerPaymentBackButton {
      template: secondaryMedium;
    }

    button BuyerPaymentNextQuestionButton {
      template: primaryMedium;
    }
  }
}

function onBuyerPaymentFragmentLoaded(originId) {}

function onBuyerPaymentTermInputFieldSelectionChanged(originId) {
  saveTextAnswer($IN.data.value, "termOfBuyersPayment");
}

function onBuyerPaymentNextQuestionButtonClicked(originId) {
  updateProspectMeetingMemoData();
  displayMainSuppliersFragment(originId);
}

function onBuyerPaymentBackButtonClicked(originId) {
  handleProspectMeetingMemoBackNavigation(originId);
}

function buildPaymentSelectOptions(selectedPaymentOption) {
  return [
    buildSelectOptions("inAdvance", DICTIONARY.paymentTerm_option_inAdvance, "inAdvance" == selectedPaymentOption),
    buildSelectOptions("upTo10Days", DICTIONARY.paymentTerm_option_upTo10Days, "upTo10Days" == selectedPaymentOption),
    buildSelectOptions("11To30Days", DICTIONARY.paymentTerm_option_11To30Days, "11To30Days" == selectedPaymentOption),
    buildSelectOptions("31To60Days", DICTIONARY.paymentTerm_option_31To60Days, "31To60Days" == selectedPaymentOption),
    buildSelectOptions("61To90Days", DICTIONARY.paymentTerm_option_61To90Days, "61To90Days" == selectedPaymentOption),
    buildSelectOptions("over91Days", DICTIONARY.paymentTerm_option_over91Days, "over91Days" == selectedPaymentOption)
  ];
}
//========================== Meeting memo/Main suppliers
function displayMainSuppliersFragment(originId) {
  saveMeetingMemoProgressData(MAIN_SUPPLIERS);
  var data = {};
  var actionEvents = [
    buildSourceValueChangedEvent("MainSupplier1InputField", "MainSupplier1InputFieldChanged"),
    buildSourceValueChangedEvent("MainSupplier2InputField", "MainSupplier2InputFieldChanged"),
    buildSourceValueChangedEvent("MainSupplier3InputField", "MainSupplier3InputFieldChanged"),
    buildSourceValueChangedEvent("MainSupplier4InputField", "MainSupplier4InputFieldChanged"),
    buildSourceValueChangedEvent("MainSupplier5InputField", "MainSupplier5InputFieldChanged"),
    buildSourceClickedEvent("MainSuppliersNextQuestionButton", "MainSuppliersNextQuestionButtonClicked"),
    buildSourceClickedEvent("MainSuppliersBackButton", "MainSuppliersBackButtonClicked")
  ];

  var mainSupplier2Visibility = "gone";
  var mainSupplier3Visibility = "gone";
  var mainSupplier4Visibility = "gone";
  var mainSupplier5Visibility = "gone";

  if (!supplier1Name.isEmpty()) {
    mainSupplier2Visibility = "visible";
  }
  if (!supplier2Name.isEmpty()) {
    mainSupplier2Visibility = "visible";
    mainSupplier3Visibility = "visible";
  }
  if (!supplier3Name.isEmpty()) {
    mainSupplier3Visibility = "visible";
    mainSupplier4Visibility = "visible";
  }
  if (!supplier4Name.isEmpty()) {
    mainSupplier4Visibility = "visible";
    mainSupplier5Visibility = "visible";
  }
  if (!supplier5Name.isEmpty()) {
    mainSupplier5Visibility = "visible";
  }

  actionEvents.add(buildTargetVisibilityChangeEvent("MainSupplier2InputField", mainSupplier2Visibility));
  actionEvents.add(buildTargetVisibilityChangeEvent("MainSupplier3InputField", mainSupplier3Visibility));
  actionEvents.add(buildTargetVisibilityChangeEvent("MainSupplier4InputField", mainSupplier4Visibility));
  actionEvents.add(buildTargetVisibilityChangeEvent("MainSupplier5InputField", mainSupplier5Visibility));
  actionEvents.add(buildTargetValueChangeEvent("MainSupplier1InputField", supplier1Name));
  actionEvents.add(buildTargetValueChangeEvent("MainSupplier2InputField", supplier2Name));
  actionEvents.add(buildTargetValueChangeEvent("MainSupplier3InputField", supplier3Name));
  actionEvents.add(buildTargetValueChangeEvent("MainSupplier4InputField", supplier4Name));
  actionEvents.add(buildTargetValueChangeEvent("MainSupplier5InputField", supplier5Name));

  displayFragment("MeetingMemoFragmentContainer", MainSuppliersFragment, data, originId, actionEvents);
}

fragment MainSuppliersFragment {
  layout: vertical;
  template: detail;
  isScrollable: true;

  label QuestionLabel {
    template: display4Secondary|multi;
    alignment: center;
  }

  inputField MainSupplier1InputField {
    inputType: text;
  }

  inputField MainSupplier2InputField {
    inputType: text;
  }

  inputField MainSupplier3InputField {
    inputType: text;
  }

  inputField MainSupplier4InputField {
    inputType: text;
  }

  inputField MainSupplier5InputField {
    inputType: text;
  }

  container MainSuppliersButtonContainer {
    layout: horizontalButtonGroup;

    button MainSuppliersBackButton {
      template: secondaryMedium;
    }

    button MainSuppliersNextQuestionButton {
      template: primaryMedium;
    }
  }
}

function onMainSuppliersFragmentLoaded(originId) {}

function onMainSupplier1InputFieldChanged(originId) {
  supplier1Name = $IN.data.message;
  if (supplier1Name.isEmpty() && supplier2Name.isEmpty()) {
    fireEvent(buildTargetVisibilityChangeEvent("MainSupplier2InputField", "gone"), originId);
  }
  if (!supplier1Name.isEmpty()) {
    fireEvent(buildTargetVisibilityChangeEvent("MainSupplier2InputField", "visible"), originId);
  }
}

function onMainSupplier2InputFieldChanged(originId) {
  supplier2Name = $IN.data.message;
  if (supplier2Name.isEmpty() && supplier1Name.isEmpty()) {
    fireEvent(buildTargetVisibilityChangeEvent("MainSupplier2InputField", "gone"), originId);
  }
  if (supplier2Name.isEmpty() && supplier3Name.isEmpty()) {
    fireEvent(buildTargetVisibilityChangeEvent("MainSupplier3InputField", "gone"), originId);
  }
  if (supplier2Name.length() == 1) {
    fireEvent(buildTargetVisibilityChangeEvent("MainSupplier3InputField", "visible"), originId);
  }
}

function onMainSupplier3InputFieldChanged(originId) {
  supplier3Name = $IN.data.message;
  if (supplier3Name.isEmpty() && supplier2Name.isEmpty()) {
    fireEvent(buildTargetVisibilityChangeEvent("MainSupplier3InputField", "gone"), originId);
  }
  if (supplier3Name.isEmpty() && supplier4Name.isEmpty()) {
    fireEvent(buildTargetVisibilityChangeEvent("MainSupplier4InputField", "gone"), originId);
  }
  if (supplier3Name.length() == 1) {
    fireEvent(buildTargetVisibilityChangeEvent("MainSupplier4InputField", "visible"), originId);
  }
}

function onMainSupplier4InputFieldChanged(originId) {
  supplier4Name = $IN.data.message;
  if (supplier4Name.isEmpty() && supplier3Name.isEmpty()) {
    fireEvent(buildTargetVisibilityChangeEvent("MainSupplier4InputField", "gone"), originId);
  }
  if (supplier4Name.isEmpty() && supplier5Name.isEmpty()) {
    fireEvent(buildTargetVisibilityChangeEvent("MainSupplier5InputField", "gone"), originId);
  }
  if (supplier4Name.length() == 1) {
    fireEvent(buildTargetVisibilityChangeEvent("MainSupplier5InputField", "visible"), originId);
  }
}

function onMainSupplier5InputFieldChanged(originId) {
  supplier5Name = $IN.data.message;
  if (supplier5Name.isEmpty() && supplier4Name.isEmpty()) {
    fireEvent(buildTargetVisibilityChangeEvent("MainSupplier5InputField", "gone"), originId);
  }
}

function onMainSuppliersNextQuestionButtonClicked(originId) {
  saveMainSuppliers();
  displaySupplierPaymentFragment(originId);
}

function onMainSuppliersBackButtonClicked(originId) {
  handleProspectMeetingMemoBackNavigation(originId);
}

function saveMainSuppliers() {
  clearSuppliersData();
  insertSupplierData(supplier1Name);
  insertSupplierData(supplier2Name);
  insertSupplierData(supplier3Name);
  insertSupplierData(supplier4Name);
  insertSupplierData(supplier5Name);
}

function insertSupplierData(supplierName) {
  if(!supplierName.isEmpty()) {
    var supplierDao = {
      "id": uuid(),
      "meetingMemoId": meetingMemoData.id,
      "type": "S",
      "name": supplierName
    };
    suppliersData.add(supplierDao);
    supplierDao.put("changeType", "INSERT");
    insertExecution("buyerSupplier", supplierDao);
    sendDataChangeRq(uuid(), "buyerSupplier", [supplierDao]);
  }
}

function clearSuppliersData() {
  suppliersData.each(function (supplierData) {
    deleteBuyerSupplierData(supplierData.id);
  });
  suppliersData.clear();
}
//========================== Meeting memo/Supplier payment
function displaySupplierPaymentFragment(originId) {
  saveMeetingMemoProgressData(SUPPLIER_PAYMENT);
  var answer = getMeetingMemoTextValueByKey("termOfSuppliersPayment");
  var data = {
    "SupplierPaymentFragment": {
      "SupplierPaymentTermInputFieldOptions": buildPaymentSelectOptions(answer)
    }
  };

  var actionEvents = [
    buildSourceSelectionChanged("SupplierPaymentTermInputField", "SupplierPaymentTermInputFieldSelectionChanged"),
    buildSourceClickedEvent("SupplierPaymentNextQuestionButton", "SupplierPaymentNextQuestionButtonClicked"),
    buildSourceClickedEvent("SupplierPaymentBackButton", "SupplierPaymentBackButtonClicked")
  ];

  displayFragment("MeetingMemoFragmentContainer", SupplierPaymentFragment, data, originId, actionEvents);
}

fragment SupplierPaymentFragment {
  layout: vertical;
  template: detail;
  isScrollable: true;

  label QuestionLabel {
    template: display4Secondary|multi;
    alignment: center;
  }

  inputField SupplierPaymentTermInputField {
    inputType: selectOne;
  }

  container SupplierPaymentButtonContainer {
    layout: horizontalButtonGroup;

    button SupplierPaymentBackButton {
      template: secondaryMedium;
    }

    button SupplierPaymentNextQuestionButton {
      template: primaryMedium;
    }
  }
}

function onSupplierPaymentFragmentLoaded(originId) {}

function onSupplierPaymentTermInputFieldSelectionChanged(originId) {
  saveTextAnswer($IN.data.value, "termOfSuppliersPayment");
}

function onSupplierPaymentNextQuestionButtonClicked(originId) {
  updateProspectMeetingMemoData();
  displayMainBankFragment(originId);
}

function onSupplierPaymentBackButtonClicked(originId) {
  handleProspectMeetingMemoBackNavigation(originId);
}

//========================== Meeting memo/Main bank
function displayMainBankFragment(originId) {
  saveMeetingMemoProgressData(MAIN_BANK);
  var selectedBank = getMeetingMemoTextValueByKey("bankId");

  var data = {
    "MainBankFragment": {
      "MainBankChooserInputFieldOptions": buildBankOptions(selectedBank)
    }
  };

  var actionEvents = [
    buildSourceSelectionChanged("MainBankChooserInputField", "MainBankChooserInputFieldSelectionChanged"),
    buildSourceClickedEvent("MainBankNextQuestionButton", "MainBankNextQuestionButtonClicked"),
    buildSourceClickedEvent("MainBankBackButton", "MainBankBackButtonClicked")
  ];

  displayFragment("MeetingMemoFragmentContainer", MainBankFragment, data, originId, actionEvents);
}

fragment MainBankFragment {
  layout: vertical;
  template: detail;
  isScrollable: true;

  label QuestionLabel {
    template: display4Secondary|multi;
    alignment: center;
  }

  inputField MainBankChooserInputField {
    inputType: selectOne;
  }

  container MainBankButtonContainer {
    layout: horizontalButtonGroup;

    button MainBankBackButton {
      template: secondaryMedium;
    }

    button MainBankNextQuestionButton {
      template: primaryMedium;
    }
  }
}

function onMainBankFragmentLoaded(originId) {}

function onMainBankChooserInputFieldSelectionChanged(originId) {
  saveTextAnswer($IN.data.value, "bankId");
}

function onMainBankNextQuestionButtonClicked(originId) {
  updateProspectMeetingMemoData();
  displayNewPhoneNumberFragment(originId);
}

function onMainBankBackButtonClicked(originId) {
  handleProspectMeetingMemoBackNavigation(originId);
}

//========================== Meeting memo/New phone number
function displayNewPhoneNumberFragment(originId) {
  saveMeetingMemoProgressData(NEW_PHONE_NUMBER);
  var data = {
    "NewPhoneNumberFragment": {
      "NewPhoneNumberYesNoInputFieldOptions": buildYesNoSelectOneOptions("hasNewPhoneNumber")
    }
  };
  var actionEvents = [
    buildSourceSelectionChanged("NewPhoneNumberYesNoInputField", "NewPhoneNumberYesNoInputFieldSelectionChanged"),
    buildSourceValueChangedEvent("NewPhoneNumberInputField", "NewPhoneNumberInputFieldValueChanged"),
    buildSourceClickedEvent("NewPhoneNumberNextQuestionButton", "NewPhoneNumberNextQuestionButtonClicked"),
    buildSourceClickedEvent("NewPhoneNumberBackButton", "NewPhoneNumberBackButtonClicked"),
    buildTargetValueChangeEvent("NewPhoneNumberInputField", getMeetingMemoTextValueByKey("newPhoneNumber"))
  ];

  if(!meetingMemoData.containsKey("hasNewPhoneNumber") || !meetingMemoData.hasNewPhoneNumber) {
    actionEvents.add(buildTargetVisibilityChangeEvent("NewPhoneNumberInputField", "gone"));
  }

  displayFragment("MeetingMemoFragmentContainer", NewPhoneNumberFragment, data, originId, actionEvents);
}

fragment NewPhoneNumberFragment {
  layout: vertical;
  template: detail;
  isScrollable: true;

  label QuestionLabel {
    template: display4Secondary|multi;
    alignment: center;
  }

  inputField NewPhoneNumberYesNoInputField {
    inputType: selectOne;
  }

  inputField NewPhoneNumberInputField {
    inputType: number;
  }

  container NewPhoneNumberButtonContainer {
    layout: horizontalButtonGroup;

    button NewPhoneNumberBackButton {
      template: secondaryMedium;
    }

    button NewPhoneNumberNextQuestionButton {
      template: primaryMedium;
    }
  }
}

function onNewPhoneNumberFragmentLoaded(originId) {}

function onNewPhoneNumberYesNoInputFieldSelectionChanged(originId) {
  var selected = $IN.data.value;
  saveYesNoQuestionAnswer(selected, "hasNewPhoneNumber");
  if(selected == "yes") {
    fireEvent(buildTargetVisibilityChangeEvent("NewPhoneNumberInputField", "visible"), originId);
  }
  else if(selected == "no") {
    fireEvent(buildTargetVisibilityChangeEvent("NewPhoneNumberInputField", "gone"), originId);
  }
}

function onNewPhoneNumberInputFieldValueChanged(originId) {
  saveTextAnswer($IN.data.message, "newPhoneNumber");
}

function onNewPhoneNumberNextQuestionButtonClicked(originId) {
  removeMeetingMemoField("hasNewPhoneNumber", false, "newPhoneNumber");
  updateProspectMeetingMemoData();
  displayMeetingMemoOfferFragment(originId);
}

function onNewPhoneNumberBackButtonClicked(originId) {
  handleProspectMeetingMemoBackNavigation(originId);
}

//========================== Meeting memo/Meeting memo offer
function displayMeetingMemoOfferFragment(originId) {
  saveMeetingMemoProgressData(OFFER);
  var selectedOffer = getMeetingMemoTextValueByKey("wantsOffer");
  var data = {
    "MeetingMemoOfferFragment": {
      "OfferInputFieldOptions": buildOfferOptions(selectedOffer)
    }
  };

  var nextButtonVisibility = "visible";
  var finishButtonVisibility = "gone";
  var nextButtonEnabled = false;

  if(selectedOffer == "yes" || selectedOffer == "no") {
    finishButtonVisibility = "visible";
    nextButtonVisibility = "gone";
  }
  else if(selectedOffer == "maybe") {
    nextButtonEnabled = true;
  }

  var actionEvents = [
    buildTargetEnableChangeEvent("MeetingMemoOfferNextButton", nextButtonEnabled),
    buildSourceSelectionChanged("OfferInputField", "OfferInputFieldSelectionChanged"),
    buildSourceClickedEvent("MeetingMemoOfferNextButton", "MeetingMemoOfferNextButtonClicked"),
    buildSourceClickedEvent("MeetingMemoOfferFinishButton", "MeetingMemoOfferFinishButtonClicked"),
    buildSourceClickedEvent("MeetingMemoOfferBackButton", "MeetingMemoOfferBackButtonClicked"),
    buildTargetVisibilityChangeEvent("MeetingMemoOfferNextButton", nextButtonVisibility),
    buildTargetVisibilityChangeEvent("MeetingMemoOfferFinishButton", finishButtonVisibility)
  ];

  displayFragment("MeetingMemoFragmentContainer", MeetingMemoOfferFragment, data, originId, actionEvents);
}

fragment MeetingMemoOfferFragment {
  layout: vertical;
  template: detail;
  isScrollable: true;

  label QuestionLabel {
    template: display4Secondary|multi;
    alignment: center;
  }

  inputField OfferInputField {
    inputType: selectOne;
  }

  container NewPhoneNumberButtonContainer {
    layout: horizontalButtonGroup;

    button MeetingMemoOfferBackButton {
      template: secondaryMedium;
    }

    button MeetingMemoOfferNextButton {
      template: primaryMedium;
    }

    button MeetingMemoOfferFinishButton {
      template: primaryMedium;
    }
  }
}

function onMeetingMemoOfferFragmentLoaded(originId) {}

function onOfferInputFieldSelectionChanged(originId) {
  var selected = $IN.data.value;
  saveTextAnswer(selected, "wantsOffer");
  if(selected == "yes" || selected == "no") {
    fireEvent(buildTargetVisibilityChangeEvent("MeetingMemoOfferNextButton", "gone"), originId);
    fireEvent(buildTargetVisibilityChangeEvent("MeetingMemoOfferFinishButton", "visible"), originId);
  }
  else if(selected == "maybe") {
    fireEvent(buildTargetEnableChangeEvent("MeetingMemoOfferNextButton", true), originId);
    fireEvent(buildTargetVisibilityChangeEvent("MeetingMemoOfferNextButton", "visible"), originId);
    fireEvent(buildTargetVisibilityChangeEvent("MeetingMemoOfferFinishButton", "gone"), originId);
  }
}

function onMeetingMemoOfferNextButtonClicked(originId) {
  updateProspectMeetingMemoData();
  displayProspectNextCallFragment(originId);
}

function onMeetingMemoOfferBackButtonClicked(originId) {
  handleProspectMeetingMemoBackNavigation(originId);
}

function onMeetingMemoOfferFinishButtonClicked(originId) {
  removeMeetingMemoFields("wantsOffer", "yes", "nextCallDate", "comment");
  removeMeetingMemoFields("wantsOffer", "no", "nextCallDate", "comment");
  saveMemoFinishData();
  updateProspectMeetingMemoData();
  sendCalendarInvitationRequest();
  updateMemoList(true);
  finishPage("MeetingMemoPage", originId);
}

function sendCalendarInvitationRequest() {
  if(meetingMemoData.containsKey("significantSeasonality") && meetingMemoData.significantSeasonality
    && meetingMemoData.containsKey("beginningOfSeason") && initialBeginningOfSeason != meetingMemoData.beginningOfSeason) {
    var requestData = {
      "meetingMemoData": meetingMemoData,
      "type": "sendCalendarInvitationRequest"
    };

    sendDataChangeRq(originId, "request", [requestData]);
  }
}

//========================== Meeting memo/Next call date
var selectedProspectNextCallDate = null;
var selectedProspectNextCallTime = null;

function displayProspectNextCallFragment(originId) {
  saveMeetingMemoProgressData(NEXT_CALL);
  selectedProspectNextCallDate = getMeetingMemoDateByKey("nextCallDate");
  selectedProspectNextCallTime = getMeetingMemoDateByKey("nextCallDate");

  var actionEvents = [
    buildTargetValueChangeEvent("ProspectNextCallDateInput", selectedProspectNextCallDate),
    buildTargetValueChangeEvent("ProspectNextCallTimeInput", selectedProspectNextCallTime),
    buildSourceValueChangedEvent("ProspectNextCallDateInput", "ProspectNextCallDateInputSelectionChanged"),
    buildSourceValueChangedEvent("ProspectNextCallTimeInput", "ProspectNextCallTimeInputSelectionChanged"),
    buildSourceValueChangedEvent("ProspectCommentInputField", "ProspectCommentInputFieldValueChanged"),
    buildTargetValueChangeEvent("ProspectCommentInputField", getMeetingMemoTextValueByKey("comment")),
    buildSourceClickedEvent("ProspectNextCallFinishButton", "ProspectNextCallFinishButtonClicked"),
    buildSourceClickedEvent("ProspectNextCallBackButton", "ProspectNextCallBackButtonClicked")
  ];
  displayFragment("MeetingMemoFragmentContainer", ProspectNextCallFragment, {}, originId, actionEvents);
}

fragment ProspectNextCallFragment {
  layout: vertical;
  template: detail;
  isScrollable: true;

  label QuestionLabel {
    template: display4Secondary|multi;
    alignment: center;
  }

  inputField ProspectNextCallDateInput {
    template: inputFieldSimple;
    inputType: date;
  }

  inputField ProspectNextCallTimeInput {
    template: inputFieldSimple;
    inputType: time;
  }

  inputField ProspectCommentInputField {
    inputType: textArea;
  }

  container ProspectNextCallButtonContainer {
    layout: horizontalButtonGroup;

    button ProspectNextCallBackButton {
      template: secondaryMedium;
    }

    button ProspectNextCallFinishButton {
      template: primaryMedium;
    }
  }
}

function onProspectNextCallFragmentLoaded(originId) {}

function onProspectNextCallDateInputSelectionChanged(originId) {
  selectedProspectNextCallDate = $IN.data.date;
}

function onProspectNextCallTimeInputSelectionChanged(originId) {
  selectedProspectNextCallTime = $IN.data.time;
}

function onProspectCommentInputFieldValueChanged(originId) {
  saveTextAnswer($IN.data.message, "comment");
}

function onProspectNextCallFinishButtonClicked(originId) {
  if(!isNextCallDateValid(selectedProspectNextCallDate, selectedProspectNextCallTime)) {
    fireEvent(buildShortToastNotificationEvent(DICTIONARY.invalidNextDate_toast_message), originId);
    return null;
  }
  saveNextCallDate(selectedProspectNextCallDate, selectedProspectNextCallTime);
  saveMemoFinishData();
  updateProspectMeetingMemoData();
  sendCalendarInvitationRequest();
  updateMemoList(true);
  finishPage("MeetingMemoPage", originId);
}

function onProspectNextCallBackButtonClicked(originId) {
  handleProspectMeetingMemoBackNavigation(originId);
}
