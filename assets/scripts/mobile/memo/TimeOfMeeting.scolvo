import {
  mobile/memo/ProspectClientMeetingMemo,
  mobile/memo/RegularClientMeetingMemo
}

var selectedMeetingDate = null;
var selectedMeetingTime = null;

var clientPageName = null;

function displayTimeOfMeetingFragment(originId, fragmentContainerId) {
  if(meetingMemoData.containsKey("id")) {
    selectedMeetingDate = meetingMemoData.plannedMeetingDate;
    selectedMeetingTime = meetingMemoData.plannedMeetingDate;
  }
  else {
    selectedMeetingDate = nowInMillis();
    selectedMeetingTime = selectedMeetingDate;
  }

  var actionEvents = [
    buildTargetValueChangeEvent("DateInput", selectedMeetingDate),
    buildTargetValueChangeEvent("TimeInput", selectedMeetingTime),
    buildSourceValueChangedEvent("DateInput", "MeetingDateSelectionChanged"),
    buildSourceValueChangedEvent("TimeInput", "MeetingTimeSelectionChanged"),
    buildSourceClickedEvent("TimeOfMeetingFinishButton", "TimeOfMeetingFinishButtonClicked"),
    buildSourceClickedEvent("TimeOfMeetingNextButton", "TimeOfMeetingNextButtonClicked")
  ];
  displayFragment(fragmentContainerId, TimeOfMeetingFragment, {}, originId, actionEvents);
}

fragment TimeOfMeetingFragment {
  layout: vertical;
  template: general;

  label PlannedTimeLabel {
    template: display4Secondary;
    alignment: center;
  }

  inputField DateInput {
    template: inputFieldSimple;
    inputType: fullDate;
  }

  inputField TimeInput {
    template: inputFieldSimple;
    inputType: time;
  }

  container TimeOfMeetingButtonContainer {
    layout: horizontalButtonGroup;

    button TimeOfMeetingFinishButton {
      template: secondaryMedium;
    }

    button TimeOfMeetingNextButton {
      template: primaryMedium;
    }
  }
}

function onTimeOfMeetingFragmentLoaded(originId) {}

function onMeetingDateSelectionChanged(originId) {
  selectedMeetingDate = $IN.data.date;
}

function onMeetingTimeSelectionChanged(originId) {
  selectedMeetingTime = $IN.data.time;
}

function onTimeOfMeetingFinishButtonClicked(originId) {
  savePlannedDate(originId);
  updateMemoList(true);
}

function onTimeOfMeetingNextButtonClicked(originId) {
  savePlannedDate(originId);
  updateMemoList(false);
  initMeetingMemoProgressData();
  if(selectedClientType == "regular") {
    enterRegularMeetingMemo(originId);
  }
  else if(selectedClientType == "prospect") {
    enterProspectMeetingMemo(originId);
  }
  else {
    throw UnknownClientTypeException;
  }
}

function createDateTime(dateInput, timeInput) {
  var dateString = dateToString(dateInput, "yyyy.MM.dd");
  var timeString = dateToString(timeInput, "HH:mm");
  return parseStringToDate(dateString + " " + timeString, "yyyy.MM.dd HH:mm").getTime();
}

function savePlannedDate(originId) {
  var plannedDateTime = createDateTime(selectedMeetingDate, selectedMeetingTime);
  var tableName;
  if(selectedClientType == "regular") {
    tableName = "meetingMemoRegular";
    clientPageName = "RegularClientDetailPage";
    meetingMemoData.put("companyRegularId", regularClientCompanyId);
  }
  else if(selectedClientType == "prospect") {
    tableName = "meetingMemoProspect";
    clientPageName = "ProspectClientDetailPage";
    meetingMemoData.put("companyProspectId", prospectClientCompanyId);
  }
  else {
    throw UnknownClientTypeException;
  }
  if(meetingMemoData.containsKey("id")) {
    meetingMemoData.put("plannedMeetingDate", plannedDateTime);
    meetingMemoData.put("updatedAt", nowInMillis());
    meetingMemoData.put("changeType", "UPDATE");

    updateExecution(tableName, meetingMemoData.id, meetingMemoData);
  }
  else {
    meetingMemoData.put("id", uuid());
    meetingMemoData.put("plannedMeetingDate", plannedDateTime);
    meetingMemoData.put("status", "prepared");
    meetingMemoData.put("createdAt", nowInMillis());
    meetingMemoData.put("changeType", "INSERT");

    insertExecution(tableName, meetingMemoData);
  }
  sendDataChangeRq(originId, tableName, [meetingMemoData]);
}

function updateMemoList(isCloseMemoPage) {
  var newMeetingMemoData = meetingMemoData.deepClone();
  newMeetingMemoData.put("plannedMeetingDate", dateToString(newMeetingMemoData.plannedMeetingDate, "dd.MM.yyyy. HH:mm"));
  newMeetingMemoData.put("createdAt", dateToString(newMeetingMemoData.createdAt, "dd.MM.yyyy."));
  if(newMeetingMemoData.containsKey("updatedAt")) {
    newMeetingMemoData.put("updatedAt", dateToString(newMeetingMemoData.updatedAt, "dd.MM.yyyy."));
  }

  if(newMeetingMemoData.changeType == "INSERT") {
    fireEvent(buildAddItemEvent("MeetingMemoRMList", mapMeetingMemoListData(newMeetingMemoData)), clientPageName);
  } else if(newMeetingMemoData.changeType == "UPDATE") {
    fireEvent(buildTargetReplaceItemEvent("MeetingMemoRMList", mapMeetingMemoListData(newMeetingMemoData)), clientPageName);
    fireEvent(buildRefreshItemEvent("MemoSearchList", getMeetingMemoSearchDataByDateAndContent(20, 0)), "AdvancedSearchPage");
  }
  if(isCloseMemoPage) {
    finishPage("MeetingMemoPage", originId);
  }
}
