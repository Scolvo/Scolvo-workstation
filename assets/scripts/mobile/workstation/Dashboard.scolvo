import {
  /mobile/common/TeamsReservation,
  /mobile/repository/ReservationRepository,
  /mobile/repository/WorkstationRepository,
  /mobile/workstation/Workstations
}

function onDashboard(originId) {
  var selectedTeamId = getUserById(sessionUserId()).teamId;
  var data = {
    "DashboardPage": {
      "DashboardTeamSelectOptions": createTeamOptions(selectedTeamId),
      "DashboardList": createDashboardListData(selectedTeamId)
    }
  };
  var actionEvents = [
    buildSourceSelectionChanged("DashboardTeamSelect", "DashboardTeamSelectChanged")
  ];
  display(DashboardPage, data, originId, actionEvents);
}

function getDateStringForList(day, relativeDayCount) {
  var dateString = dateToString(currentDay, "yyyy MMMM dd.");
  if(relativeDayCount == 0) {
    dateString = DICTIONARY.today + ", " + dateString;
  } else if(relativeDayCount == 1) {
    dateString = DICTIONARY.tomorrow + ", " + dateString;
  }
  return dateString;
}

function createDashboardListData(selectedTeamId) {
  var dashboardListData = [];
  var today = getDayStart(now());
  var totalWorkstationsForTeam = getWorkstationsForTeam(selectedTeamId).size();
  var reservations = prepareReservationForPeriod(selectedTeamId, today.getTime(), dateAdd(today, 29, "day").getTime());

  var currentDay = today;
  for(var i = 0; i < 30; i += 1) {
    var reservationString = dateToString(currentDay, "yyyy.MM.dd.");
    var availableCount = totalWorkstationsForTeam;
    if (reservations.get(reservationString) != null) {
      availableCount = totalWorkstationsForTeam - reservations.get(reservationString);
    }
    var dayData = {
      "dayText": getDateStringForList(currentDay, i),
      "availableWorkstations": resolveAvailableWorkstationLabel(availableCount),
      "day": currentDay.getTime()
    };
    dashboardListData.add(dayData);
    currentDay = dateAdd(currentDay, 1, "day");
  }
  return dashboardListData;
}

function resolveAvailableWorkstationLabel(availableWorkstations) {
  if(availableWorkstations == 0) {
    return DICTIONARY.noAvailableWorkstations;
  }
  return availableWorkstations + " " + DICTIONARY.numberOfAvailableWorkstations;
}

page DashboardPage {
  layout: vertical;
  template: general;
  settingsVisible: true;
  scolvoMenuVisible: true;

  inputField  DashboardTeamSelect {
    inputType: selectOne;
  }

  list DashboardList {
    template: listVerticalNormal;
    filterVisible: false;
    span: 0;
    itemTemplate: listItemMultiLine;
    columns: [
      mainText => dayText,
      subText => availableWorkstations
    ]
  }
}

function onDashboardPageLoaded(originId) {}

function onDashboardTeamSelectChanged(originId) {
  fireEvent(buildRefreshItemEvent("DashboardList", createDashboardListData($IN.data.value)), "DashboardPage");
}

function onDashboardListSelectionChanged(originId) {
  displayWorkstationsPage(originId, $IN.data.day);
}
