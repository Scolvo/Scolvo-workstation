import {
  /mobile/repository/CompanyRepository,
  /mobile/repository/UserRepository,
  /mobile/repository/BusinessCenterRepository,
  /mobile/SessionUser
}

function displayRegularClientDetailsFragment(originId, fragmentContainerId, companyId) {
  var companyDao = getCompanyByCompanyId(companyId);
  var regularClientDao = getRegularClientByCompanyId(companyId);
  var data = {
    "RegularClientDetailsFragment": {
      "RegularClientDetailsForm": buildRegularClientDetailsForm(companyDao, regularClientDao)
    }
  };
  var actionEvents = [];
  if(sessionUserIsRM()) {
    actionEvents.add(buildTargetVisibilityChangeEvent("RelationshipManager", "gone"));
  }
  displayFragment(fragmentContainerId, RegularClientDetailsFragment, data, originId, actionEvents);
}

fragment RegularClientDetailsFragment {
  layout: vertical;
  template: detail;
  span: 0;

  form RegularClientDetailsForm {
    template: detail;
    span: 0;
    actions: []
    fields: [
      fieldset businessRelated [
        field TotalExposureRSD => totalExposureRsd formItemReadOnlyFull,
        field InternalRating => internalRating formItemReadOnlyFull,
        field Overdue => overdue formItemReadOnlyFull,
        field DaysInDelay => daysInDelay formItemReadOnlyFull,
        field TurnoverRSDYearly => turnOverRsdYearly formItemReadOnlyFull,
        field TurnoverFXYearly => turnOverFxYearly formItemReadOnlyFull,
        field IncomeFromPayment => incomeFromPayment formItemReadOnlyFull,
        field TariffForPayment => tariffForPayment formItemReadOnlyFull,
        field Blockade => blockade formItemReadOnlyFull,
        field Ebank => ebank formItemReadOnlyFull,
        field NumberOfEmployeesOnPayroll => numberOfEmployeesOnPayroll formItemReadOnlyFull,
        field BusinessCard => businessCard formItemReadOnlyFull,
        field PosTerminal => posTerminal formItemReadOnlyFull
      ],
      fieldset financialFigures [
        field DateOfLastCorporateBalance => dateOfLastCorporateBalance formItemReadOnlyFull,
        field Revenue => revenue formItemReadOnlyFull,
        field NetIncome => netIncome formItemReadOnlyFull,
        field LeverageRatio => leverageRatio formItemReadOnlyFull,
        field LiquidityRatio => liquidityRatio formItemReadOnlyFull,
        field EquityRatio => equityRatio formItemReadOnlyFull
      ],
      fieldset companyData [
        field CompanyName => companyName formItemReadOnlyFull,
        field CompanyId => companyId formItemReadOnlyFull,
        field City => city formItemReadOnlyFull,
        field BusinessActivity => businessActivity formItemReadOnlyFull,
        field CompanySize => companySize formItemReadOnlyFull,
        field Established => established formItemReadOnlyFull,
        field MB => mb formItemReadOnlyFull
      ],
      fieldset contactData [
        field Address => address formItemReadOnlyFull,
        field Email => email formItemReadOnlyEmail,
        field Phone => phone formItemReadOnlyPhone,
        field RepresentatorName => representatorName formItemReadOnlyFull,
        field BusinessUnit => businessUnit formItemReadOnlyFull,
        field Branch => branch formItemReadOnlyFull,
        field RelationshipManager => relationshipManager formItemReadOnlyFull,
      ]
    ]
  }
}

function onRegularClientDetailsFragmentLoaded(originId) {}

function buildRegularClientDetailsForm(companyDao, regularClientDao) {
  var overdue = DICTIONARY.no;
  if (regularClientDao.overdue != null && regularClientDao.overdue) {
    overdue = DICTIONARY.yes;
  }

  var blockade = DICTIONARY.no;
  if (companyDao.blockade != null && companyDao.blockade) {
    blockade = DICTIONARY.yes;
  }

  var eBank = DICTIONARY.no;
  if (regularClientDao.eBank != null && regularClientDao.eBank) {
    eBank = DICTIONARY.yes;
  }

  var businessCard = DICTIONARY.no;
  if (regularClientDao.businessCard != null && regularClientDao.businessCard) {
    businessCard = DICTIONARY.yes;
  }

  var posTerminal = DICTIONARY.no;
  if (regularClientDao.posTerminal != null && regularClientDao.posTerminal) {
    posTerminal = DICTIONARY.yes;
  }

  var regularClientData = {
    "businessRelated": {
      "internalRating": regularClientDao.internalRating,
      "overdue": overdue,
      "blockade": blockade,
      "tariffForPayment": regularClientDao.tariffForPayment,
      "ebank": eBank,
      "businessCard": businessCard,
      "posTerminal": posTerminal
    },
    "financialFigures": {
      "dateOfLastCorporateBalance": regularClientDao.lastCorporateBalanceDate
    },
    "companyData": {
      "companyName": companyDao.name,
      "companyId": companyDao.companyId,
      "city": companyDao.city,
      "companySize": companyDao.companySize,
      "businessActivity": companyDao.businessActivity,
      "established": regularClientDao.established,
      "mb": regularClientDao.mb
    },
    "contactData": {
      "address": companyDao.address,
      "representatorName": companyDao.contactPerson,
      "phone": companyDao.phone,
      "email": regularClientDao.email,
      "branch": regularClientDao.branch
    }
  };

  var businessCenterDao;
  if(!sessionUserIsRM()) {
    var rmDao = getUserByUserId(companyDao.userId);
    regularClientData.contactData.put("relationshipManager", rmDao.name);
    businessCenterDao = getBusinessCenterById(rmDao.businessCenterId);
  }
  else {
    businessCenterDao = getBusinessCenter();
  }

  var businessCenterName = "";
  if(businessCenterDao != null) {
    businessCenterName = businessCenterDao.name;
  }

  regularClientData.contactData.put("businessUnit", businessCenterName);

  if(regularClientDao.daysInDelay != null) {
    regularClientData.businessRelated.put("daysInDelay", decimalFormat(regularClientDao.daysInDelay, "#"));
  }
  if(regularClientDao.employeesOnPayroll != null) {
    regularClientData.businessRelated.put("numberOfEmployeesOnPayroll", decimalFormat(regularClientDao.employeesOnPayroll, "#"));
  }
  if(regularClientDao.totalExposure != null) {
    regularClientData.businessRelated.put("totalExposureRsd", decimalFormat(regularClientDao.totalExposure, "###,##0.00"));
  }
  if(regularClientDao.turnoverRsdYearly != null) {
    regularClientData.businessRelated.put("turnOverRsdYearly", decimalFormat(regularClientDao.turnoverRsdYearly, "###,##0.00"));
  }
  if(regularClientDao.turnoverFxYearly != null) {
    regularClientData.businessRelated.put("turnOverFxYearly", decimalFormat(regularClientDao.turnoverFxYearly, "###,##0.00"));
  }
  if(regularClientDao.incomeFromPayment != null) {
    regularClientData.businessRelated.put("incomeFromPayment", decimalFormat(regularClientDao.incomeFromPayment, "###,##0.00"));
  }
  if(regularClientDao.revenue != null) {
    regularClientData.financialFigures.put("revenue", decimalFormat(regularClientDao.revenue, "###,##0.00"));
  }
  if(regularClientDao.netIncome != null) {
    regularClientData.financialFigures.put("netIncome", decimalFormat(regularClientDao.netIncome, "###,##0.00"));
  }
  if(regularClientDao.leverageRatio != null) {
    regularClientData.financialFigures.put("leverageRatio", decimalFormat(regularClientDao.leverageRatio, "###,##0.00"));
  }
  if(regularClientDao.liquidityRatio != null) {
    regularClientData.financialFigures.put("liquidityRatio", decimalFormat(regularClientDao.liquidityRatio, "###,##0.00"));
  }
  if(regularClientDao.equityRatio != null) {
    regularClientData.financialFigures.put("equityRatio", decimalFormat(regularClientDao.equityRatio, "###,##0.00"));
  }

  return regularClientData;
}
